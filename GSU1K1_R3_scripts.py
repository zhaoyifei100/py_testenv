from GSU1K1_R3_reg_def import *
# this is change AVES script to Class
# Class for two board sweep
import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

#from reg_define import *
#reg define change to unique name base on proj



#add windows judgement#
#FTDI & raspberry Compatible#
import platform

def get_system():
    system = platform.system()
    machine = platform.machine()
    if system == "Windows":
        output = "win_x86"
    else:
        output = "linux"
    return output

#direct use PIP manage i2c driver
#no need to consider .dll issue
#yfzhao, 250805

class aves_script:
    def __init__(self,i2c_port=1,chip_addr=0x58,):
        self.i2c_port = i2c_port
        self.chip_addr = chip_addr
        self.system = get_system()
        if self.system == "linux":
            #from common.raspberry import raspberry
            from pytestenv.py_raspberry import raspberry
            self.raspberry_i2c = raspberry(i2c_port=self.i2c_port)
        else:
            #from common.FTDI import FTDI
            from pytestenv.py_ftdi import FTDI
            self.ftdi_i2c = FTDI(i2c_port=self.i2c_port)


    def readReg(self, addr1, addr2):
        if self.system == "linux":
            read_int = self.raspberry_i2c.readReg(addr1, addr2)
        else:
            read_int = self.ftdi_i2c.ftdi_i2c_readReg(addr1, addr2)
        return read_int

    def writeReg(self, addr1, addr2, value):
        if self.system == "linux":
            self.raspberry_i2c.writeReg(addr1, addr2, value)
        else:
            self.ftdi_i2c.ftdi_i2c_writeReg(addr1, addr2, value)

    def writeBits(self, addr1, addr2, lsb, bits, invalue):
        if self.system == "linux":
            self.raspberry_i2c.writeBits(addr1, addr2, lsb, bits, invalue)
        else:
            self.ftdi_i2c.ftdi_i2c_writeBits(addr1, addr2, lsb, bits, invalue)

    def readBits(self, addr1, addr2, lsb, bits):
        if self.system == "linux":
            output = self.raspberry_i2c.readBits(addr1, addr2, lsb, bits)
        else:
            output = self.ftdi_i2c.ftdi_i2c_readBits(addr1, addr2, lsb, bits)
        return output

    def readRegs(self, addr1, addr2, num):
        if self.system == "linux":
            output = self.raspberry_i2c.readRegs(addr1, addr2, num)
        else:
            output = self.ftdi_i2c.ftdi_i2c_readRegs(addr1, addr2, num)
        return output


#######rasp_conv_aves_defination end##########

    def func_01_01_Chip_Power_Up(self):
        print("Cfg func_01_01_Chip_Power_Up...")
        self.writeReg(0x09,0x02,0x13) #I2c set
        self.writeReg(0x05,0x39,0x80) #auclk_count[2:0] MUST be 0
        self.writeReg(0x09,0xc8,0x08) #up port usb2v1 or usb2v2 sel, i2c_utmi_port0_sel
        self.writeReg(0x09,0x33,0x68) #

    def func_01_01_01_RESET_ALL(self):
        print("Cfg func_01_01_01_RESET_ALL...")
        self.writeReg(0x00,0xFF,0xFF) #

    def func_01_01_02_PLL_no_ssc_init(self):
        print("Cfg func_01_01_02_PLL_no_ssc_init...")
        self.writeReg(0x05,0xF0,0x0A) #U2 PLL disable
        self.writeReg(0x05,0x34,0x1E) #U2 PLL LDO EN
        self.writeReg(0x05,0x35,0x58) #U2 PLL RSV 00
        self.writeReg(0x05,0xF1,0x60) #U2 LOOPDIV 2.4G
        self.writeReg(0x05,0xF0,0x0B) #U2 PLL enable
        self.writeReg(0x05,0x64,0x1E) #U3 PLL RSV
        self.writeReg(0x05,0x65,0x58) #U3 PLL RSV
        self.writeReg(0x09,0x00,0x08) #usb2 480m_domain_rst
        self.writeReg(0x09,0x00,0x00) #usb2 480m_domain_rst

    def func_01_01_02_02_MPLL_with__2000ppm(self):
        print("Cfg func_01_01_02_02_MPLL_with__2000ppm...")
        self.writeReg(0x05,0xF0,0x0A) #U2 PLL disable
        self.writeReg(0x05,0x34,0x1E) #U2 PLL LDO EN
        self.writeReg(0x05,0x35,0x58) #U2 PLL RSV 00
        self.writeReg(0x05,0xF1,0x41) #U2 LOOPDIV 577
        self.writeReg(0x05,0xF2,0x02) #U2 LOOPDIV 577
        self.writeReg(0x05,0xF0,0x32) #U2 PLL refdiv 6
        self.writeReg(0x05,0xF0,0x33) #U2 PLL enable
        self.writeReg(0x09,0x00,0x08) #usb2 480m_domain_rst
        self.writeReg(0x09,0x00,0x00) #usb2 480m_domain_rst

    def func_01_01_002_Hub_remove_reset(self):
        print("Cfg func_01_01_002_Hub_remove_reset...")
        self.writeReg(0x09,0x64,0x07) #hub_2_rstn & hub_ss_rstn

    def func_01_01_002_CTS_ANA_for_USB2p0(self):
        print("Cfg func_01_01_002_CTS_ANA_for_USB2p0...")
        self.writeReg(0x0a,0x04,0x29) #
        self.writeReg(0x0a,0x07,0x15) #

    def func_01_01_03_ADC_test(self):
        print("Cfg func_01_01_03_ADC_test...")
        self.writeReg(0x09,0x20,0x08) #ADC clkdiv ctrl
        self.writeReg(0x09,0x21,0x1F) #ADC power on
        self.writeReg(0x09,0x24,0x0F) #ADC sample ctrl

    def func_01_01_04_PLL_with_ssc_init(self):
        print("Cfg func_01_01_04_PLL_with_ssc_init...")
        self.func_01_01_02_PLL_no_ssc_init()
        self.writeReg(0x05,0xF8,0x10) #
        self.writeReg(0x05,0xF5,0x05) #
        self.writeReg(0x05,0xF6,0x19) #
        self.writeReg(0x05,0xF7,0x00) #
        self.writeReg(0x06,0xB6,0x00) #
        self.writeReg(0x06,0xB7,0x00) #
        self.writeReg(0x06,0xB8,0x00) #
        self.writeReg(0x06,0xB9,0x80) #
        self.writeReg(0x06,0xB1,0xFA) #
        self.writeReg(0x06,0xB2,0xDB) #
        self.writeReg(0x06,0xB3,0x03) #
        self.writeReg(0x06,0xB4,0x00) #
        self.writeReg(0x06,0xB5,0x09) #
        self.writeReg(0x06,0xC0,0x1F) #

    def func_01_01_04_PLL_with_ssc_init_lpmode(self):
        print("Cfg func_01_01_04_PLL_with_ssc_init_lpmode...")
        self.func_01_01_02_PLL_no_ssc_init()
        self.writeReg(0x05,0xF8,0xF0) #
        self.writeReg(0x05,0xF5,0x07) #
        self.writeReg(0x05,0xF0,0x0F) #
        self.writeReg(0x05,0x65,0x59) #
        self.writeReg(0x06,0xC0,0x0D) #ssc_en=0, mplldpll rst for lowpower
        self.writeReg(0x06,0xB5,0x31) #man_en=1, man=24, pll=2.4GHz
        self.writeReg(0x06,0xb6,0x7c) #
        self.writeReg(0x06,0xb7,0x86) #
        self.writeReg(0x06,0xb8,0x5d) #
        self.writeReg(0x06,0xb9,0x09) #
        self.writeReg(0x06,0xb1,0xFA) #
        self.writeReg(0x06,0xb2,0x8b) #
        self.writeReg(0x06,0xb3,0x02) #
        self.writeReg(0x06,0xb4,0x00) #
        self.writeReg(0x06,0xC0,0x1D) #ssc_en=1, mplldpll rst for lowpower

    def func_01_01_04_PLL_with_Lower_Freq_init(self):
        print("Cfg func_01_01_04_PLL_with_Lower_Freq_init...")
        self.func_01_01_02_PLL_no_ssc_init()
        self.writeReg(0x05,0xF8,0x10) #
        self.writeReg(0x05,0xF5,0x05) #
        self.writeReg(0x05,0xF6,0x19) #
        self.writeReg(0x05,0xF7,0x00) #
        self.writeReg(0x06,0x70,0x00) #pll_src_sel_ch0/ch1  manual
        self.writeReg(0x06,0x72,0x80) #manual_ch0_fq_word
        self.writeReg(0x06,0x73,0xF6) #
        self.writeReg(0x06,0x74,0xFE) #
        self.writeReg(0x06,0x75,0x80) #
        self.writeReg(0x06,0x76,0x10) #manual_ch0_dp_word
        self.writeReg(0x06,0x76,0x12) #manual_ch0_update
        self.writeReg(0x06,0x76,0x10) #manual_ch0_update
        self.writeReg(0x06,0x77,0x80) #manual_ch1_fq_word
        self.writeReg(0x06,0x78,0xF6) #
        self.writeReg(0x06,0x79,0xFE) #
        self.writeReg(0x06,0x7A,0x80) #
        self.writeReg(0x06,0x7B,0x10) #manual_ch1_dp_word
        self.writeReg(0x06,0x7B,0x12) #manual_ch1_update
        self.writeReg(0x06,0x7B,0x10) #manual_ch1_update
        self.writeReg(0x06,0xB6,0x00) #
        self.writeReg(0x06,0xB7,0x00) #
        self.writeReg(0x06,0xB8,0x00) #
        self.writeReg(0x06,0xB9,0x80) #
        self.writeReg(0x06,0xB1,0xFA) #
        self.writeReg(0x06,0xB2,0xDB) #
        self.writeReg(0x06,0xB3,0x03) #
        self.writeReg(0x06,0xB4,0x00) #
        self.writeReg(0x06,0xB5,0x09) #

    def func_01_01_04_PLL_with_higher_Freq_init(self):
        print("Cfg func_01_01_04_PLL_with_higher_Freq_init...")
        self.func_01_01_02_PLL_no_ssc_init()
        self.writeReg(0x05,0xF8,0x10) #
        self.writeReg(0x05,0xF5,0x05) #
        self.writeReg(0x05,0xF6,0x19) #
        self.writeReg(0x05,0xF7,0x00) #
        self.writeReg(0x06,0x70,0x00) #pll_src_sel_ch0/ch1  manual
        self.writeReg(0x06,0x72,0x7F) #manual_ch0_fq_word
        self.writeReg(0x06,0x73,0x52) #
        self.writeReg(0x06,0x74,0x55) #
        self.writeReg(0x06,0x75,0x0E) #
        self.writeReg(0x06,0x76,0x10) #manual_ch0_dp_word
        self.writeReg(0x06,0x76,0x12) #manual_ch0_update
        self.writeReg(0x06,0x76,0x10) #manual_ch0_update
        self.writeReg(0x06,0x77,0x7F) #manual_ch1_fq_word
        self.writeReg(0x06,0x78,0x52) #
        self.writeReg(0x06,0x79,0x55) #
        self.writeReg(0x06,0x7A,0x0E) #
        self.writeReg(0x06,0x7B,0x10) #manual_ch1_dp_word
        self.writeReg(0x06,0x7B,0x12) #manual_ch1_update
        self.writeReg(0x06,0x7B,0x10) #manual_ch1_update

    def func_01_01_05_ANA_Rx_RAM_EQ(self):
        print("Cfg func_01_01_05_ANA_Rx_RAM_EQ...")
        self.writeReg(0x09,0x05,0x05) #
        self.writeReg(0x15,0x00,0x00) #
        self.writeReg(0x15,0x01,0x40) #
        self.writeReg(0x15,0x02,0x00) #
        self.writeReg(0x15,0x03,0x00) #
        self.writeReg(0x15,0x04,0x00) #
        self.writeReg(0x15,0x05,0x01) #
        self.writeReg(0x15,0x06,0x00) #
        self.writeReg(0x15,0x07,0x00) #
        self.writeReg(0x15,0x08,0x00) #
        self.writeReg(0x15,0x09,0x00) #
        self.writeReg(0x15,0x0a,0x00) #
        self.writeReg(0x15,0x0b,0x00) #
        self.writeReg(0x15,0x0c,0xc0) #
        self.writeReg(0x15,0x0d,0x00) #
        self.writeReg(0x15,0x0e,0x00) #
        self.writeReg(0x15,0x0f,0x00) #
        self.writeReg(0x15,0x10,0x01) #
        self.writeReg(0x15,0x11,0x00) #
        self.writeReg(0x15,0x12,0x00) #
        self.writeReg(0x15,0x13,0x00) #
        self.writeReg(0x15,0x14,0x00) #
        self.writeReg(0x15,0x15,0x00) #
        self.writeReg(0x15,0x16,0x00) #
        self.writeReg(0x15,0x17,0xc0) #
        self.writeReg(0x15,0x18,0x03) #
        self.writeReg(0x15,0x19,0x00) #
        self.writeReg(0x15,0x1a,0x00) #
        self.writeReg(0x15,0x1b,0x01) #
        self.writeReg(0x15,0x1c,0x00) #
        self.writeReg(0x15,0x1d,0x00) #
        self.writeReg(0x15,0x1e,0x00) #
        self.writeReg(0x15,0x1f,0x00) #
        self.writeReg(0x15,0x20,0x00) #
        self.writeReg(0x15,0x21,0x00) #
        self.writeReg(0x15,0x22,0x00) #
        self.writeReg(0x15,0x23,0x00) #
        self.writeReg(0x15,0x24,0x00) #
        self.writeReg(0x15,0x25,0x00) #
        self.writeReg(0x15,0x26,0x00) #
        self.writeReg(0x15,0x27,0x00) #
        self.writeReg(0x15,0x28,0x00) #
        self.writeReg(0x15,0x29,0x00) #
        self.writeReg(0x15,0x2a,0x00) #
        self.writeReg(0x15,0x2b,0x00) #
        self.writeReg(0x15,0x2c,0x00) #
        self.writeReg(0x15,0x2d,0x00) #
        self.writeReg(0x15,0x2e,0x00) #
        self.writeReg(0x15,0x2f,0x00) #
        self.writeReg(0x15,0x30,0x00) #
        self.writeReg(0x15,0x31,0x00) #
        self.writeReg(0x15,0x32,0x00) #
        self.writeReg(0x15,0x33,0x00) #
        self.writeReg(0x15,0x34,0x00) #
        self.writeReg(0x15,0x35,0x00) #
        self.writeReg(0x15,0x36,0x00) #
        self.writeReg(0x15,0x37,0x00) #
        self.writeReg(0x15,0x38,0x00) #
        self.writeReg(0x15,0x39,0x00) #
        self.writeReg(0x15,0x3a,0x00) #
        self.writeReg(0x15,0x3b,0x00) #
        self.writeReg(0x15,0x3c,0x00) #
        self.writeReg(0x15,0x3d,0x00) #
        self.writeReg(0x15,0x3e,0x00) #
        self.writeReg(0x15,0x3f,0x00) #
        self.writeReg(0x15,0x40,0x00) #
        self.writeReg(0x15,0x41,0x00) #
        self.writeReg(0x15,0x42,0x00) #
        self.writeReg(0x15,0x43,0x00) #
        self.writeReg(0x15,0x44,0x00) #
        self.writeReg(0x15,0x45,0x00) #
        self.writeReg(0x15,0x46,0x00) #
        self.writeReg(0x15,0x47,0x00) #
        self.writeReg(0x15,0x48,0x00) #
        self.writeReg(0x15,0x49,0x00) #
        self.writeReg(0x15,0x4a,0x00) #
        self.writeReg(0x15,0x4b,0x00) #
        self.writeReg(0x15,0x4c,0x00) #
        self.writeReg(0x15,0x4d,0x00) #
        self.writeReg(0x15,0x4e,0x00) #
        self.writeReg(0x15,0x4f,0x00) #
        self.writeReg(0x15,0x50,0x00) #
        self.writeReg(0x15,0x51,0x00) #
        self.writeReg(0x15,0x52,0x00) #
        self.writeReg(0x15,0x53,0x00) #
        self.writeReg(0x15,0x54,0x00) #
        self.writeReg(0x15,0x55,0x00) #
        self.writeReg(0x15,0x56,0x00) #
        self.writeReg(0x15,0x57,0x00) #
        self.writeReg(0x09,0x05,0x00) #

    def func_01_01_06_BC1p2_CDP_mode(self):
        print("Cfg func_01_01_06_BC1p2_CDP_mode...")
        self.writeReg(0x20,0x00,0x43) #
        self.writeReg(0x20,0x01,0xFF) #
        self.writeReg(0x22,0x02,0x04) #
        self.writeReg(0x22,0x04,0x08) #
        self.writeReg(0x22,0x06,0x04) #
        self.writeReg(0x22,0x08,0x04) #
        self.writeReg(0x23,0x02,0x04) #
        self.writeReg(0x23,0x04,0x08) #
        self.writeReg(0x23,0x06,0x04) #
        self.writeReg(0x23,0x08,0x04) #
        self.writeReg(0x24,0x02,0x04) #
        self.writeReg(0x24,0x04,0x08) #
        self.writeReg(0x24,0x06,0x04) #
        self.writeReg(0x24,0x08,0x04) #
        self.writeReg(0x25,0x02,0x04) #
        self.writeReg(0x25,0x04,0x08) #
        self.writeReg(0x25,0x06,0x04) #
        self.writeReg(0x25,0x08,0x04) #

    def func_01_01_07_Reset_PRBS(self):
        print("Cfg func_01_01_07_Reset_PRBS...")
        self.writeReg(0x31,0x63,0x20) #
        self.writeReg(0x31,0x64,0x30) #
        self.writeReg(0x31,0x64,0xB0) #
        self.writeReg(0x31,0x64,0x30) #
        self.writeReg(0x31,0x63,0x30) #
        self.writeReg(0x31,0x63,0x20) #
        self.writeReg(0x31,0x63,0x30) #
        self.writeReg(0x31,0x64,0xB0) #
        self.writeReg(0x32,0x63,0x20) #
        self.writeReg(0x32,0x64,0x30) #
        self.writeReg(0x32,0x64,0xB0) #
        self.writeReg(0x32,0x64,0x30) #
        self.writeReg(0x32,0x63,0x30) #
        self.writeReg(0x32,0x63,0x20) #
        self.writeReg(0x32,0x63,0x30) #
        self.writeReg(0x32,0x64,0xB0) #
        self.writeReg(0x33,0x63,0x20) #
        self.writeReg(0x33,0x64,0x30) #
        self.writeReg(0x33,0x64,0xB0) #
        self.writeReg(0x33,0x64,0x30) #
        self.writeReg(0x33,0x63,0x30) #
        self.writeReg(0x33,0x63,0x20) #
        self.writeReg(0x33,0x63,0x30) #
        self.writeReg(0x33,0x64,0xB0) #
        self.writeReg(0x34,0x63,0x20) #
        self.writeReg(0x34,0x64,0x30) #
        self.writeReg(0x34,0x64,0xB0) #
        self.writeReg(0x34,0x64,0x30) #
        self.writeReg(0x34,0x63,0x30) #
        self.writeReg(0x34,0x63,0x20) #
        self.writeReg(0x34,0x63,0x30) #
        self.writeReg(0x34,0x64,0xB0) #
        self.writeReg(0x35,0x63,0x20) #
        self.writeReg(0x35,0x64,0x30) #
        self.writeReg(0x35,0x64,0xB0) #
        self.writeReg(0x35,0x64,0x30) #
        self.writeReg(0x35,0x63,0x30) #
        self.writeReg(0x35,0x63,0x20) #
        self.writeReg(0x35,0x63,0x30) #
        self.writeReg(0x35,0x64,0xB0) #

    def func_01_01_08_USB2_FSLS(self):
        print("Cfg func_01_01_08_USB2_FSLS...")
        self.writeReg(0x0D,0x0B,0xFF) #rftime max
        self.writeReg(0x0D,0x0C,0xFF) #rftime max
        self.writeReg(0x0D,0x0D,0xFF) #rftime max
        self.writeReg(0x0D,0x0E,0xFF) #rftime max
        self.writeReg(0x0D,0x0A,0xF3) #id max
        self.writeReg(0x0D,0x0F,0x9F) #bias max
        self.writeReg(0x0E,0x0B,0xFF) #rftime max
        self.writeReg(0x0E,0x0C,0xFF) #rftime max
        self.writeReg(0x0E,0x0D,0xFF) #rftime max
        self.writeReg(0x0E,0x0E,0xFF) #rftime max
        self.writeReg(0x0E,0x0A,0xF3) #id max
        self.writeReg(0x0E,0x0F,0x9F) #bias max
        self.writeReg(0x0C,0x0B,0xFF) #rftime max
        self.writeReg(0x0C,0x0C,0xFF) #rftime max
        self.writeReg(0x0C,0x0D,0xFF) #rftime max
        self.writeReg(0x0C,0x0E,0xFF) #rftime max
        self.writeReg(0x0C,0x0A,0xF3) #id max
        self.writeReg(0x0C,0x0F,0x9F) #bias max
        self.writeReg(0x0B,0x0B,0xFF) #rftime max
        self.writeReg(0x0B,0x0C,0xFF) #rftime max
        self.writeReg(0x0B,0x0D,0xFF) #rftime max
        self.writeReg(0x0B,0x0E,0xFF) #rftime max
        self.writeReg(0x0B,0x0A,0xF3) #id max
        self.writeReg(0x0B,0x0F,0x9F) #bias max
        self.writeReg(0x0A,0x0B,0xFF) #rftime max
        self.writeReg(0x0A,0x0C,0xFF) #rftime max
        self.writeReg(0x0A,0x0D,0xFF) #rftime max
        self.writeReg(0x0A,0x0E,0xFF) #rftime max
        self.writeReg(0x0A,0x0A,0xF3) #id max
        self.writeReg(0x0A,0x0F,0x9F) #bias max

    def func_01_01_09_SSC_set_10000ppm(self):
        print("Cfg func_01_01_09_SSC_set_10000ppm...")
        self.writeReg(0x06,0xB1,0x00) #
        self.writeReg(0x06,0xB2,0x07) #
        self.writeReg(0x06,0xB3,0xB7) #
        self.writeReg(0x06,0xB4,0xF4) #

    def func_01_01_10_ANA_Tx_SWING__for_USB3(self):
        print("Cfg func_01_01_10_ANA_Tx_SWING__for_USB3...")
        self.writeReg(0x31,0xEA,0x80) #swing overwrite
        self.writeReg(0x32,0xEA,0x80) #swing overwrite
        self.writeReg(0x33,0xEA,0x80) #swing overwrite
        self.writeReg(0x34,0xEA,0x80) #swing overwrite
        self.writeReg(0x35,0xEA,0x80) #swing overwrite
        self.writeReg(0x31,0x3A,0x80) #swing0 set 16
        self.writeReg(0x32,0x3A,0x80) #
        self.writeReg(0x33,0x3A,0x80) #
        self.writeReg(0x34,0x3A,0x80) #
        self.writeReg(0x35,0x3A,0x80) #

    def func_01_01_11_ANA_Rx_CDR_freq_reset(self):
        print("Cfg func_01_01_11_ANA_Rx_CDR_freq_reset...")
        self.writeReg(0x10,0xE0,0x86) #off cdr freqtracking es1
        self.writeReg(0x10,0xE0,0x87) #on cdr freqtracking es1
        self.writeReg(0x10,0x3F,0x02) #CDR reset
        self.writeReg(0x10,0x3F,0x03) #CDR normal
        self.writeReg(0x11,0xE0,0x86) #off cdr freqtracking es1
        self.writeReg(0x11,0xE0,0x87) #on cdr freqtracking es1
        self.writeReg(0x11,0x3F,0x02) #CDR reset
        self.writeReg(0x11,0x3F,0x03) #CDR normal
        self.writeReg(0x12,0xE0,0x86) #off cdr freqtracking es1
        self.writeReg(0x12,0xE0,0x87) #on cdr freqtracking es1
        self.writeReg(0x12,0x3F,0x02) #CDR reset
        self.writeReg(0x12,0x3F,0x03) #CDR normal
        self.writeReg(0x13,0xE0,0x86) #off cdr freqtracking es1
        self.writeReg(0x13,0xE0,0x87) #on cdr freqtracking es1
        self.writeReg(0x13,0x3F,0x02) #CDR reset
        self.writeReg(0x13,0x3F,0x03) #CDR normal
        self.writeReg(0x14,0xE0,0x86) #off cdr freqtracking es1
        self.writeReg(0x14,0xE0,0x87) #on cdr freqtracking es1
        self.writeReg(0x14,0x3F,0x02) #CDR reset
        self.writeReg(0x14,0x3F,0x03) #CDR normal

    def func_01_01_12_USB3_Upcdr_adaptive_param(self):
        print("Cfg func_01_01_12_USB3_Upcdr_adaptive_param...")
        self.func_01_07_01_USB3_UP_Rx_ANA()
        self.writeReg(0x10,0x4b,0x00) #khp_t man_en=0
        self.writeReg(0x10,0x69,0x1f) #khp_t seg_en=1
        self.writeReg(0x10,0x6a,0xec) #prevga_gian man_en=0, when man=0, use seg
        self.writeReg(0x10,0x09,0x0e) #dfe mode=0,decheck en=1,only meas init eq cfg=1,seg en=1,init_sel=0
        self.writeReg(0x10,0x5b,0x11) #meh use i2c
        self.writeReg(0x10,0x60,0x00) #meh cycle set 5,000
        self.writeReg(0x10,0x61,0x13) #
        self.writeReg(0x10,0x62,0x88) #
        self.writeReg(0x10,0xa0,0x00) #loop off
        self.writeReg(0x10,0xa1,0x00) #loop off
        self.writeReg(0x10,0xa2,0x00) #loop off
        self.writeReg(0x10,0xa3,0x00) #loop off
        self.writeReg(0x10,0xa4,0x00) #loop off
        self.writeReg(0x10,0xa5,0x00) #loop off
        self.writeReg(0x10,0xa6,0x00) #loop off

    def func_01_01_13_Set_pipe_dp1_send_clkdiv10(self):
        print("Cfg func_01_01_13_Set_pipe_dp1_send_clkdiv10...")
        self.func_03_02_PIPE_dp1_Tx_Rx_PRBS()
        self.writeReg(0x32,0x1C,0x20) #
        self.writeReg(0x32,0x21,0x9F) #
        self.writeReg(0x32,0x22,0xFF) #
        self.writeReg(0x32,0x26,0x80) #
        self.writeReg(0x32,0x27,0x00) #

    def func_01_01_14_ANA_Tx_SET__USB3(self):
        print("Cfg func_01_01_14_ANA_Tx_SET__USB3...")
        self.writeReg(0x31,0xea,0xc0) #
        self.writeReg(0x31,0x3a,0x52) #
        self.writeReg(0x31,0x3a,0x52) #
        self.writeReg(0x31,0x3b,0x94) #
        self.writeReg(0x31,0x3b,0x94) #
        self.writeReg(0x31,0x3b,0x94) #
        self.writeReg(0x31,0x3c,0xa5) #
        self.writeReg(0x31,0x3c,0xa5) #
        self.writeReg(0x31,0x3d,0x29) #
        self.writeReg(0x31,0x3d,0x29) #
        self.writeReg(0x31,0x3d,0x29) #
        self.writeReg(0x31,0x3e,0x4a) #
        self.writeReg(0x31,0x3e,0x4a) #
        self.writeReg(0x31,0x3f,0x52) #
        self.writeReg(0x31,0x3f,0x52) #
        self.writeReg(0x31,0x40,0x94) #
        self.writeReg(0x31,0x40,0x94) #
        self.writeReg(0x31,0x40,0x94) #
        self.writeReg(0x31,0x41,0xa0) #
        self.writeReg(0x31,0xf0,0x00) #
        self.writeReg(0x31,0xea,0xc0) #
        self.writeReg(0x31,0xf6,0x0e) #
        self.writeReg(0x31,0xf7,0x00) #
        self.writeReg(0x31,0x0e,0x40) #
        self.writeReg(0x31,0xed,0x1f) #
        self.writeReg(0x31,0xee,0xf7) #
        self.writeReg(0x32,0xea,0xc0) #
        self.writeReg(0x32,0x3a,0x52) #
        self.writeReg(0x32,0x3a,0x52) #
        self.writeReg(0x32,0x3b,0x94) #
        self.writeReg(0x32,0x3b,0x94) #
        self.writeReg(0x32,0x3b,0x94) #
        self.writeReg(0x32,0x3c,0xa5) #
        self.writeReg(0x32,0x3c,0xa5) #
        self.writeReg(0x32,0x3d,0x29) #
        self.writeReg(0x32,0x3d,0x29) #
        self.writeReg(0x32,0x3d,0x29) #
        self.writeReg(0x32,0x3e,0x4a) #
        self.writeReg(0x32,0x3e,0x4a) #
        self.writeReg(0x32,0x3f,0x52) #
        self.writeReg(0x32,0x3f,0x52) #
        self.writeReg(0x32,0x40,0x94) #
        self.writeReg(0x32,0x40,0x94) #
        self.writeReg(0x32,0x40,0x94) #
        self.writeReg(0x32,0x41,0xa0) #
        self.writeReg(0x32,0xf0,0x00) #
        self.writeReg(0x32,0xea,0xc0) #
        self.writeReg(0x32,0xf6,0x0e) #
        self.writeReg(0x32,0xf7,0x00) #
        self.writeReg(0x32,0x0e,0x40) #
        self.writeReg(0x32,0xed,0x1f) #
        self.writeReg(0x32,0xee,0xf7) #
        self.writeReg(0x33,0xea,0xc0) #
        self.writeReg(0x33,0x3a,0x52) #
        self.writeReg(0x33,0x3a,0x52) #
        self.writeReg(0x33,0x3b,0x94) #
        self.writeReg(0x33,0x3b,0x94) #
        self.writeReg(0x33,0x3b,0x94) #
        self.writeReg(0x33,0x3c,0xa5) #
        self.writeReg(0x33,0x3c,0xa5) #
        self.writeReg(0x33,0x3d,0x29) #
        self.writeReg(0x33,0x3d,0x29) #
        self.writeReg(0x33,0x3d,0x29) #
        self.writeReg(0x33,0x3e,0x4a) #
        self.writeReg(0x33,0x3e,0x4a) #
        self.writeReg(0x33,0x3f,0x52) #
        self.writeReg(0x33,0x3f,0x52) #
        self.writeReg(0x33,0x40,0x94) #
        self.writeReg(0x33,0x40,0x94) #
        self.writeReg(0x33,0x40,0x94) #
        self.writeReg(0x33,0x41,0xa0) #
        self.writeReg(0x33,0xf0,0x00) #
        self.writeReg(0x33,0xea,0xc0) #
        self.writeReg(0x33,0xf6,0x0e) #
        self.writeReg(0x33,0xf7,0x00) #
        self.writeReg(0x33,0x0e,0x40) #
        self.writeReg(0x33,0xed,0x1f) #
        self.writeReg(0x33,0xee,0xf7) #
        self.writeReg(0x34,0xea,0xc0) #
        self.writeReg(0x34,0x3a,0x52) #
        self.writeReg(0x34,0x3a,0x52) #
        self.writeReg(0x34,0x3b,0x94) #
        self.writeReg(0x34,0x3b,0x94) #
        self.writeReg(0x34,0x3b,0x94) #
        self.writeReg(0x34,0x3c,0xa5) #
        self.writeReg(0x34,0x3c,0xa5) #
        self.writeReg(0x34,0x3d,0x29) #
        self.writeReg(0x34,0x3d,0x29) #
        self.writeReg(0x34,0x3d,0x29) #
        self.writeReg(0x34,0x3e,0x4a) #
        self.writeReg(0x34,0x3e,0x4a) #
        self.writeReg(0x34,0x3f,0x52) #
        self.writeReg(0x34,0x3f,0x52) #
        self.writeReg(0x34,0x40,0x94) #
        self.writeReg(0x34,0x40,0x94) #
        self.writeReg(0x34,0x40,0x94) #
        self.writeReg(0x34,0x41,0xa0) #
        self.writeReg(0x34,0xf0,0x00) #
        self.writeReg(0x34,0xea,0xc0) #
        self.writeReg(0x34,0xf6,0x0e) #
        self.writeReg(0x34,0xf7,0x00) #
        self.writeReg(0x34,0x0e,0x40) #
        self.writeReg(0x34,0xed,0x1f) #
        self.writeReg(0x34,0xee,0xf7) #
        self.writeReg(0x35,0xea,0xc0) #
        self.writeReg(0x35,0x3a,0x52) #
        self.writeReg(0x35,0x3a,0x52) #
        self.writeReg(0x35,0x3b,0x94) #
        self.writeReg(0x35,0x3b,0x94) #
        self.writeReg(0x35,0x3b,0x94) #
        self.writeReg(0x35,0x3c,0xa5) #
        self.writeReg(0x35,0x3c,0xa5) #
        self.writeReg(0x35,0x3d,0x29) #
        self.writeReg(0x35,0x3d,0x29) #
        self.writeReg(0x35,0x3d,0x29) #
        self.writeReg(0x35,0x3e,0x4a) #
        self.writeReg(0x35,0x3e,0x4a) #
        self.writeReg(0x35,0x3f,0x52) #
        self.writeReg(0x35,0x3f,0x52) #
        self.writeReg(0x35,0x40,0x94) #
        self.writeReg(0x35,0x40,0x94) #
        self.writeReg(0x35,0x40,0x94) #
        self.writeReg(0x35,0x41,0xa0) #
        self.writeReg(0x35,0xf0,0x00) #
        self.writeReg(0x35,0xea,0xc0) #
        self.writeReg(0x35,0xf6,0x0e) #
        self.writeReg(0x35,0xf7,0x00) #
        self.writeReg(0x35,0x0e,0x40) #
        self.writeReg(0x35,0xed,0x1f) #
        self.writeReg(0x35,0xee,0xf7) #

    def func_01_05_01_USB2v1_UP_ANA(self):
        print("Cfg func_01_05_01_USB2v1_UP_ANA...")
        self.writeReg(0x21,0x66,0x18) #UP HS CS CALI MAN
        self.writeReg(0x0A,0x05,0x94) #sql_sel ana
        self.writeReg(0x0A,0x06,0x7E) #cdr clk sel 2x delay
        self.writeReg(0x0A,0x00,0x30) #bypass rd en off
        self.writeReg(0x0A,0x10,0x61) #UP HS CS BIAS
        self.writeReg(0x0A,0x0A,0x83) #UP SE0 res
        self.writeReg(0x0A,0x00,0x00) #UP HS SWING CAL OFF
        self.writeReg(0x0A,0x04,0x94) #UP SQL
        self.writeReg(0x0A,0x05,0x84) #UP SQL SEL
        self.writeReg(0x0A,0x07,0x1A) #UP RX pre_amp, DIFF!
        self.writeReg(0x0A,0x02,0x67) #UP CDR BW MAX
        self.writeReg(0x0A,0x12,0x42) #sql_ref_sel
        self.writeReg(0x0A,0x14,0x0A) #UP CDR BW MAX

    def func_01_05_02_USB2v1_DP1_ANA(self):
        print("Cfg func_01_05_02_USB2v1_DP1_ANA...")
        self.writeReg(0x22,0x66,0x18) #UP HS CS CALI MAN
        self.writeReg(0x0B,0x05,0x94) #sql_sel ana
        self.writeReg(0x0B,0x06,0x7E) #cdr clk sel 2x delay
        self.writeReg(0x0B,0x00,0x30) #bypass rd en off
        self.writeReg(0x0B,0x10,0x61) #UP HS CS BIAS
        self.writeReg(0x0B,0x0A,0x83) #UP SE0 res
        self.writeReg(0x0B,0x00,0x00) #UP HS SWING CAL OFF
        self.writeReg(0x0B,0x04,0x74) #UP SQL
        self.writeReg(0x0B,0x05,0x84) #UP SQL SEL
        self.writeReg(0x0B,0x07,0x1A) #UP RX pre_amp, DIFF!
        self.writeReg(0x0B,0x02,0x67) #UP CDR BW MAX
        self.writeReg(0x0B,0x12,0x42) #sql_ref_sel
        self.writeReg(0x0B,0x14,0x0A) #UP CDR BW MAX

    def func_01_05_03_USB2v1_DP2_ANA(self):
        print("Cfg func_01_05_03_USB2v1_DP2_ANA...")
        self.writeReg(0x23,0x66,0x18) #UP HS CS CALI MAN
        self.writeReg(0x0C,0x05,0x94) #sql_sel ana
        self.writeReg(0x0C,0x06,0x7E) #cdr clk sel 2x delay
        self.writeReg(0x0C,0x00,0x30) #bypass rd en off
        self.writeReg(0x0C,0x10,0x61) #UP HS CS BIAS
        self.writeReg(0x0C,0x0A,0x83) #UP SE0 res
        self.writeReg(0x0C,0x00,0x00) #UP HS SWING CAL OFF
        self.writeReg(0x0C,0x04,0x74) #UP SQL
        self.writeReg(0x0C,0x07,0x1A) #UP RX pre_amp, DIFF!
        self.writeReg(0x0C,0x02,0x67) #UP CDR BW MAX
        self.writeReg(0x0C,0x12,0x42) #sql_ref_sel
        self.writeReg(0x0C,0x14,0x0A) #UP CDR BW MAX

    def func_01_05_04_USB2v2_UP_ANA(self):
        print("Cfg func_01_05_04_USB2v2_UP_ANA...")
        self.writeReg(0x42,0x16,0x20) #disc mode sel
        self.writeReg(0x42,0x19,0x39) #utmi_en=1
        self.writeReg(0x42,0x1A,0x0C) #utmi_en=1
        self.writeReg(0x42,0x1B,0x00) #man=0
        self.writeReg(0x42,0x1C,0x00) #sql_sel=0
        self.writeReg(0x42,0x25,0x08) #clrcnt=08
        self.writeReg(0x42,0x26,0x08) #oneshot_acc=08
        self.writeReg(0x42,0x27,0x04) #date_buf=0
        self.writeReg(0x42,0x28,0x00) #qc3.0 clk_div=0
        self.writeReg(0x42,0x29,0x09) #dsel_mode=1 mvth=4
        self.writeReg(0x42,0x2A,0x04) #clr_mode=0 date_buf_sel=0
        self.writeReg(0x42,0x2B,0x50) #valid_drop_sel=2 calib_swing_int=16
        self.writeReg(0x42,0x2C,0x02) #swing_man=0 acc_valid=2
        self.writeReg(0x42,0x2D,0x08) #loopf_bw=08
        self.writeReg(0x42,0x08,0xF4) #Tx Swing bias ctrl, sql_ref=120m
        self.writeReg(0x42,0x10,0x63) #Tx Swing
        self.writeReg(0x42,0x04,0xCF) #disc ref 650mV, se_sql_ref>100m
        self.writeReg(0x42,0x07,0x9A) #rx half gain
        self.writeReg(0x42,0x05,0x0C) #0pole

    def func_01_05_07_USB2v2_DP3_ANA(self):
        print("Cfg func_01_05_07_USB2v2_DP3_ANA...")
        self.writeReg(0x45,0x16,0x20) #disc mode sel
        self.writeReg(0x45,0x19,0x39) #utmi_en=1
        self.writeReg(0x45,0x1A,0x0C) #utmi_en=1
        self.writeReg(0x45,0x1B,0x00) #man=0
        self.writeReg(0x45,0x1C,0x00) #sql_sel=0
        self.writeReg(0x45,0x25,0x08) #clrcnt=08
        self.writeReg(0x45,0x26,0x08) #oneshot_acc=08
        self.writeReg(0x45,0x27,0x04) #date_buf=0
        self.writeReg(0x45,0x28,0x00) #qc3.0 clk_div=0
        self.writeReg(0x45,0x29,0x09) #dsel_mode=1 mvth=4
        self.writeReg(0x45,0x2A,0x04) #clr_mode=0 date_buf_sel=0
        self.writeReg(0x45,0x2B,0x50) #valid_drop_sel=2 calib_swing_int=16
        self.writeReg(0x45,0x2C,0x02) #swing_man=0 acc_valid=2
        self.writeReg(0x45,0x2D,0x08) #loopf_bw=08
        self.writeReg(0x45,0x08,0xF4) #Tx Swing bias ctrl, sql_ref=120m
        self.writeReg(0x45,0x10,0x63) #Tx Swing
        self.writeReg(0x45,0x04,0xCF) #disc ref 650mV, se_sql_ref>100m
        self.writeReg(0x45,0x07,0x9A) #rx half gain
        self.writeReg(0x45,0x05,0x0C) #0pole

    def func_01_05_08_USB2v2_DP4_ANA(self):
        print("Cfg func_01_05_08_USB2v2_DP4_ANA...")
        self.writeReg(0x46,0x16,0x20) #disc mode sel
        self.writeReg(0x46,0x19,0x39) #utmi_en=1
        self.writeReg(0x46,0x1A,0x0C) #utmi_en=1
        self.writeReg(0x46,0x1B,0x00) #man=0
        self.writeReg(0x46,0x1C,0x00) #sql_sel=0
        self.writeReg(0x46,0x25,0x08) #clrcnt=08
        self.writeReg(0x46,0x26,0x08) #oneshot_acc=08
        self.writeReg(0x46,0x27,0x04) #date_buf=0
        self.writeReg(0x46,0x28,0x00) #qc3.0 clk_div=0
        self.writeReg(0x46,0x29,0x09) #dsel_mode=1 mvth=4
        self.writeReg(0x46,0x2A,0x04) #clr_mode=0 date_buf_sel=0
        self.writeReg(0x46,0x2B,0x50) #valid_drop_sel=2 calib_swing_int=16
        self.writeReg(0x46,0x2C,0x02) #swing_man=0 acc_valid=2
        self.writeReg(0x46,0x2D,0x08) #loopf_bw=08
        self.writeReg(0x46,0x08,0xF4) #Tx Swing bias ctrl, sql_ref=120m
        self.writeReg(0x46,0x10,0x63) #Tx Swing
        self.writeReg(0x46,0x04,0xCF) #disc ref 650mV, se_sql_ref>100m
        self.writeReg(0x46,0x07,0x9A) #rx half gain
        self.writeReg(0x46,0x05,0x0C) #0pole

    def func_01_05_09_USB2v2_MODE2(self):
        print("Cfg func_01_05_09_USB2v2_MODE2...")
        self.writeReg(0x42,0x29,0x0A) #dsel_mode=2
        self.writeReg(0x42,0x2A,0x0C) #date_buf_sel=12
        self.writeReg(0x47,0x6A,0x01) #utm_eop_cnt=1
        self.writeReg(0x45,0x29,0x0A) #dsel_mode=2
        self.writeReg(0x45,0x2A,0x0C) #date_buf_sel=12
        self.writeReg(0x4A,0x6A,0x01) #utm_eop_cnt=1
        self.writeReg(0x46,0x29,0x0A) #dsel_mode=2
        self.writeReg(0x46,0x2A,0x0C) #date_buf_sel=12
        self.writeReg(0x4B,0x6A,0x01) #utm_eop_cnt=1

    def func_01_05_10_USB2_Phy_ALL(self):
        print("Cfg func_01_05_10_USB2_Phy_ALL...")
        self.func_01_05_01_USB2v1_UP_ANA()
        self.func_01_05_02_USB2v1_DP1_ANA()
        self.func_01_05_03_USB2v1_DP2_ANA()
        self.func_01_05_04_USB2v2_UP_ANA()
        self.func_01_05_07_USB2v2_DP3_ANA()
        self.func_01_05_08_USB2v2_DP4_ANA()
        self.func_01_05_09_USB2v2_MODE2()

    def func_01_06_01_PIPE_ANA_UP(self):
        print("Cfg func_01_06_01_PIPE_ANA_UP...")
        self.writeReg(0x31,0x21,0x82) #RXDET wait time
        self.writeReg(0x31,0x22,0x00) #RXDET wait time
        self.writeReg(0x31,0x23,0x00) #
        self.writeReg(0x31,0x24,0xFF) #
        self.writeReg(0x31,0x25,0x3e) #
        self.writeReg(0x31,0x26,0x40) #rxdet clk is 10us/clk
        self.writeReg(0x31,0x27,0xc8) #lower rctime, ugreen ssd
        self.writeReg(0x31,0xF9,0x10) #LFPS BW=4
        self.writeReg(0x31,0xEE,0x0F) #LFPS fasel=3
        self.writeReg(0x31,0xEF,0x0C) #LFPS ref_ctrl=3
        self.writeReg(0x31,0xEB,0x02) #LFPS div4, 2.5G/4, short LFPS change to DIV8
        self.writeReg(0x31,0xe9,0x01) #sterm_override=1

    def func_01_06_02_PIPE_ANA_DP1(self):
        print("Cfg func_01_06_02_PIPE_ANA_DP1...")
        self.writeReg(0x32,0x21,0x82) #RXDET wait time
        self.writeReg(0x32,0x22,0x00) #RXDET wait time
        self.writeReg(0x32,0x23,0x00) #
        self.writeReg(0x32,0x24,0xFF) #
        self.writeReg(0x32,0x25,0x3e) #
        self.writeReg(0x32,0x26,0x40) #rxdet clk is 10us/clk
        self.writeReg(0x32,0x27,0xc8) #lower rctime, ugreen ssd
        self.writeReg(0x32,0xF9,0x10) #LFPS BW=4
        self.writeReg(0x32,0xEE,0x0F) #LFPS fasel=3
        self.writeReg(0x32,0xEF,0x0C) #LFPS ref_ctrl=3
        self.writeReg(0x32,0xEB,0x02) #LFPS div4, 2.5G/4, short LFPS change to DIV8
        self.writeReg(0x32,0xe9,0x01) #sterm_override=1

    def func_01_06_03_PIPE_ANA_DP2(self):
        print("Cfg func_01_06_03_PIPE_ANA_DP2...")
        self.writeReg(0x33,0x21,0x82) #RXDET wait time
        self.writeReg(0x33,0x22,0x00) #RXDET wait time
        self.writeReg(0x33,0x23,0x00) #
        self.writeReg(0x33,0x24,0xFF) #
        self.writeReg(0x33,0x25,0x3e) #
        self.writeReg(0x33,0x26,0x40) #rxdet clk is 10us/clk
        self.writeReg(0x33,0x27,0xc8) #lower rctime, ugreen ssd
        self.writeReg(0x33,0xF9,0x10) #LFPS BW=4
        self.writeReg(0x33,0xEE,0x0F) #LFPS fasel=3
        self.writeReg(0x33,0xEF,0x0C) #LFPS ref_ctrl=3
        self.writeReg(0x33,0xEB,0x02) #LFPS div4, 2.5G/4, short LFPS change to DIV8
        self.writeReg(0x33,0xe9,0x01) #sterm_override=1

    def func_01_06_04_PIPE_ANA_DP3(self):
        print("Cfg func_01_06_04_PIPE_ANA_DP3...")
        self.writeReg(0x34,0x21,0x82) #RXDET wait time
        self.writeReg(0x34,0x22,0x00) #RXDET wait time
        self.writeReg(0x34,0x23,0x00) #
        self.writeReg(0x34,0x24,0xFF) #
        self.writeReg(0x34,0x25,0x3e) #
        self.writeReg(0x34,0x26,0x40) #rxdet clk is 10us/clk
        self.writeReg(0x34,0x27,0xc8) #lower rctime, ugreen ssd
        self.writeReg(0x34,0xF9,0x10) #LFPS BW=4
        self.writeReg(0x34,0xEE,0x0F) #LFPS fasel=3
        self.writeReg(0x34,0xEF,0x0C) #LFPS ref_ctrl=3
        self.writeReg(0x34,0xEB,0x02) #LFPS div4, 2.5G/4, short LFPS change to DIV8
        self.writeReg(0x34,0xe9,0x01) #sterm_override=1

    def func_01_06_05_PIPE_ANA_DP4(self):
        print("Cfg func_01_06_05_PIPE_ANA_DP4...")
        self.writeReg(0x35,0x21,0x82) #RXDET wait time
        self.writeReg(0x35,0x22,0x00) #RXDET wait time
        self.writeReg(0x35,0x23,0x00) #
        self.writeReg(0x35,0x24,0xFF) #
        self.writeReg(0x35,0x25,0x3e) #
        self.writeReg(0x35,0x26,0x40) #rxdet clk is 10us/clk
        self.writeReg(0x35,0x27,0xc8) #lower rctime, ugreen ssd
        self.writeReg(0x35,0xF9,0x10) #LFPS BW=4
        self.writeReg(0x35,0xEE,0x0F) #LFPS fasel=3
        self.writeReg(0x35,0xEF,0x0C) #LFPS ref_ctrl=3
        self.writeReg(0x35,0xEB,0x02) #LFPS div4, 2.5G/4, short LFPS change to DIV8
        self.writeReg(0x35,0xe9,0x01) #sterm_override=1

    def func_01_06_06_ana_debug_dp3_symbol_lock_use_rext(self):
        print("Cfg func_01_06_06_ana_debug_dp3_symbol_lock_use_rext...")
        self.writeReg(0x09,0x83,0x06) #
        self.writeReg(0x09,0x83,0x06) #
        self.writeReg(0x09,0xc9,0x00) #
        self.writeReg(0x09,0xc9,0x00) #
        self.writeReg(0x09,0xca,0x00) #
        self.writeReg(0x09,0xca,0x00) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc7,0x00) #
        self.writeReg(0x09,0xc5,0x00) #
        self.writeReg(0x09,0xc5,0x00) #
        self.writeReg(0x09,0xc6,0x00) #
        self.writeReg(0x09,0xc6,0x00) #
        self.writeReg(0x31,0xe4,0xdb) #
        self.writeReg(0x31,0x18,0xdb) #
        self.writeReg(0x32,0xe4,0x5b) #
        self.writeReg(0x32,0x18,0x5b) #
        self.writeReg(0x33,0xe4,0x5b) #
        self.writeReg(0x33,0x18,0x5b) #
        self.writeReg(0x34,0xe4,0x5b) #
        self.writeReg(0x34,0x18,0x5b) #
        self.writeReg(0x35,0xe4,0x5b) #
        self.writeReg(0x35,0x18,0x5b) #
        self.writeReg(0x31,0xe4,0x37) #
        self.writeReg(0x31,0x18,0x37) #
        self.writeReg(0x34,0xe4,0x37) #
        self.writeReg(0x34,0x18,0x37) #

    def func_01_06_07_ana_debug_up_symbol_lock_use_rext(self):
        print("Cfg func_01_06_07_ana_debug_up_symbol_lock_use_rext...")
        self.writeReg(0x09,0x83,0x06) #
        self.writeReg(0x09,0x83,0x06) #
        self.writeReg(0x09,0xc9,0x00) #
        self.writeReg(0x09,0xc9,0x20) #
        self.writeReg(0x09,0xca,0x00) #
        self.writeReg(0x09,0xca,0x00) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc4,0x3f) #
        self.writeReg(0x09,0xc7,0x00) #
        self.writeReg(0x09,0xc5,0x00) #
        self.writeReg(0x09,0xc5,0x00) #
        self.writeReg(0x09,0xc6,0x00) #
        self.writeReg(0x09,0xc6,0x00) #
        self.writeReg(0x31,0xe4,0xdb) #
        self.writeReg(0x31,0x18,0xdb) #
        self.writeReg(0x32,0xe4,0x5b) #
        self.writeReg(0x32,0x18,0x5b) #
        self.writeReg(0x33,0xe4,0x5b) #
        self.writeReg(0x33,0x18,0x5b) #
        self.writeReg(0x34,0xe4,0x5b) #
        self.writeReg(0x34,0x18,0x5b) #
        self.writeReg(0x35,0xe4,0x5b) #
        self.writeReg(0x35,0x18,0x5b) #
        self.writeReg(0x31,0xe4,0x37) #
        self.writeReg(0x31,0x18,0x37) #
        self.writeReg(0x34,0xe4,0x37) #
        self.writeReg(0x34,0x18,0x37) #

    def func_01_06_10_PIPE_ANA_ALL(self):
        print("Cfg func_01_06_10_PIPE_ANA_ALL...")
        self.func_01_06_01_PIPE_ANA_UP()
        self.func_01_06_02_PIPE_ANA_DP1()
        self.func_01_06_03_PIPE_ANA_DP2()
        self.func_01_06_04_PIPE_ANA_DP3()
        self.func_01_06_05_PIPE_ANA_DP4()

    def func_01_07_01_USB3_UP_Rx_ANA(self):
        print("Cfg func_01_07_01_USB3_UP_Rx_ANA...")
        self.writeReg(0x10,0x01,0x04) #cdr ctrl,when after rstn,not skip
        self.writeReg(0x10,0x06,0x00) #d_e_check balance set0
        self.writeReg(0x10,0x09,0x0E) #cdr set seg mode
        self.writeReg(0x10,0x13,0x01) #h0 floor=1
        self.writeReg(0x10,0x3F,0x01) #cdr_resetb man=0
        self.writeReg(0x10,0x48,0x80) #man_en a0_t
        self.writeReg(0x10,0x4A,0x84) #stg2 zero=4
        self.writeReg(0x10,0x4B,0x80) #
        self.writeReg(0x10,0x4C,0x01) #
        self.writeReg(0x10,0x4D,0x80) #
        self.writeReg(0x10,0x4E,0x82) #
        self.writeReg(0x10,0x4F,0x83) #
        self.writeReg(0x10,0x54,0x04) #vga_cm=4
        self.writeReg(0x10,0x55,0x07) #ipoly=7
        self.writeReg(0x10,0x56,0x00) #iptat=0
        self.writeReg(0x10,0x58,0x00) #rxtermsel=0, man
        self.writeReg(0x10,0x59,0x04) #pi_adj=100, 100uA
        self.writeReg(0x10,0x5B,0x11) #meh settle use i2c
        self.writeReg(0x10,0x60,0x00) #meh set 5000
        self.writeReg(0x10,0x61,0x13) #meh set 5000
        self.writeReg(0x10,0x62,0x88) #meh set 5000
        self.writeReg(0x10,0x63,0x03) #
        self.writeReg(0x10,0x64,0xD0) #
        self.writeReg(0x10,0x65,0x90) #
        self.writeReg(0x10,0x99,0x30) #dfe tap init reset=0, pi64
        self.writeReg(0x10,0x9B,0x18) #DFE enable
        self.writeReg(0x10,0x9D,0x00) #
        self.writeReg(0x10,0x9E,0x00) #
        self.writeReg(0x10,0xA0,0x00) #loopen all 0
        self.writeReg(0x10,0xA1,0x00) #loopen all 0
        self.writeReg(0x10,0xA2,0x00) #loopen all 0
        self.writeReg(0x10,0xA3,0x00) #loopen all 0
        self.writeReg(0x10,0xA4,0x00) #loopen all 0
        self.writeReg(0x10,0xA5,0x00) #loopen all 0
        self.writeReg(0x10,0xA6,0x00) #loopen all 0
        self.writeReg(0x10,0xBA,0x3C) #tap2-5 rst
        self.writeReg(0x10,0xC6,0xFD) #min=253
        self.writeReg(0x10,0xC7,0x0A) #max=10
        self.writeReg(0x10,0xE0,0x07) #en=1
        self.writeReg(0x10,0xE1,0x46) #SSC
        self.writeReg(0x10,0xE2,0x00) #
        self.writeReg(0x10,0xE3,0x02) #cdr reset midway=00, midway sel=0
        self.writeReg(0x10,0xEA,0x54) #
        self.writeReg(0x10,0xEB,0x4C) #
        self.writeReg(0x10,0xEC,0x4D) #prevga=4
        self.writeReg(0x10,0xED,0x04) #postvga=4
        self.writeReg(0x10,0xEE,0x30) #pole_cap=3
        self.writeReg(0x10,0xEF,0x00) #pole_cur_old=0, temp8
        self.writeReg(0x10,0xF2,0x00) #spare1_0=0, SEL A, DFEclk use anareset

    def func_01_07_02_USB3_DP1_Rx_ANA(self):
        print("Cfg func_01_07_02_USB3_DP1_Rx_ANA...")
        self.writeReg(0x11,0x01,0x04) #cdr ctrl,when after rstn,not skip
        self.writeReg(0x11,0x06,0x00) #d_e_check balance set0
        self.writeReg(0x11,0x09,0x0E) #cdr set seg mode
        self.writeReg(0x11,0x13,0x01) #h0 floor=1
        self.writeReg(0x11,0x3F,0x01) #cdr_resetb man=0
        self.writeReg(0x11,0x48,0x80) #man_en a0_t
        self.writeReg(0x11,0x4A,0x84) #stg2 zero=4
        self.writeReg(0x11,0x4B,0x80) #
        self.writeReg(0x11,0x4C,0x01) #
        self.writeReg(0x11,0x4D,0x80) #
        self.writeReg(0x11,0x4E,0x82) #
        self.writeReg(0x11,0x4F,0x83) #
        self.writeReg(0x11,0x54,0x04) #vga_cm=4
        self.writeReg(0x11,0x55,0x07) #ipoly=7
        self.writeReg(0x11,0x56,0x00) #iptat=0
        self.writeReg(0x11,0x58,0x00) #rxtermsel=0, man
        self.writeReg(0x11,0x59,0x04) #pi_adj=100, 100uA
        self.writeReg(0x11,0x5B,0x11) #meh settle use i2c
        self.writeReg(0x11,0x60,0x00) #meh set 5000
        self.writeReg(0x11,0x61,0x13) #meh set 5000
        self.writeReg(0x11,0x62,0x88) #meh set 5000
        self.writeReg(0x11,0x63,0x03) #
        self.writeReg(0x11,0x64,0xD0) #
        self.writeReg(0x11,0x65,0x90) #
        self.writeReg(0x11,0x99,0x30) #dfe tap init reset=0, pi64
        self.writeReg(0x11,0x9B,0x18) #DFE enable
        self.writeReg(0x11,0x9D,0x00) #
        self.writeReg(0x11,0x9E,0x00) #
        self.writeReg(0x11,0xA0,0x00) #loopen all 0
        self.writeReg(0x11,0xA1,0x00) #loopen all 0
        self.writeReg(0x11,0xA2,0x00) #loopen all 0
        self.writeReg(0x11,0xA3,0x00) #loopen all 0
        self.writeReg(0x11,0xA4,0x00) #loopen all 0
        self.writeReg(0x11,0xA5,0x00) #loopen all 0
        self.writeReg(0x11,0xA6,0x00) #loopen all 0
        self.writeReg(0x11,0xBA,0x3C) #tap2-5 rst
        self.writeReg(0x11,0xC6,0xFD) #min=253
        self.writeReg(0x11,0xC7,0x0A) #max=10
        self.writeReg(0x11,0xE0,0x07) #en=1
        self.writeReg(0x11,0xE1,0x46) #SSC
        self.writeReg(0x11,0xE2,0x00) #
        self.writeReg(0x11,0xE3,0x02) #cdr reset midway=00, midway sel=0
        self.writeReg(0x11,0xEA,0x54) #
        self.writeReg(0x11,0xEB,0x4C) #
        self.writeReg(0x11,0xEC,0x4D) #prevga=4
        self.writeReg(0x11,0xED,0x04) #postvga=4
        self.writeReg(0x11,0xEE,0x30) #pole_cap=3
        self.writeReg(0x11,0xEF,0x00) #pole_cur_old=0, temp8
        self.writeReg(0x11,0xF2,0x00) #spare1_0=0, SEL A, DFEclk use anareset

    def func_01_07_03_USB3_DP2_Rx_ANA(self):
        print("Cfg func_01_07_03_USB3_DP2_Rx_ANA...")
        self.writeReg(0x12,0x01,0x04) #cdr ctrl,when after rstn,not skip
        self.writeReg(0x12,0x06,0x00) #d_e_check balance set0
        self.writeReg(0x12,0x09,0x0E) #cdr set seg mode
        self.writeReg(0x12,0x13,0x01) #h0 floor=1
        self.writeReg(0x12,0x3F,0x01) #cdr_resetb man=0
        self.writeReg(0x12,0x48,0x80) #man_en a0_t
        self.writeReg(0x12,0x4A,0x84) #stg2 zero=4
        self.writeReg(0x12,0x4B,0x80) #
        self.writeReg(0x12,0x4C,0x01) #
        self.writeReg(0x12,0x4D,0x80) #
        self.writeReg(0x12,0x4E,0x82) #
        self.writeReg(0x12,0x4F,0x83) #
        self.writeReg(0x12,0x54,0x04) #vga_cm=4
        self.writeReg(0x12,0x55,0x07) #ipoly=7
        self.writeReg(0x12,0x56,0x00) #iptat=0
        self.writeReg(0x12,0x58,0x00) #rxtermsel=0, man
        self.writeReg(0x12,0x59,0x04) #pi_adj=100, 100uA
        self.writeReg(0x12,0x5B,0x11) #meh settle use i2c
        self.writeReg(0x12,0x60,0x00) #meh set 5000
        self.writeReg(0x12,0x61,0x13) #meh set 5000
        self.writeReg(0x12,0x62,0x88) #meh set 5000
        self.writeReg(0x12,0x63,0x03) #
        self.writeReg(0x12,0x64,0xD0) #
        self.writeReg(0x12,0x65,0x90) #
        self.writeReg(0x12,0x99,0x30) #dfe tap init reset=0, pi64
        self.writeReg(0x12,0x9B,0x18) #DFE enable
        self.writeReg(0x12,0x9D,0x00) #
        self.writeReg(0x12,0x9E,0x00) #
        self.writeReg(0x12,0xA0,0x00) #loopen all 0
        self.writeReg(0x12,0xA1,0x00) #loopen all 0
        self.writeReg(0x12,0xA2,0x00) #loopen all 0
        self.writeReg(0x12,0xA3,0x00) #loopen all 0
        self.writeReg(0x12,0xA4,0x00) #loopen all 0
        self.writeReg(0x12,0xA5,0x00) #loopen all 0
        self.writeReg(0x12,0xA6,0x00) #loopen all 0
        self.writeReg(0x12,0xBA,0x3C) #tap2-5 rst
        self.writeReg(0x12,0xC6,0xFD) #min=253
        self.writeReg(0x12,0xC7,0x0A) #max=10
        self.writeReg(0x12,0xE0,0x07) #en=1
        self.writeReg(0x12,0xE1,0x46) #SSC
        self.writeReg(0x12,0xE2,0x00) #
        self.writeReg(0x12,0xE3,0x02) #cdr reset midway=00, midway sel=0
        self.writeReg(0x12,0xEA,0x54) #
        self.writeReg(0x12,0xEB,0x4C) #
        self.writeReg(0x12,0xEC,0x4D) #prevga=4
        self.writeReg(0x12,0xED,0x04) #postvga=4
        self.writeReg(0x12,0xEE,0x30) #pole_cap=3
        self.writeReg(0x12,0xEF,0x00) #pole_cur_old=0, temp8
        self.writeReg(0x12,0xF2,0x00) #spare1_0=0, SEL A, DFEclk use anareset

    def func_01_07_04_USB3_DP3_Rx_ANA(self):
        print("Cfg func_01_07_04_USB3_DP3_Rx_ANA...")
        self.writeReg(0x13,0x01,0x04) #cdr ctrl,when after rstn,not skip
        self.writeReg(0x13,0x06,0x00) #d_e_check balance set0
        self.writeReg(0x13,0x09,0x0E) #cdr set seg mode
        self.writeReg(0x13,0x13,0x01) #h0 floor=1
        self.writeReg(0x13,0x3F,0x01) #cdr_resetb man=0
        self.writeReg(0x13,0x48,0x80) #man_en a0_t
        self.writeReg(0x13,0x4A,0x84) #stg2 zero=4
        self.writeReg(0x13,0x4B,0x80) #
        self.writeReg(0x13,0x4C,0x01) #
        self.writeReg(0x13,0x4D,0x80) #
        self.writeReg(0x13,0x4E,0x82) #
        self.writeReg(0x13,0x4F,0x83) #
        self.writeReg(0x13,0x54,0x04) #vga_cm=4
        self.writeReg(0x13,0x55,0x07) #ipoly=7
        self.writeReg(0x13,0x56,0x00) #iptat=0
        self.writeReg(0x13,0x58,0x00) #rxtermsel=0, man
        self.writeReg(0x13,0x59,0x04) #pi_adj=100, 100uA
        self.writeReg(0x13,0x5B,0x11) #meh settle use i2c
        self.writeReg(0x13,0x60,0x00) #meh set 5000
        self.writeReg(0x13,0x61,0x13) #meh set 5000
        self.writeReg(0x13,0x62,0x88) #meh set 5000
        self.writeReg(0x13,0x63,0x03) #
        self.writeReg(0x13,0x64,0xD0) #
        self.writeReg(0x13,0x65,0x90) #
        self.writeReg(0x13,0x99,0x30) #dfe tap init reset=0, pi64
        self.writeReg(0x13,0x9B,0x18) #DFE enable
        self.writeReg(0x13,0x9D,0x00) #
        self.writeReg(0x13,0x9E,0x00) #
        self.writeReg(0x13,0xA0,0x00) #loopen all 0
        self.writeReg(0x13,0xA1,0x00) #loopen all 0
        self.writeReg(0x13,0xA2,0x00) #loopen all 0
        self.writeReg(0x13,0xA3,0x00) #loopen all 0
        self.writeReg(0x13,0xA4,0x00) #loopen all 0
        self.writeReg(0x13,0xA5,0x00) #loopen all 0
        self.writeReg(0x13,0xA6,0x00) #loopen all 0
        self.writeReg(0x13,0xBA,0x3C) #tap2-5 rst
        self.writeReg(0x13,0xC6,0xFD) #min=253
        self.writeReg(0x13,0xC7,0x0A) #max=10
        self.writeReg(0x13,0xE0,0x07) #en=1
        self.writeReg(0x13,0xE1,0x46) #SSC
        self.writeReg(0x13,0xE2,0x00) #
        self.writeReg(0x13,0xE3,0x02) #cdr reset midway=00, midway sel=0
        self.writeReg(0x13,0xEA,0x54) #
        self.writeReg(0x13,0xEB,0x4C) #
        self.writeReg(0x13,0xEC,0x4D) #prevga=4
        self.writeReg(0x13,0xED,0x04) #postvga=4
        self.writeReg(0x13,0xEE,0x30) #pole_cap=3
        self.writeReg(0x13,0xEF,0x00) #pole_cur_old=0, temp8
        self.writeReg(0x13,0xF2,0x00) #spare1_0=0, SEL A, DFEclk use anareset

    def func_01_07_05_USB3_DP4_Rx_ANA(self):
        print("Cfg func_01_07_05_USB3_DP4_Rx_ANA...")
        self.writeReg(0x14,0x01,0x04) #cdr ctrl,when after rstn,not skip
        self.writeReg(0x14,0x06,0x00) #d_e_check balance set0
        self.writeReg(0x14,0x09,0x0E) #cdr set seg mode
        self.writeReg(0x14,0x13,0x01) #h0 floor=1
        self.writeReg(0x14,0x3F,0x01) #cdr_resetb man=0
        self.writeReg(0x14,0x48,0x80) #man_en a0_t
        self.writeReg(0x14,0x4A,0x84) #stg2 zero=4
        self.writeReg(0x14,0x4B,0x80) #
        self.writeReg(0x14,0x4C,0x01) #
        self.writeReg(0x14,0x4D,0x80) #
        self.writeReg(0x14,0x4E,0x82) #
        self.writeReg(0x14,0x4F,0x83) #
        self.writeReg(0x14,0x54,0x04) #vga_cm=4
        self.writeReg(0x14,0x55,0x07) #ipoly=7
        self.writeReg(0x14,0x56,0x00) #iptat=0
        self.writeReg(0x14,0x58,0x00) #rxtermsel=0, man
        self.writeReg(0x14,0x59,0x04) #pi_adj=100, 100uA
        self.writeReg(0x14,0x5B,0x11) #meh settle use i2c
        self.writeReg(0x14,0x60,0x00) #meh set 5000
        self.writeReg(0x14,0x61,0x13) #meh set 5000
        self.writeReg(0x14,0x62,0x88) #meh set 5000
        self.writeReg(0x14,0x63,0x03) #
        self.writeReg(0x14,0x64,0xD0) #
        self.writeReg(0x14,0x65,0x90) #
        self.writeReg(0x14,0x99,0x30) #dfe tap init reset=0, pi64
        self.writeReg(0x14,0x9B,0x18) #DFE enable
        self.writeReg(0x14,0x9D,0x00) #
        self.writeReg(0x14,0x9E,0x00) #
        self.writeReg(0x14,0xA0,0x00) #loopen all 0
        self.writeReg(0x14,0xA1,0x00) #loopen all 0
        self.writeReg(0x14,0xA2,0x00) #loopen all 0
        self.writeReg(0x14,0xA3,0x00) #loopen all 0
        self.writeReg(0x14,0xA4,0x00) #loopen all 0
        self.writeReg(0x14,0xA5,0x00) #loopen all 0
        self.writeReg(0x14,0xA6,0x00) #loopen all 0
        self.writeReg(0x14,0xBA,0x3C) #tap2-5 rst
        self.writeReg(0x14,0xC6,0xFD) #min=253
        self.writeReg(0x14,0xC7,0x0A) #max=10
        self.writeReg(0x14,0xE0,0x07) #en=1
        self.writeReg(0x14,0xE1,0x46) #SSC
        self.writeReg(0x14,0xE2,0x00) #
        self.writeReg(0x14,0xE3,0x02) #cdr reset midway=00, midway sel=0
        self.writeReg(0x14,0xEA,0x54) #
        self.writeReg(0x14,0xEB,0x4C) #
        self.writeReg(0x14,0xEC,0x4D) #prevga=4
        self.writeReg(0x14,0xED,0x04) #postvga=4
        self.writeReg(0x14,0xEE,0x30) #pole_cap=3
        self.writeReg(0x14,0xEF,0x00) #pole_cur_old=0, temp8
        self.writeReg(0x14,0xF2,0x00) #spare1_0=0, SEL A, DFEclk use anareset

    def func_01_07_10_USB3_Rx_ANA_ALL(self):
        print("Cfg func_01_07_10_USB3_Rx_ANA_ALL...")
        self.func_01_07_01_USB3_UP_Rx_ANA()
        self.func_01_07_02_USB3_DP1_Rx_ANA()
        self.func_01_07_03_USB3_DP2_Rx_ANA()
        self.func_01_07_04_USB3_DP3_Rx_ANA()
        self.func_01_07_05_USB3_DP4_Rx_ANA()

    def func_01_08_01_USB3_UP_Tx_ANA(self):
        print("Cfg func_01_08_01_USB3_UP_Tx_ANA...")
        self.writeReg(0x31,0x3a,0x7d) #
        self.writeReg(0x31,0x3a,0x7b) #
        self.writeReg(0x31,0x3b,0xe9) #
        self.writeReg(0x31,0x3b,0xdf) #
        self.writeReg(0x31,0x3b,0xde) #
        self.writeReg(0x31,0x3c,0xfa) #
        self.writeReg(0x31,0x3c,0xf7) #
        self.writeReg(0x31,0x3d,0xd2) #
        self.writeReg(0x31,0x3d,0xbe) #
        self.writeReg(0x31,0x3d,0xbd) #
        self.writeReg(0x31,0x3e,0xf4) #
        self.writeReg(0x31,0x3e,0xef) #
        self.writeReg(0x31,0x3f,0x7d) #
        self.writeReg(0x31,0x3f,0x7b) #
        self.writeReg(0x31,0x40,0xe9) #
        self.writeReg(0x31,0x40,0xdf) #
        self.writeReg(0x31,0x40,0xde) #
        self.writeReg(0x31,0x41,0xf0) #
        self.writeReg(0x31,0xf0,0x10) #
        self.writeReg(0x31,0xea,0xc0) #
        self.writeReg(0x31,0xf6,0x1e) #
        self.writeReg(0x31,0xf7,0x00) #
        self.writeReg(0x31,0xed,0x1f) #
        self.writeReg(0x31,0xee,0xf3) #

    def func_01_08_02_USB3_DP1_Tx_ANA(self):
        print("Cfg func_01_08_02_USB3_DP1_Tx_ANA...")
        self.writeReg(0x32,0x3a,0x7d) #
        self.writeReg(0x32,0x3a,0x7b) #
        self.writeReg(0x32,0x3b,0xe9) #
        self.writeReg(0x32,0x3b,0xdf) #
        self.writeReg(0x32,0x3b,0xde) #
        self.writeReg(0x32,0x3c,0xfa) #
        self.writeReg(0x32,0x3c,0xf7) #
        self.writeReg(0x32,0x3d,0xd2) #
        self.writeReg(0x32,0x3d,0xbe) #
        self.writeReg(0x32,0x3d,0xbd) #
        self.writeReg(0x32,0x3e,0xf4) #
        self.writeReg(0x32,0x3e,0xef) #
        self.writeReg(0x32,0x3f,0x7d) #
        self.writeReg(0x32,0x3f,0x7b) #
        self.writeReg(0x32,0x40,0xe9) #
        self.writeReg(0x32,0x40,0xdf) #
        self.writeReg(0x32,0x40,0xde) #
        self.writeReg(0x32,0x41,0xf0) #
        self.writeReg(0x32,0xf0,0x10) #
        self.writeReg(0x32,0xea,0xc0) #
        self.writeReg(0x32,0xf6,0x1e) #
        self.writeReg(0x32,0xf7,0x00) #
        self.writeReg(0x32,0xed,0x1f) #
        self.writeReg(0x32,0xee,0xf3) #

    def func_01_08_03_USB3_DP2_Tx_ANA(self):
        print("Cfg func_01_08_03_USB3_DP2_Tx_ANA...")
        self.writeReg(0x33,0x3a,0x7d) #
        self.writeReg(0x33,0x3a,0x7b) #
        self.writeReg(0x33,0x3b,0xe9) #
        self.writeReg(0x33,0x3b,0xdf) #
        self.writeReg(0x33,0x3b,0xde) #
        self.writeReg(0x33,0x3c,0xfa) #
        self.writeReg(0x33,0x3c,0xf7) #
        self.writeReg(0x33,0x3d,0xd2) #
        self.writeReg(0x33,0x3d,0xbe) #
        self.writeReg(0x33,0x3d,0xbd) #
        self.writeReg(0x33,0x3e,0xf4) #
        self.writeReg(0x33,0x3e,0xef) #
        self.writeReg(0x33,0x3f,0x7d) #
        self.writeReg(0x33,0x3f,0x7b) #
        self.writeReg(0x33,0x40,0xe9) #
        self.writeReg(0x33,0x40,0xdf) #
        self.writeReg(0x33,0x40,0xde) #
        self.writeReg(0x33,0x41,0xf0) #
        self.writeReg(0x33,0xf0,0x10) #
        self.writeReg(0x33,0xea,0xc0) #
        self.writeReg(0x33,0xf6,0x1e) #
        self.writeReg(0x33,0xf7,0x00) #
        self.writeReg(0x33,0xed,0x1f) #
        self.writeReg(0x33,0xee,0xf3) #

    def func_01_08_04_USB3_DP3_Tx_ANA(self):
        print("Cfg func_01_08_04_USB3_DP3_Tx_ANA...")
        self.writeReg(0x34,0x3a,0x7d) #
        self.writeReg(0x34,0x3a,0x7b) #
        self.writeReg(0x34,0x3b,0xe9) #
        self.writeReg(0x34,0x3b,0xdf) #
        self.writeReg(0x34,0x3b,0xde) #
        self.writeReg(0x34,0x3c,0xfa) #
        self.writeReg(0x34,0x3c,0xf7) #
        self.writeReg(0x34,0x3d,0xd2) #
        self.writeReg(0x34,0x3d,0xbe) #
        self.writeReg(0x34,0x3d,0xbd) #
        self.writeReg(0x34,0x3e,0xf4) #
        self.writeReg(0x34,0x3e,0xef) #
        self.writeReg(0x34,0x3f,0x7d) #
        self.writeReg(0x34,0x3f,0x7b) #
        self.writeReg(0x34,0x40,0xe9) #
        self.writeReg(0x34,0x40,0xdf) #
        self.writeReg(0x34,0x40,0xde) #
        self.writeReg(0x34,0x41,0xf0) #
        self.writeReg(0x34,0xf0,0x10) #
        self.writeReg(0x34,0xea,0xc0) #
        self.writeReg(0x34,0xf6,0x1e) #
        self.writeReg(0x34,0xf7,0x00) #
        self.writeReg(0x34,0xed,0x1f) #
        self.writeReg(0x34,0xee,0xf3) #

    def func_01_08_05_USB3_DP4_Tx_ANA(self):
        print("Cfg func_01_08_05_USB3_DP4_Tx_ANA...")
        self.writeReg(0x35,0x3a,0x7d) #
        self.writeReg(0x35,0x3a,0x7b) #
        self.writeReg(0x35,0x3b,0xe9) #
        self.writeReg(0x35,0x3b,0xdf) #
        self.writeReg(0x35,0x3b,0xde) #
        self.writeReg(0x35,0x3c,0xfa) #
        self.writeReg(0x35,0x3c,0xf7) #
        self.writeReg(0x35,0x3d,0xd2) #
        self.writeReg(0x35,0x3d,0xbe) #
        self.writeReg(0x35,0x3d,0xbd) #
        self.writeReg(0x35,0x3e,0xf4) #
        self.writeReg(0x35,0x3e,0xef) #
        self.writeReg(0x35,0x3f,0x7d) #
        self.writeReg(0x35,0x3f,0x7b) #
        self.writeReg(0x35,0x40,0xe9) #
        self.writeReg(0x35,0x40,0xdf) #
        self.writeReg(0x35,0x40,0xde) #
        self.writeReg(0x35,0x41,0xf0) #
        self.writeReg(0x35,0xf0,0x10) #
        self.writeReg(0x35,0xea,0xc0) #
        self.writeReg(0x35,0xf6,0x1e) #
        self.writeReg(0x35,0xf7,0x00) #
        self.writeReg(0x35,0xed,0x1f) #
        self.writeReg(0x35,0xee,0xf3) #

    def func_01_08_10_USB3_Tx_ANA_ALL(self):
        print("Cfg func_01_08_10_USB3_Tx_ANA_ALL...")
        self.func_01_08_01_USB3_UP_Tx_ANA()
        self.func_01_08_02_USB3_DP1_Tx_ANA()
        self.func_01_08_03_USB3_DP2_Tx_ANA()
        self.func_01_08_04_USB3_DP3_Tx_ANA()
        self.func_01_08_05_USB3_DP4_Tx_ANA()

    def func_01_10_USB_PHY_ALL(self):
        print("Cfg func_01_10_USB_PHY_ALL...")
        self.func_01_01_03_ADC_test()
        self.func_01_05_10_USB2_Phy_ALL()
        self.func_01_06_10_PIPE_ANA_ALL()
        self.func_01_07_10_USB3_Rx_ANA_ALL()
        self.func_01_08_10_USB3_Tx_ANA_ALL()

    def func_02_01_HS_tx_UP_V1_PRBS(self):
        print("Cfg func_02_01_HS_tx_UP_V1_PRBS...")
        self.writeReg(0x21,0x20,0x82) #i2c_utm_man_en
        self.writeReg(0x21,0x31,0x00) #i2c_prbs_tx_wr_num 512
        self.writeReg(0x21,0x32,0x02) #i2c_prbs_tx_wr_num
        self.writeReg(0x21,0x33,0xD0) #i2c_prbs_tx_period_num  2000
        self.writeReg(0x21,0x34,0x07) #i2c_prbs_tx_period_num
        self.writeReg(0x21,0x30,0x03) #prbs_gen_enable & prbs_gen_preset_en

    def func_02_01_HS_tx_UP_V2_PRBS(self):
        print("Cfg func_02_01_HS_tx_UP_V2_PRBS...")
        self.writeReg(0x09,0xc8,0x08) #i2c_utmi_port0_sel
        self.writeReg(0x47,0x20,0x82) #i2c_utm_man_en
        self.writeReg(0x47,0x31,0x00) #i2c_prbs_tx_wr_num 512
        self.writeReg(0x47,0x32,0x02) #i2c_prbs_tx_wr_num
        self.writeReg(0x47,0x33,0xD0) #i2c_prbs_tx_period_num  2000
        self.writeReg(0x47,0x34,0x07) #i2c_prbs_tx_period_num
        self.writeReg(0x47,0x30,0x03) #prbs_gen_enable & prbs_gen_preset_en

    def func_02_02_HS_tx_DP1_PRBS(self):
        print("Cfg func_02_02_HS_tx_DP1_PRBS...")
        self.writeReg(0x22,0x20,0x82) #i2c_utm_man_en
        self.writeReg(0x22,0x31,0x00) #i2c_prbs_tx_wr_num 512
        self.writeReg(0x22,0x32,0x02) #i2c_prbs_tx_wr_num
        self.writeReg(0x22,0x33,0xD0) #i2c_prbs_tx_period_num  2000
        self.writeReg(0x22,0x34,0x07) #i2c_prbs_tx_period_num
        self.writeReg(0x22,0x30,0x03) #prbs_gen_enable & prbs_gen_preset_en

    def func_02_03_HS_tx_DP2_PRBS(self):
        print("Cfg func_02_03_HS_tx_DP2_PRBS...")
        self.writeReg(0x23,0x20,0x82) #i2c_utm_man_en
        self.writeReg(0x23,0x31,0x00) #i2c_prbs_tx_wr_num 512
        self.writeReg(0x23,0x32,0x02) #i2c_prbs_tx_wr_num
        self.writeReg(0x23,0x33,0xD0) #i2c_prbs_tx_period_num  2000
        self.writeReg(0x23,0x34,0x07) #i2c_prbs_tx_period_num
        self.writeReg(0x23,0x30,0x03) #prbs_gen_enable & prbs_gen_preset_en

    def func_02_04_HS_tx_DP3_V2_PRBS(self):
        print("Cfg func_02_04_HS_tx_DP3_V2_PRBS...")
        self.writeReg(0x4a,0x20,0x82) #i2c_utm_man_en
        self.writeReg(0x4a,0x31,0x00) #i2c_prbs_tx_wr_num 512
        self.writeReg(0x4a,0x32,0x02) #i2c_prbs_tx_wr_num
        self.writeReg(0x4a,0x33,0xD0) #i2c_prbs_tx_period_num  2000
        self.writeReg(0x4a,0x34,0x07) #i2c_prbs_tx_period_num
        self.writeReg(0x4a,0x30,0x03) #prbs_gen_enable & prbs_gen_preset_en

    def func_02_05_HS_tx_DP4_V2_PRBS(self):
        print("Cfg func_02_05_HS_tx_DP4_V2_PRBS...")
        self.writeReg(0x4b,0x20,0x82) #i2c_utm_man_en
        self.writeReg(0x4b,0x31,0x00) #i2c_prbs_tx_wr_num 512
        self.writeReg(0x4b,0x32,0x02) #i2c_prbs_tx_wr_num
        self.writeReg(0x4b,0x33,0xD0) #i2c_prbs_tx_period_num  2000
        self.writeReg(0x4b,0x34,0x07) #i2c_prbs_tx_period_num
        self.writeReg(0x4b,0x30,0x03) #prbs_gen_enable & prbs_gen_preset_en

    def func_02_06_HS_rx_UP_V1_PRBS(self):
        print("Cfg func_02_06_HS_rx_UP_V1_PRBS...")
        self.writeReg(0x21,0x20,0x83) #i2c_utm_man_en
        self.writeReg(0x21,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x21,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_06_HS_rx_UP_V2_PRBS(self):
        print("Cfg func_02_06_HS_rx_UP_V2_PRBS...")
        self.writeReg(0x09,0xc8,0x08) #i2c_utmi_port0_sel
        self.writeReg(0x47,0x20,0x83) #i2c_utm_man_en
        self.writeReg(0x47,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x47,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_07_HS_rx_DP1_PRBS(self):
        print("Cfg func_02_07_HS_rx_DP1_PRBS...")
        self.writeReg(0x22,0x20,0x83) #i2c_utm_man_en
        self.writeReg(0x22,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x22,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_08_HS_rx_DP2_PRBS(self):
        print("Cfg func_02_08_HS_rx_DP2_PRBS...")
        self.writeReg(0x23,0x20,0x83) #i2c_utm_man_en
        self.writeReg(0x23,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x23,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_09_HS_rx_DP3_V2_PRBS(self):
        print("Cfg func_02_09_HS_rx_DP3_V2_PRBS...")
        self.writeReg(0x4a,0x20,0x83) #i2c_utm_man_en
        self.writeReg(0x4a,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x4a,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_10_HS_rx_DP4_V2_PRBS(self):
        print("Cfg func_02_10_HS_rx_DP4_V2_PRBS...")
        self.writeReg(0x4b,0x20,0x83) #i2c_utm_man_en
        self.writeReg(0x4b,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x4b,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_11_FS_tx_DP1_PRBS(self):
        print("Cfg func_02_11_FS_tx_DP1_PRBS...")
        self.writeReg(0x22,0x20,0xC6) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x22,0x21,0x13) #i2c_dm_pd & i2c_dp_pd & i2c_fslsserialmode
        self.writeReg(0x22,0x40,0x03) #i2c_fs_prbs_en
        self.writeReg(0x22,0x31,0x00) #i2c_prbs_tx_wr_num 512
        self.writeReg(0x22,0x32,0x02) #i2c_prbs_tx_wr_num
        self.writeReg(0x22,0x33,0x30) #i2c_prbs_tx_period_num  30000
        self.writeReg(0x22,0x34,0x75) #i2c_prbs_tx_period_num
        self.writeReg(0x22,0x30,0x03) #prbs_gen_enable & prbs_gen_preset_en

    def func_02_12_FS_rx_UP_V1_PRBS(self):
        print("Cfg func_02_12_FS_rx_UP_V1_PRBS...")
        self.writeReg(0x21,0x20,0xC7) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x21,0x21,0x61) #i2c_dm_pd & i2c_dp_pd & i2c_fslsserialmode
        self.writeReg(0x21,0x40,0x03) #i2c_fs_prbs_en
        self.writeReg(0x21,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x21,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_12_FS_rx_UP_V2_PRBS(self):
        print("Cfg func_02_12_FS_rx_UP_V2_PRBS...")
        self.writeReg(0x09,0xc8,0x08) #i2c_utmi_port0_sel
        self.writeReg(0x47,0x20,0xC7) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x47,0x21,0x61) #i2c_dm_pd & i2c_dp_pd & i2c_fslsserialmode
        self.writeReg(0x47,0x40,0x03) #i2c_fs_prbs_en
        self.writeReg(0x47,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x47,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_13_FS_rx_DP1_PRBS(self):
        print("Cfg func_02_13_FS_rx_DP1_PRBS...")
        self.writeReg(0x22,0x20,0xC7) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x22,0x21,0x61) #i2c_dm_pd & i2c_dp_pd & i2c_fslsserialmode
        self.writeReg(0x22,0x40,0x03) #i2c_fs_prbs_en
        self.writeReg(0x22,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x22,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_14_FS_rx_DP2_PRBS(self):
        print("Cfg func_02_14_FS_rx_DP2_PRBS...")
        self.writeReg(0x23,0x20,0xC7) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x23,0x21,0x61) #i2c_dm_pd & i2c_dp_pd & i2c_fslsserialmode
        self.writeReg(0x23,0x40,0x03) #i2c_fs_prbs_en
        self.writeReg(0x23,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x23,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_15_FS_rx_DP3_V2_PRBS(self):
        print("Cfg func_02_15_FS_rx_DP3_V2_PRBS...")
        self.writeReg(0x4a,0x20,0xC7) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x4a,0x21,0x61) #i2c_dm_pd & i2c_dp_pd & i2c_fslsserialmode
        self.writeReg(0x4a,0x40,0x03) #i2c_fs_prbs_en
        self.writeReg(0x4a,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x4a,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_16_FS_rx_DP4_V2_PRBS(self):
        print("Cfg func_02_16_FS_rx_DP4_V2_PRBS...")
        self.writeReg(0x4b,0x20,0xC7) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x4b,0x21,0x61) #i2c_dm_pd & i2c_dp_pd & i2c_fslsserialmode
        self.writeReg(0x4b,0x40,0x03) #i2c_fs_prbs_en
        self.writeReg(0x4b,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x4b,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_17_LS_tx_DP1_PRBS(self):
        print("Cfg func_02_17_LS_tx_DP1_PRBS...")
        self.writeReg(0x22,0x20,0xCA) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x22,0x21,0x13) #i2c_dm_pd & i2c_dp_pd & i2c_fslsserialmode
        self.writeReg(0x22,0x40,0x01) #i2c_fsls_speed & i2c_fs_prbs_en
        self.writeReg(0x22,0x31,0x08) #i2c_prbs_tx_wr_num 8
        self.writeReg(0x22,0x32,0x00) #i2c_prbs_tx_wr_num
        self.writeReg(0x22,0x33,0xB8) #i2c_prbs_tx_period_num  3000
        self.writeReg(0x22,0x34,0x0B) #i2c_prbs_tx_period_num
        self.writeReg(0x22,0x30,0x03) #prbs_gen_enable & prbs_gen_preset_en

    def func_02_18_LS_rx_UP_V1_PRBS(self):
        print("Cfg func_02_18_LS_rx_UP_V1_PRBS...")
        self.writeReg(0x21,0x20,0xCB) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x21,0x21,0x0D) #i2c_dm_pu2 & i2c_dm_pu1 & i2c_fslsserialmode
        self.writeReg(0x21,0x40,0x01) #i2c_fsls_speed & i2c_fs_prbs_en
        self.writeReg(0x21,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x21,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_18_LS_rx_UP_V2_PRBS(self):
        print("Cfg func_02_18_LS_rx_UP_V2_PRBS...")
        self.writeReg(0x09,0xc8,0x08) #i2c_utmi_port0_sel
        self.writeReg(0x47,0x20,0xCB) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x47,0x21,0x0D) #i2c_dm_pu2 & i2c_dm_pu1 & i2c_fslsserialmode
        self.writeReg(0x47,0x40,0x01) #i2c_fsls_speed & i2c_fs_prbs_en
        self.writeReg(0x47,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x47,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_19_LS_rx_DP1_PRBS(self):
        print("Cfg func_02_19_LS_rx_DP1_PRBS...")
        self.writeReg(0x22,0x20,0xCB) #i2c_xcvrselect & i2c_termselect & i2c_utm_man_en
        self.writeReg(0x22,0x21,0x0D) #i2c_dm_pu2 & i2c_dm_pu1 & i2c_fslsserialmode
        self.writeReg(0x22,0x40,0x01) #i2c_fsls_speed & i2c_fs_prbs_en
        self.writeReg(0x22,0x30,0x0E) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en
        self.writeReg(0x22,0x30,0x06) #prbs_check_clear & prbs_check_enable  &  prbs_gen_preset_en

    def func_02_07_01_HUB2_UP_FS_IDLE(self):
        print("Cfg func_02_07_01_HUB2_UP_FS_IDLE...")
        self.writeReg(0x21,0x20,0xC7) #i2c_utm_man_en
        self.writeReg(0x21,0x21,0x60) #phy_dp_pd & phy_dm_pd

    def func_02_07_02_HUB2_UP_HS_IDLE(self):
        print("Cfg func_02_07_02_HUB2_UP_HS_IDLE...")
        self.writeReg(0x21,0x20,0x83) #i2c_utm_man_en
        self.writeReg(0x21,0x21,0x00) #phy_dp_pd & phy_dm_pd

    def func_03_01_PIPE_up_Tx_Rx_PRBS(self):
        print("Cfg func_03_01_PIPE_up_Tx_Rx_PRBS...")
        self.writeReg(0x31,0x05,0xFF) #i2c_pipe_man_en
        self.writeReg(0x31,0x06,0xFF) #i2c_pipe_man_en
        self.writeReg(0x31,0x07,0xc0) #i2c_pipe_man_en+rstn
        self.writeReg(0x31,0x08,0x00) #pipe man
        self.writeReg(0x31,0x09,0x00) #pipe man
        self.writeReg(0x31,0x0a,0x00) #pipe man
        self.writeReg(0x31,0x0F,0x64) #ana man drv en,tx term en,tx en
        self.writeReg(0x31,0x10,0x0c) #rx en,rx term
        self.writeReg(0x31,0x0d,0x60) #ana man en
        self.writeReg(0x31,0x0e,0x46) #
        self.writeReg(0x31,0x19,0xC0) #tx prbs en
        self.writeReg(0x31,0x1c,0x24) #tx test en+prbs sel
        self.writeReg(0x31,0x63,0x30) #rx prbs en

    def func_03_02_PIPE_dp1_Tx_Rx_PRBS(self):
        print("Cfg func_03_02_PIPE_dp1_Tx_Rx_PRBS...")
        self.writeReg(0x32,0x05,0xFF) #i2c_pipe_man_en
        self.writeReg(0x32,0x06,0xFF) #i2c_pipe_man_en
        self.writeReg(0x32,0x07,0xc0) #i2c_pipe_man_en+rstn
        self.writeReg(0x32,0x08,0x00) #pipe man
        self.writeReg(0x32,0x09,0x00) #pipe man
        self.writeReg(0x32,0x0a,0x00) #pipe man
        self.writeReg(0x32,0x0F,0x64) #ana man drv en,tx term en,tx en
        self.writeReg(0x32,0x10,0x0c) #rx en,rx term
        self.writeReg(0x32,0x0d,0x60) #ana man en
        self.writeReg(0x32,0x0e,0x46) #
        self.writeReg(0x32,0x19,0xC0) #tx prbs en
        self.writeReg(0x32,0x1c,0x24) #tx test en+prbs sel
        self.writeReg(0x32,0x63,0x30) #rx prbs en

    def func_03_03_PIPE_dp2_Tx_Rx_PRBS(self):
        print("Cfg func_03_03_PIPE_dp2_Tx_Rx_PRBS...")
        self.writeReg(0x33,0x05,0xFF) #i2c_pipe_man_en
        self.writeReg(0x33,0x06,0xFF) #i2c_pipe_man_en
        self.writeReg(0x33,0x07,0xc0) #i2c_pipe_man_en+rstn
        self.writeReg(0x33,0x08,0x00) #pipe man
        self.writeReg(0x33,0x09,0x00) #pipe man
        self.writeReg(0x33,0x0a,0x00) #pipe man
        self.writeReg(0x33,0x0F,0x64) #ana man drv en,tx term en,tx en
        self.writeReg(0x33,0x10,0x0c) #rx en,rx term
        self.writeReg(0x33,0x0d,0x60) #ana man en
        self.writeReg(0x33,0x0e,0x46) #
        self.writeReg(0x33,0x19,0xC0) #tx prbs en
        self.writeReg(0x33,0x1c,0x24) #tx test en+prbs sel
        self.writeReg(0x33,0x63,0x30) #rx prbs en

    def func_03_04_PIPE_dp3_Tx_Rx_PRBS(self):
        print("Cfg func_03_04_PIPE_dp3_Tx_Rx_PRBS...")
        self.writeReg(0x34,0x05,0xFF) #i2c_pipe_man_en
        self.writeReg(0x34,0x06,0xFF) #i2c_pipe_man_en
        self.writeReg(0x34,0x07,0xc0) #i2c_pipe_man_en+rstn
        self.writeReg(0x34,0x08,0x00) #pipe man
        self.writeReg(0x34,0x09,0x00) #pipe man
        self.writeReg(0x34,0x0a,0x00) #pipe man
        self.writeReg(0x34,0x0F,0x64) #ana man drv en,tx term en,tx en
        self.writeReg(0x34,0x10,0x0c) #rx en,rx term
        self.writeReg(0x34,0x0d,0x60) #ana man en
        self.writeReg(0x34,0x0e,0x46) #
        self.writeReg(0x34,0x19,0xC0) #tx prbs en
        self.writeReg(0x34,0x1c,0x24) #tx test en+prbs sel
        self.writeReg(0x34,0x63,0x30) #rx prbs en

    def func_03_05_PIPE_dp4_Tx_Rx_PRBS(self):
        print("Cfg func_03_05_PIPE_dp4_Tx_Rx_PRBS...")
        self.writeReg(0x35,0x05,0xFF) #i2c_pipe_man_en
        self.writeReg(0x35,0x06,0xFF) #i2c_pipe_man_en
        self.writeReg(0x35,0x07,0xc0) #i2c_pipe_man_en+rstn
        self.writeReg(0x35,0x08,0x00) #pipe man
        self.writeReg(0x35,0x09,0x00) #pipe man
        self.writeReg(0x35,0x0a,0x00) #pipe man
        self.writeReg(0x35,0x0F,0x64) #ana man drv en,tx term en,tx en
        self.writeReg(0x35,0x10,0x0c) #rx en,rx term
        self.writeReg(0x35,0x0d,0x60) #ana man en
        self.writeReg(0x35,0x0e,0x46) #
        self.writeReg(0x35,0x19,0xC0) #tx prbs en
        self.writeReg(0x35,0x1c,0x24) #tx test en+prbs sel
        self.writeReg(0x35,0x63,0x30) #rx prbs enEnd

    def func_03_06_PIPE_up_Tx_Rx_LFPS(self):
        print("Cfg func_03_06_PIPE_up_Tx_Rx_LFPS...")
        self.writeReg(0x31,0x05,0xFF) #i2c_pipe_man_en
        self.writeReg(0x31,0x06,0xFF) #i2c_pipe_man_en
        self.writeReg(0x31,0x07,0xc0) #i2c_pipe_man_en+rstn
        self.writeReg(0x31,0x08,0x00) #pipe man
        self.writeReg(0x31,0x09,0x00) #pipe man
        self.writeReg(0x31,0x0a,0x00) #pipe man
        self.writeReg(0x31,0x0F,0x70) #ana man drv en,tx term en,tx lfps en
        self.writeReg(0x31,0x10,0x14) #rx lfps en,rx term
        self.writeReg(0x31,0x0d,0x50) #ana man en
        self.writeReg(0x31,0x0e,0x0e) #
        self.writeReg(0x31,0x21,0x80) #
        self.writeReg(0x31,0x22,0x00) #counterh
        self.writeReg(0x31,0x25,0x00) #enum
        self.writeReg(0x31,0x26,0x3F) #
        self.writeReg(0x31,0x27,0xFE) #rctime ff
        self.writeReg(0x31,0x23,0x00) #
        self.writeReg(0x31,0x24,0xfa) #deglitchnum
        self.writeReg(0x31,0x14,0xd0) #lfps tx man en
        self.writeReg(0x31,0x63,0x30) #lfps rx check en

    def func_03_07_PIPE_dp1_Tx_Rx_LFPS(self):
        print("Cfg func_03_07_PIPE_dp1_Tx_Rx_LFPS...")
        self.writeReg(0x32,0x05,0xFF) #i2c_pipe_man_en
        self.writeReg(0x32,0x06,0xFF) #i2c_pipe_man_en
        self.writeReg(0x32,0x07,0xc0) #i2c_pipe_man_en+rstn
        self.writeReg(0x32,0x08,0x00) #pipe man
        self.writeReg(0x32,0x09,0x00) #pipe man
        self.writeReg(0x32,0x0a,0x00) #pipe man
        self.writeReg(0x32,0x0F,0x70) #ana man drv en,tx term en,tx lfps en
        self.writeReg(0x32,0x10,0x14) #rx lfps en,rx term
        self.writeReg(0x32,0x0d,0x50) #ana man en
        self.writeReg(0x32,0x0e,0x0e) #
        self.writeReg(0x32,0x21,0x80) #
        self.writeReg(0x32,0x22,0x00) #counterh
        self.writeReg(0x32,0x25,0x00) #enum
        self.writeReg(0x32,0x26,0x3F) #
        self.writeReg(0x32,0x27,0xFE) #rctime ff
        self.writeReg(0x32,0x23,0x00) #
        self.writeReg(0x32,0x24,0xfa) #deglitchnum
        self.writeReg(0x32,0x14,0xd0) #lfps tx man en
        self.writeReg(0x32,0x63,0x30) #lfps rx check en

    def func_03_08_PIPE_dp2_Tx_Rx_LFPS(self):
        print("Cfg func_03_08_PIPE_dp2_Tx_Rx_LFPS...")
        self.writeReg(0x33,0x05,0xFF) #i2c_pipe_man_en
        self.writeReg(0x33,0x06,0xFF) #i2c_pipe_man_en
        self.writeReg(0x33,0x07,0xc0) #i2c_pipe_man_en+rstn
        self.writeReg(0x33,0x08,0x00) #pipe man
        self.writeReg(0x33,0x09,0x00) #pipe man
        self.writeReg(0x33,0x0a,0x00) #pipe man
        self.writeReg(0x33,0x0F,0x70) #ana man drv en,tx term en,tx lfps en
        self.writeReg(0x33,0x10,0x14) #rx lfps en,rx term
        self.writeReg(0x33,0x0d,0x50) #ana man en
        self.writeReg(0x33,0x0e,0x0e) #
        self.writeReg(0x33,0x21,0x80) #
        self.writeReg(0x33,0x22,0x00) #counterh
        self.writeReg(0x33,0x25,0x00) #enum
        self.writeReg(0x33,0x26,0x3F) #
        self.writeReg(0x33,0x27,0xFE) #rctime ff
        self.writeReg(0x33,0x23,0x00) #
        self.writeReg(0x33,0x24,0xfa) #deglitchnum
        self.writeReg(0x33,0x14,0xd0) #lfps tx man en
        self.writeReg(0x33,0x63,0x30) #lfps rx check en

    def func_03_09_PIPE_dp3_Tx_Rx_LFPS(self):
        print("Cfg func_03_09_PIPE_dp3_Tx_Rx_LFPS...")
        self.writeReg(0x34,0x05,0xFF) #i2c_pipe_man_en
        self.writeReg(0x34,0x06,0xFF) #i2c_pipe_man_en
        self.writeReg(0x34,0x07,0xc0) #i2c_pipe_man_en+rstn
        self.writeReg(0x34,0x08,0x00) #pipe man
        self.writeReg(0x34,0x09,0x00) #pipe man
        self.writeReg(0x34,0x0a,0x00) #pipe man
        self.writeReg(0x34,0x0F,0x70) #ana man drv en,tx term en,tx lfps en
        self.writeReg(0x34,0x10,0x14) #rx lfps en,rx term
        self.writeReg(0x34,0x0d,0x50) #ana man en
        self.writeReg(0x34,0x0e,0x0e) #
        self.writeReg(0x34,0x21,0x80) #
        self.writeReg(0x34,0x22,0x00) #counterh
        self.writeReg(0x34,0x25,0x00) #enum
        self.writeReg(0x34,0x26,0x3F) #
        self.writeReg(0x34,0x27,0xFE) #rctime ff
        self.writeReg(0x34,0x23,0x00) #
        self.writeReg(0x34,0x24,0xfa) #deglitchnum
        self.writeReg(0x34,0x14,0xd0) #lfps tx man en
        self.writeReg(0x34,0x63,0x30) #lfps rx check en

    def func_03_10_PIPE_dp4_Tx_Rx_LFPS(self):
        print("Cfg func_03_10_PIPE_dp4_Tx_Rx_LFPS...")
        self.writeReg(0x35,0x05,0xFF) #i2c_pipe_man_en
        self.writeReg(0x35,0x06,0xFF) #i2c_pipe_man_en
        self.writeReg(0x35,0x07,0xc0) #i2c_pipe_man_en+rstn
        self.writeReg(0x35,0x08,0x00) #pipe man
        self.writeReg(0x35,0x09,0x00) #pipe man
        self.writeReg(0x35,0x0a,0x00) #pipe man
        self.writeReg(0x35,0x0F,0x70) #ana man drv en,tx term en,tx lfps en
        self.writeReg(0x35,0x10,0x14) #rx lfps en,rx term
        self.writeReg(0x35,0x0d,0x50) #ana man en
        self.writeReg(0x35,0x0e,0x0e) #
        self.writeReg(0x35,0x21,0x80) #
        self.writeReg(0x35,0x22,0x00) #counterh
        self.writeReg(0x35,0x25,0x00) #enum
        self.writeReg(0x35,0x26,0x3F) #
        self.writeReg(0x35,0x27,0xFE) #rctime ff
        self.writeReg(0x35,0x23,0x00) #
        self.writeReg(0x35,0x24,0xfa) #deglitchnum
        self.writeReg(0x35,0x14,0xd0) #lfps tx man en
        self.writeReg(0x35,0x63,0x30) #lfps rx check en

    def func_03_11_PIPE_up_Tx_rxdetect(self):
        print("Cfg func_03_11_PIPE_up_Tx_rxdetect...")
        self.writeReg(0x31,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x31,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x31,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x31,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x31,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x31,0x07,0x07) #i2c_pipe_man[7:0],U0 tx lfps
        self.writeReg(0x31,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x31,0x0C,0x3F) #i2c_ana_man_en[7:0],rtl ctrl rxdetect
        self.writeReg(0x31,0x0D,0x08) #i2c_ana_man[12:8]
        self.writeReg(0x31,0x0E,0x00) #i2c_ana_man[7:0] only rx term en
        self.writeReg(0x31,0x34,0xC3) #man start {i2c_clk_rxdet_man_en,i2c_clk_rxdet_man,i2c_rxdet_man_en,i2c_rxdet_man_vrxdet_en,i2c_rxdet_man_vrxdet_sel,i2c_rxdet_rst_man_en,i2c_rxdet_start_man_en,i2c_rxdet_start_man} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_12_PIPE_dp1_Tx_rxdetect(self):
        print("Cfg func_03_12_PIPE_dp1_Tx_rxdetect...")
        self.writeReg(0x32,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x32,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x32,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x32,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x32,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x32,0x07,0x07) #i2c_pipe_man[7:0],U0 tx lfps
        self.writeReg(0x32,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x32,0x0C,0x3F) #i2c_ana_man_en[7:0],rtl ctrl rxdetect
        self.writeReg(0x32,0x0D,0x08) #i2c_ana_man[12:8]
        self.writeReg(0x32,0x0E,0x00) #i2c_ana_man[7:0] only rx term en
        self.writeReg(0x32,0x34,0xC3) #man start {i2c_clk_rxdet_man_en,i2c_clk_rxdet_man,i2c_rxdet_man_en,i2c_rxdet_man_vrxdet_en,i2c_rxdet_man_vrxdet_sel,i2c_rxdet_rst_man_en,i2c_rxdet_start_man_en,i2c_rxdet_start_man} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_13_PIPE_dp2_Tx_rxdetect(self):
        print("Cfg func_03_13_PIPE_dp2_Tx_rxdetect...")
        self.writeReg(0x33,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x33,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x33,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x33,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x33,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x33,0x07,0x07) #i2c_pipe_man[7:0],U0 tx lfps
        self.writeReg(0x33,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x33,0x0C,0x3F) #i2c_ana_man_en[7:0],rtl ctrl rxdetect
        self.writeReg(0x33,0x0D,0x08) #i2c_ana_man[12:8]
        self.writeReg(0x33,0x0E,0x00) #i2c_ana_man[7:0] only rx term en
        self.writeReg(0x33,0x34,0xC3) #man start {i2c_clk_rxdet_man_en,i2c_clk_rxdet_man,i2c_rxdet_man_en,i2c_rxdet_man_vrxdet_en,i2c_rxdet_man_vrxdet_sel,i2c_rxdet_rst_man_en,i2c_rxdet_start_man_en,i2c_rxdet_start_man} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_14_PIPE_dp3_Tx_rxdetect(self):
        print("Cfg func_03_14_PIPE_dp3_Tx_rxdetect...")
        self.writeReg(0x34,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x34,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x34,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x34,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x34,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x34,0x07,0x07) #i2c_pipe_man[7:0],U0 tx lfps
        self.writeReg(0x34,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x34,0x0C,0x3F) #i2c_ana_man_en[7:0],rtl ctrl rxdetect
        self.writeReg(0x34,0x0D,0x08) #i2c_ana_man[12:8]
        self.writeReg(0x34,0x0E,0x00) #i2c_ana_man[7:0] only rx term en
        self.writeReg(0x34,0x34,0xC3) #man start {i2c_clk_rxdet_man_en,i2c_clk_rxdet_man,i2c_rxdet_man_en,i2c_rxdet_man_vrxdet_en,i2c_rxdet_man_vrxdet_sel,i2c_rxdet_rst_man_en,i2c_rxdet_start_man_en,i2c_rxdet_start_man} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_15_PIPE_dp4_Tx_rxdetect(self):
        print("Cfg func_03_15_PIPE_dp4_Tx_rxdetect...")
        self.writeReg(0x35,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x35,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x35,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x35,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x35,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x35,0x07,0x07) #i2c_pipe_man[7:0],U0 tx lfps
        self.writeReg(0x35,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x35,0x0C,0x3F) #i2c_ana_man_en[7:0],rtl ctrl rxdetect
        self.writeReg(0x35,0x0D,0x08) #i2c_ana_man[12:8]
        self.writeReg(0x35,0x0E,0x00) #i2c_ana_man[7:0] only rx term en
        self.writeReg(0x35,0x34,0xC3) #man start {i2c_clk_rxdet_man_en,i2c_clk_rxdet_man,i2c_rxdet_man_en,i2c_rxdet_man_vrxdet_en,i2c_rxdet_man_vrxdet_sel,i2c_rxdet_rst_man_en,i2c_rxdet_start_man_en,i2c_rxdet_start_man} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_16_PIPE_up_Tx_Rx_20b_constant(self):
        print("Cfg func_03_16_PIPE_up_Tx_Rx_20b_constant...")
        self.writeReg(0x31,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x31,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x31,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x31,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x31,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x31,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x31,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x31,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x31,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x31,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x31,0x2F,0x80) #test en,sel constant,{i2c_tx_10b_test_en,i2c_tx_10b_test_sel[2],i2c_tx_10b_test_sel[1],i2c_tx_10b_test_sel[0],i2c_tx_10b_default_sel} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3]}
        self.writeReg(0x31,0x19,0x02) #{i2c_clk_packet_8b_gen_man,i2c_tx_8b_test_packet_en,i2c_tx_8b_test_packet_max[10],i2c_tx_8b_test_packet_max[9],i2c_tx_8b_test_packet_max[8]} <= {dataIn[7],dataIn[6],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x31,0x1A,0xAA) #CLK,01010,{i2c_tx_8b_test_packet_max[7],i2c_tx_8b_test_packet_max[6],i2c_tx_8b_test_packet_max[5],i2c_tx_8b_test_packet_max[4],i2c_tx_8b_test_packet_max[3],i2c_tx_8b_test_packet_max[2],i2c_tx_8b_test_packet_max[1],i2c_tx_8b_test_packet_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_17_PIPE_dp1_Tx_Rx_20b_constant(self):
        print("Cfg func_03_17_PIPE_dp1_Tx_Rx_20b_constant...")
        self.writeReg(0x32,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x32,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x32,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x32,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x32,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x32,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x32,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x32,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x32,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x32,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x32,0x2F,0x80) #test en,sel constant,{i2c_tx_10b_test_en,i2c_tx_10b_test_sel[2],i2c_tx_10b_test_sel[1],i2c_tx_10b_test_sel[0],i2c_tx_10b_default_sel} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3]}
        self.writeReg(0x32,0x19,0x02) #{i2c_clk_packet_8b_gen_man,i2c_tx_8b_test_packet_en,i2c_tx_8b_test_packet_max[10],i2c_tx_8b_test_packet_max[9],i2c_tx_8b_test_packet_max[8]} <= {dataIn[7],dataIn[6],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x32,0x1A,0xAA) #CLK,01010,{i2c_tx_8b_test_packet_max[7],i2c_tx_8b_test_packet_max[6],i2c_tx_8b_test_packet_max[5],i2c_tx_8b_test_packet_max[4],i2c_tx_8b_test_packet_max[3],i2c_tx_8b_test_packet_max[2],i2c_tx_8b_test_packet_max[1],i2c_tx_8b_test_packet_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_18_PIPE_dp2_Tx_Rx_20b_constant(self):
        print("Cfg func_03_18_PIPE_dp2_Tx_Rx_20b_constant...")
        self.writeReg(0x33,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x33,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x33,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x33,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x33,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x33,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x33,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x33,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x33,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x33,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x33,0x2F,0x80) #test en,sel constant,{i2c_tx_10b_test_en,i2c_tx_10b_test_sel[2],i2c_tx_10b_test_sel[1],i2c_tx_10b_test_sel[0],i2c_tx_10b_default_sel} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3]}
        self.writeReg(0x33,0x19,0x02) #{i2c_clk_packet_8b_gen_man,i2c_tx_8b_test_packet_en,i2c_tx_8b_test_packet_max[10],i2c_tx_8b_test_packet_max[9],i2c_tx_8b_test_packet_max[8]} <= {dataIn[7],dataIn[6],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x33,0x1A,0xAA) #CLK,01010,{i2c_tx_8b_test_packet_max[7],i2c_tx_8b_test_packet_max[6],i2c_tx_8b_test_packet_max[5],i2c_tx_8b_test_packet_max[4],i2c_tx_8b_test_packet_max[3],i2c_tx_8b_test_packet_max[2],i2c_tx_8b_test_packet_max[1],i2c_tx_8b_test_packet_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_19_PIPE_dp3_Tx_Rx_20b_constant(self):
        print("Cfg func_03_19_PIPE_dp3_Tx_Rx_20b_constant...")
        self.writeReg(0x34,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x34,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x34,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x34,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x34,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x34,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x34,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x34,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x34,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x34,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x34,0x2F,0x80) #test en,sel constant,{i2c_tx_10b_test_en,i2c_tx_10b_test_sel[2],i2c_tx_10b_test_sel[1],i2c_tx_10b_test_sel[0],i2c_tx_10b_default_sel} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3]}
        self.writeReg(0x34,0x19,0x02) #{i2c_clk_packet_8b_gen_man,i2c_tx_8b_test_packet_en,i2c_tx_8b_test_packet_max[10],i2c_tx_8b_test_packet_max[9],i2c_tx_8b_test_packet_max[8]} <= {dataIn[7],dataIn[6],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x34,0x1A,0xAA) #CLK,01010,{i2c_tx_8b_test_packet_max[7],i2c_tx_8b_test_packet_max[6],i2c_tx_8b_test_packet_max[5],i2c_tx_8b_test_packet_max[4],i2c_tx_8b_test_packet_max[3],i2c_tx_8b_test_packet_max[2],i2c_tx_8b_test_packet_max[1],i2c_tx_8b_test_packet_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_20_PIPE_dp4_Tx_Rx_20b_constant(self):
        print("Cfg func_03_20_PIPE_dp4_Tx_Rx_20b_constant...")
        self.writeReg(0x35,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x35,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x35,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x35,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x35,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x35,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x35,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x35,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x35,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x35,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x35,0x2F,0x80) #test en,sel constant,{i2c_tx_10b_test_en,i2c_tx_10b_test_sel[2],i2c_tx_10b_test_sel[1],i2c_tx_10b_test_sel[0],i2c_tx_10b_default_sel} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3]}
        self.writeReg(0x35,0x19,0x02) #{i2c_clk_packet_8b_gen_man,i2c_tx_8b_test_packet_en,i2c_tx_8b_test_packet_max[10],i2c_tx_8b_test_packet_max[9],i2c_tx_8b_test_packet_max[8]} <= {dataIn[7],dataIn[6],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x35,0x1A,0xAA) #CLK,01010,{i2c_tx_8b_test_packet_max[7],i2c_tx_8b_test_packet_max[6],i2c_tx_8b_test_packet_max[5],i2c_tx_8b_test_packet_max[4],i2c_tx_8b_test_packet_max[3],i2c_tx_8b_test_packet_max[2],i2c_tx_8b_test_packet_max[1],i2c_tx_8b_test_packet_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_21_PIPE_Up_tx8b_packet(self):
        print("Cfg func_03_21_PIPE_Up_tx8b_packet...")
        self.writeReg(0x31,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x31,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x31,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x31,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x31,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x31,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x31,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x31,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x31,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x31,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x31,0x19,0xC0) #{i2c_clk_packet_8b_gen_man,i2c_tx_8b_test_packet_en,i2c_tx_8b_test_packet_max[10],i2c_tx_8b_test_packet_max[9],i2c_tx_8b_test_packet_max[8]} <= {dataIn[7],dataIn[6],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x31,0x1A,0xB5) #{i2c_tx_8b_test_packet_max[7],i2c_tx_8b_test_packet_max[6],i2c_tx_8b_test_packet_max[5],i2c_tx_8b_test_packet_max[4],i2c_tx_8b_test_packet_max[3],i2c_tx_8b_test_packet_max[2],i2c_tx_8b_test_packet_max[1],i2c_tx_8b_test_packet_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x31,0x1B,0x20) #{i2c_tx_8b_test_packet_com_num[3],i2c_tx_8b_test_packet_com_num[2],i2c_tx_8b_test_packet_com_num[1],i2c_tx_8b_test_packet_com_num[0],i2c_tx_8b_test_packet_com_time[10],i2c_tx_8b_test_packet_com_time[9],i2c_tx_8b_test_packet_com_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x31,0x1C,0x02) #{i2c_tx_8b_test_packet_com_time[7],i2c_tx_8b_test_packet_com_time[6],i2c_tx_8b_test_packet_com_time[5],i2c_tx_8b_test_packet_com_time[4],i2c_tx_8b_test_packet_com_time[3],i2c_tx_8b_test_packet_com_time[2],i2c_tx_8b_test_packet_com_time[1],i2c_tx_8b_test_packet_com_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x31,0x1D,0x20) #{i2c_tx_8b_test_packet_skp_num[3],i2c_tx_8b_test_packet_skp_num[2],i2c_tx_8b_test_packet_skp_num[1],i2c_tx_8b_test_packet_skp_num[0],i2c_tx_8b_test_packet_skp_time[10],i2c_tx_8b_test_packet_skp_time[9],i2c_tx_8b_test_packet_skp_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x31,0x1E,0xAA) #{i2c_tx_8b_test_packet_skp_time[7],i2c_tx_8b_test_packet_skp_time[6],i2c_tx_8b_test_packet_skp_time[5],i2c_tx_8b_test_packet_skp_time[4],i2c_tx_8b_test_packet_skp_time[3],i2c_tx_8b_test_packet_skp_time[2],i2c_tx_8b_test_packet_skp_time[1],i2c_tx_8b_test_packet_skp_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x31,0x1F,0xB0) #{i2c_tx_8b_test_en,i2c_tx_8b_test_sel[2],i2c_tx_8b_test_sel[1],i2c_tx_8b_test_sel[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4]}
        self.writeReg(0x31,0xD1,0xC0) #{i2c_clk_packet_8b_pclk_check_man,i2c_rx_packet_8b_en,i2c_rx_packet_8b_err_cnt_clr} <= {dataIn[7],dataIn[6],dataIn[5]}
        self.writeReg(0x31,0xD2,0x00) #{i2c_rx_packet_8b_max[10],i2c_rx_packet_8b_max[9],i2c_rx_packet_8b_max[8]} <= {dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x31,0xD3,0xB5) #{i2c_rx_packet_8b_max[7],i2c_rx_packet_8b_max[6],i2c_rx_packet_8b_max[5],i2c_rx_packet_8b_max[4],i2c_rx_packet_8b_max[3],i2c_rx_packet_8b_max[2],i2c_rx_packet_8b_max[1],i2c_rx_packet_8b_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x31,0xD4,0x20) #{i2c_rx_packet_8b_com_num[3],i2c_rx_packet_8b_com_num[2],i2c_rx_packet_8b_com_num[1],i2c_rx_packet_8b_com_num[0],i2c_rx_packet_8b_com_time[10],i2c_rx_packet_8b_com_time[9],i2c_rx_packet_8b_com_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x31,0xD5,0x02) #{i2c_rx_packet_8b_com_time[7],i2c_rx_packet_8b_com_time[6],i2c_rx_packet_8b_com_time[5],i2c_rx_packet_8b_com_time[4],i2c_rx_packet_8b_com_time[3],i2c_rx_packet_8b_com_time[2],i2c_rx_packet_8b_com_time[1],i2c_rx_packet_8b_com_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_22_PIPE_dp1_tx8b_packet(self):
        print("Cfg func_03_22_PIPE_dp1_tx8b_packet...")
        self.writeReg(0x32,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x32,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x32,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x32,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x32,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x32,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x32,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x32,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x32,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x32,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x32,0x19,0xC0) #{i2c_clk_packet_8b_gen_man,i2c_tx_8b_test_packet_en,i2c_tx_8b_test_packet_max[10],i2c_tx_8b_test_packet_max[9],i2c_tx_8b_test_packet_max[8]} <= {dataIn[7],dataIn[6],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x32,0x1A,0xB5) #{i2c_tx_8b_test_packet_max[7],i2c_tx_8b_test_packet_max[6],i2c_tx_8b_test_packet_max[5],i2c_tx_8b_test_packet_max[4],i2c_tx_8b_test_packet_max[3],i2c_tx_8b_test_packet_max[2],i2c_tx_8b_test_packet_max[1],i2c_tx_8b_test_packet_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x32,0x1B,0x20) #{i2c_tx_8b_test_packet_com_num[3],i2c_tx_8b_test_packet_com_num[2],i2c_tx_8b_test_packet_com_num[1],i2c_tx_8b_test_packet_com_num[0],i2c_tx_8b_test_packet_com_time[10],i2c_tx_8b_test_packet_com_time[9],i2c_tx_8b_test_packet_com_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x32,0x1C,0x02) #{i2c_tx_8b_test_packet_com_time[7],i2c_tx_8b_test_packet_com_time[6],i2c_tx_8b_test_packet_com_time[5],i2c_tx_8b_test_packet_com_time[4],i2c_tx_8b_test_packet_com_time[3],i2c_tx_8b_test_packet_com_time[2],i2c_tx_8b_test_packet_com_time[1],i2c_tx_8b_test_packet_com_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x32,0x1D,0x20) #{i2c_tx_8b_test_packet_skp_num[3],i2c_tx_8b_test_packet_skp_num[2],i2c_tx_8b_test_packet_skp_num[1],i2c_tx_8b_test_packet_skp_num[0],i2c_tx_8b_test_packet_skp_time[10],i2c_tx_8b_test_packet_skp_time[9],i2c_tx_8b_test_packet_skp_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x32,0x1E,0xAA) #{i2c_tx_8b_test_packet_skp_time[7],i2c_tx_8b_test_packet_skp_time[6],i2c_tx_8b_test_packet_skp_time[5],i2c_tx_8b_test_packet_skp_time[4],i2c_tx_8b_test_packet_skp_time[3],i2c_tx_8b_test_packet_skp_time[2],i2c_tx_8b_test_packet_skp_time[1],i2c_tx_8b_test_packet_skp_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x32,0x1F,0xB0) #{i2c_tx_8b_test_en,i2c_tx_8b_test_sel[2],i2c_tx_8b_test_sel[1],i2c_tx_8b_test_sel[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4]}
        self.writeReg(0x32,0xD1,0xC0) #{i2c_clk_packet_8b_pclk_check_man,i2c_rx_packet_8b_en,i2c_rx_packet_8b_err_cnt_clr} <= {dataIn[7],dataIn[6],dataIn[5]}
        self.writeReg(0x32,0xD2,0x00) #{i2c_rx_packet_8b_max[10],i2c_rx_packet_8b_max[9],i2c_rx_packet_8b_max[8]} <= {dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x32,0xD3,0xB5) #{i2c_rx_packet_8b_max[7],i2c_rx_packet_8b_max[6],i2c_rx_packet_8b_max[5],i2c_rx_packet_8b_max[4],i2c_rx_packet_8b_max[3],i2c_rx_packet_8b_max[2],i2c_rx_packet_8b_max[1],i2c_rx_packet_8b_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x32,0xD4,0x20) #{i2c_rx_packet_8b_com_num[3],i2c_rx_packet_8b_com_num[2],i2c_rx_packet_8b_com_num[1],i2c_rx_packet_8b_com_num[0],i2c_rx_packet_8b_com_time[10],i2c_rx_packet_8b_com_time[9],i2c_rx_packet_8b_com_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x32,0xD5,0x02) #{i2c_rx_packet_8b_com_time[7],i2c_rx_packet_8b_com_time[6],i2c_rx_packet_8b_com_time[5],i2c_rx_packet_8b_com_time[4],i2c_rx_packet_8b_com_time[3],i2c_rx_packet_8b_com_time[2],i2c_rx_packet_8b_com_time[1],i2c_rx_packet_8b_com_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_23_PIPE_dp2_tx8b_packet(self):
        print("Cfg func_03_23_PIPE_dp2_tx8b_packet...")
        self.writeReg(0x33,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x33,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x33,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x33,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x33,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x33,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x33,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x33,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x33,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x33,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x33,0x19,0xC0) #{i2c_clk_packet_8b_gen_man,i2c_tx_8b_test_packet_en,i2c_tx_8b_test_packet_max[10],i2c_tx_8b_test_packet_max[9],i2c_tx_8b_test_packet_max[8]} <= {dataIn[7],dataIn[6],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x33,0x1A,0xB5) #{i2c_tx_8b_test_packet_max[7],i2c_tx_8b_test_packet_max[6],i2c_tx_8b_test_packet_max[5],i2c_tx_8b_test_packet_max[4],i2c_tx_8b_test_packet_max[3],i2c_tx_8b_test_packet_max[2],i2c_tx_8b_test_packet_max[1],i2c_tx_8b_test_packet_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x33,0x1B,0x20) #{i2c_tx_8b_test_packet_com_num[3],i2c_tx_8b_test_packet_com_num[2],i2c_tx_8b_test_packet_com_num[1],i2c_tx_8b_test_packet_com_num[0],i2c_tx_8b_test_packet_com_time[10],i2c_tx_8b_test_packet_com_time[9],i2c_tx_8b_test_packet_com_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x33,0x1C,0x02) #{i2c_tx_8b_test_packet_com_time[7],i2c_tx_8b_test_packet_com_time[6],i2c_tx_8b_test_packet_com_time[5],i2c_tx_8b_test_packet_com_time[4],i2c_tx_8b_test_packet_com_time[3],i2c_tx_8b_test_packet_com_time[2],i2c_tx_8b_test_packet_com_time[1],i2c_tx_8b_test_packet_com_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x33,0x1D,0x20) #{i2c_tx_8b_test_packet_skp_num[3],i2c_tx_8b_test_packet_skp_num[2],i2c_tx_8b_test_packet_skp_num[1],i2c_tx_8b_test_packet_skp_num[0],i2c_tx_8b_test_packet_skp_time[10],i2c_tx_8b_test_packet_skp_time[9],i2c_tx_8b_test_packet_skp_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x33,0x1E,0xAA) #{i2c_tx_8b_test_packet_skp_time[7],i2c_tx_8b_test_packet_skp_time[6],i2c_tx_8b_test_packet_skp_time[5],i2c_tx_8b_test_packet_skp_time[4],i2c_tx_8b_test_packet_skp_time[3],i2c_tx_8b_test_packet_skp_time[2],i2c_tx_8b_test_packet_skp_time[1],i2c_tx_8b_test_packet_skp_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x33,0x1F,0xB0) #{i2c_tx_8b_test_en,i2c_tx_8b_test_sel[2],i2c_tx_8b_test_sel[1],i2c_tx_8b_test_sel[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4]}
        self.writeReg(0x33,0xD1,0xC0) #{i2c_clk_packet_8b_pclk_check_man,i2c_rx_packet_8b_en,i2c_rx_packet_8b_err_cnt_clr} <= {dataIn[7],dataIn[6],dataIn[5]}
        self.writeReg(0x33,0xD2,0x00) #{i2c_rx_packet_8b_max[10],i2c_rx_packet_8b_max[9],i2c_rx_packet_8b_max[8]} <= {dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x33,0xD3,0xB5) #{i2c_rx_packet_8b_max[7],i2c_rx_packet_8b_max[6],i2c_rx_packet_8b_max[5],i2c_rx_packet_8b_max[4],i2c_rx_packet_8b_max[3],i2c_rx_packet_8b_max[2],i2c_rx_packet_8b_max[1],i2c_rx_packet_8b_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x33,0xD4,0x20) #{i2c_rx_packet_8b_com_num[3],i2c_rx_packet_8b_com_num[2],i2c_rx_packet_8b_com_num[1],i2c_rx_packet_8b_com_num[0],i2c_rx_packet_8b_com_time[10],i2c_rx_packet_8b_com_time[9],i2c_rx_packet_8b_com_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x33,0xD5,0x02) #{i2c_rx_packet_8b_com_time[7],i2c_rx_packet_8b_com_time[6],i2c_rx_packet_8b_com_time[5],i2c_rx_packet_8b_com_time[4],i2c_rx_packet_8b_com_time[3],i2c_rx_packet_8b_com_time[2],i2c_rx_packet_8b_com_time[1],i2c_rx_packet_8b_com_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_24_PIPE_dp3_tx8b_packet(self):
        print("Cfg func_03_24_PIPE_dp3_tx8b_packet...")
        self.writeReg(0x34,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x34,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x34,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x34,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x34,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x34,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x34,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x34,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x34,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x34,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x34,0x19,0xC0) #{i2c_clk_packet_8b_gen_man,i2c_tx_8b_test_packet_en,i2c_tx_8b_test_packet_max[10],i2c_tx_8b_test_packet_max[9],i2c_tx_8b_test_packet_max[8]} <= {dataIn[7],dataIn[6],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x34,0x1A,0xB5) #{i2c_tx_8b_test_packet_max[7],i2c_tx_8b_test_packet_max[6],i2c_tx_8b_test_packet_max[5],i2c_tx_8b_test_packet_max[4],i2c_tx_8b_test_packet_max[3],i2c_tx_8b_test_packet_max[2],i2c_tx_8b_test_packet_max[1],i2c_tx_8b_test_packet_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x34,0x1B,0x20) #{i2c_tx_8b_test_packet_com_num[3],i2c_tx_8b_test_packet_com_num[2],i2c_tx_8b_test_packet_com_num[1],i2c_tx_8b_test_packet_com_num[0],i2c_tx_8b_test_packet_com_time[10],i2c_tx_8b_test_packet_com_time[9],i2c_tx_8b_test_packet_com_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x34,0x1C,0x02) #{i2c_tx_8b_test_packet_com_time[7],i2c_tx_8b_test_packet_com_time[6],i2c_tx_8b_test_packet_com_time[5],i2c_tx_8b_test_packet_com_time[4],i2c_tx_8b_test_packet_com_time[3],i2c_tx_8b_test_packet_com_time[2],i2c_tx_8b_test_packet_com_time[1],i2c_tx_8b_test_packet_com_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x34,0x1D,0x20) #{i2c_tx_8b_test_packet_skp_num[3],i2c_tx_8b_test_packet_skp_num[2],i2c_tx_8b_test_packet_skp_num[1],i2c_tx_8b_test_packet_skp_num[0],i2c_tx_8b_test_packet_skp_time[10],i2c_tx_8b_test_packet_skp_time[9],i2c_tx_8b_test_packet_skp_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x34,0x1E,0xAA) #{i2c_tx_8b_test_packet_skp_time[7],i2c_tx_8b_test_packet_skp_time[6],i2c_tx_8b_test_packet_skp_time[5],i2c_tx_8b_test_packet_skp_time[4],i2c_tx_8b_test_packet_skp_time[3],i2c_tx_8b_test_packet_skp_time[2],i2c_tx_8b_test_packet_skp_time[1],i2c_tx_8b_test_packet_skp_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x34,0x1F,0xB0) #{i2c_tx_8b_test_en,i2c_tx_8b_test_sel[2],i2c_tx_8b_test_sel[1],i2c_tx_8b_test_sel[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4]}
        self.writeReg(0x34,0xD1,0xC0) #{i2c_clk_packet_8b_pclk_check_man,i2c_rx_packet_8b_en,i2c_rx_packet_8b_err_cnt_clr} <= {dataIn[7],dataIn[6],dataIn[5]}
        self.writeReg(0x34,0xD2,0x00) #{i2c_rx_packet_8b_max[10],i2c_rx_packet_8b_max[9],i2c_rx_packet_8b_max[8]} <= {dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x34,0xD3,0xB5) #{i2c_rx_packet_8b_max[7],i2c_rx_packet_8b_max[6],i2c_rx_packet_8b_max[5],i2c_rx_packet_8b_max[4],i2c_rx_packet_8b_max[3],i2c_rx_packet_8b_max[2],i2c_rx_packet_8b_max[1],i2c_rx_packet_8b_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x34,0xD4,0x20) #{i2c_rx_packet_8b_com_num[3],i2c_rx_packet_8b_com_num[2],i2c_rx_packet_8b_com_num[1],i2c_rx_packet_8b_com_num[0],i2c_rx_packet_8b_com_time[10],i2c_rx_packet_8b_com_time[9],i2c_rx_packet_8b_com_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x34,0xD5,0x02) #{i2c_rx_packet_8b_com_time[7],i2c_rx_packet_8b_com_time[6],i2c_rx_packet_8b_com_time[5],i2c_rx_packet_8b_com_time[4],i2c_rx_packet_8b_com_time[3],i2c_rx_packet_8b_com_time[2],i2c_rx_packet_8b_com_time[1],i2c_rx_packet_8b_com_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_25_PIPE_dp4_tx8b_packet(self):
        print("Cfg func_03_25_PIPE_dp4_tx8b_packet...")
        self.writeReg(0x35,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x35,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x35,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x35,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x35,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x35,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x35,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x35,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x35,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x35,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x35,0x19,0xC0) #{i2c_clk_packet_8b_gen_man,i2c_tx_8b_test_packet_en,i2c_tx_8b_test_packet_max[10],i2c_tx_8b_test_packet_max[9],i2c_tx_8b_test_packet_max[8]} <= {dataIn[7],dataIn[6],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x35,0x1A,0xB5) #{i2c_tx_8b_test_packet_max[7],i2c_tx_8b_test_packet_max[6],i2c_tx_8b_test_packet_max[5],i2c_tx_8b_test_packet_max[4],i2c_tx_8b_test_packet_max[3],i2c_tx_8b_test_packet_max[2],i2c_tx_8b_test_packet_max[1],i2c_tx_8b_test_packet_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x35,0x1B,0x20) #{i2c_tx_8b_test_packet_com_num[3],i2c_tx_8b_test_packet_com_num[2],i2c_tx_8b_test_packet_com_num[1],i2c_tx_8b_test_packet_com_num[0],i2c_tx_8b_test_packet_com_time[10],i2c_tx_8b_test_packet_com_time[9],i2c_tx_8b_test_packet_com_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x35,0x1C,0x02) #{i2c_tx_8b_test_packet_com_time[7],i2c_tx_8b_test_packet_com_time[6],i2c_tx_8b_test_packet_com_time[5],i2c_tx_8b_test_packet_com_time[4],i2c_tx_8b_test_packet_com_time[3],i2c_tx_8b_test_packet_com_time[2],i2c_tx_8b_test_packet_com_time[1],i2c_tx_8b_test_packet_com_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x35,0x1D,0x20) #{i2c_tx_8b_test_packet_skp_num[3],i2c_tx_8b_test_packet_skp_num[2],i2c_tx_8b_test_packet_skp_num[1],i2c_tx_8b_test_packet_skp_num[0],i2c_tx_8b_test_packet_skp_time[10],i2c_tx_8b_test_packet_skp_time[9],i2c_tx_8b_test_packet_skp_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x35,0x1E,0xAA) #{i2c_tx_8b_test_packet_skp_time[7],i2c_tx_8b_test_packet_skp_time[6],i2c_tx_8b_test_packet_skp_time[5],i2c_tx_8b_test_packet_skp_time[4],i2c_tx_8b_test_packet_skp_time[3],i2c_tx_8b_test_packet_skp_time[2],i2c_tx_8b_test_packet_skp_time[1],i2c_tx_8b_test_packet_skp_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x35,0x1F,0xB0) #{i2c_tx_8b_test_en,i2c_tx_8b_test_sel[2],i2c_tx_8b_test_sel[1],i2c_tx_8b_test_sel[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4]}
        self.writeReg(0x35,0xD1,0xC0) #{i2c_clk_packet_8b_pclk_check_man,i2c_rx_packet_8b_en,i2c_rx_packet_8b_err_cnt_clr} <= {dataIn[7],dataIn[6],dataIn[5]}
        self.writeReg(0x35,0xD2,0x00) #{i2c_rx_packet_8b_max[10],i2c_rx_packet_8b_max[9],i2c_rx_packet_8b_max[8]} <= {dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x35,0xD3,0xB5) #{i2c_rx_packet_8b_max[7],i2c_rx_packet_8b_max[6],i2c_rx_packet_8b_max[5],i2c_rx_packet_8b_max[4],i2c_rx_packet_8b_max[3],i2c_rx_packet_8b_max[2],i2c_rx_packet_8b_max[1],i2c_rx_packet_8b_max[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x35,0xD4,0x20) #{i2c_rx_packet_8b_com_num[3],i2c_rx_packet_8b_com_num[2],i2c_rx_packet_8b_com_num[1],i2c_rx_packet_8b_com_num[0],i2c_rx_packet_8b_com_time[10],i2c_rx_packet_8b_com_time[9],i2c_rx_packet_8b_com_time[8]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[2],dataIn[1],dataIn[0]}
        self.writeReg(0x35,0xD5,0x02) #{i2c_rx_packet_8b_com_time[7],i2c_rx_packet_8b_com_time[6],i2c_rx_packet_8b_com_time[5],i2c_rx_packet_8b_com_time[4],i2c_rx_packet_8b_com_time[3],i2c_rx_packet_8b_com_time[2],i2c_rx_packet_8b_com_time[1],i2c_rx_packet_8b_com_time[0]} <= {dataIn[7],dataIn[6],dataIn[5],dataIn[4],dataIn[3],dataIn[2],dataIn[1],dataIn[0]}

    def func_03_26_PIPE_up_tx_tseq(self):
        print("Cfg func_03_26_PIPE_up_tx_tseq...")
        self.writeReg(0x31,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x31,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x31,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x31,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x31,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x31,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x31,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x31,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x31,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x31,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x31,0x17,0xC0) #man en
        self.writeReg(0x31,0x1F,0x90) #tx tseq

    def func_03_27_PIPE_dp1_tx_tseq(self):
        print("Cfg func_03_27_PIPE_dp1_tx_tseq...")
        self.writeReg(0x32,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x32,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x32,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x32,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x32,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x32,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x32,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x32,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x32,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x32,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x32,0x17,0xC0) #man en
        self.writeReg(0x32,0x1F,0x90) #tx tseq

    def func_03_28_PIPE_dp2_tx_tseq(self):
        print("Cfg func_03_28_PIPE_dp2_tx_tseq...")
        self.writeReg(0x33,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x33,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x33,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x33,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x33,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x33,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x33,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x33,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x33,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x33,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x33,0x17,0xC0) #man en
        self.writeReg(0x33,0x1F,0x90) #tx tseq

    def func_03_29_PIPE_dp3_tx_tseq(self):
        print("Cfg func_03_29_PIPE_dp3_tx_tseq...")
        self.writeReg(0x34,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x34,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x34,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x34,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x34,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x34,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x34,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x34,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x34,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x34,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x34,0x17,0xC0) #man en
        self.writeReg(0x34,0x1F,0x90) #tx tseq

    def func_03_30_PIPE_dp4_tx_tseq(self):
        print("Cfg func_03_30_PIPE_dp4_tx_tseq...")
        self.writeReg(0x35,0x02,0xFF) #i2c_pipe_man_en[15:8]
        self.writeReg(0x35,0x03,0xFF) #i2c_pipe_man_en[7:0]
        self.writeReg(0x35,0x04,0x00) #i2c_pipe_man[25:24]
        self.writeReg(0x35,0x05,0x00) #i2c_pipe_man[23:16]
        self.writeReg(0x35,0x06,0x00) #i2c_pipe_man[15:8]
        self.writeReg(0x35,0x07,0x01) #i2c_pipe_man[7:0],U0 tx 20b
        self.writeReg(0x35,0x0B,0xFF) #i2c_ana_man_en[12:8]
        self.writeReg(0x35,0x0C,0xFF) #i2c_ana_man_en[7:0]
        self.writeReg(0x35,0x0D,0x0C) #i2c_ana_man[12:8]
        self.writeReg(0x35,0x0E,0x17) #i2c_ana_man[7:0] tx en,rx en
        self.writeReg(0x35,0x17,0xC0) #man en
        self.writeReg(0x35,0x1F,0x90) #tx tseq

    def func_03_31_up_debug_testdata(self):
        print("Cfg func_03_31_up_debug_testdata...")
        self.func_03_06_PIPE_up_Tx_Rx_LFPS()
        self.writeReg(0x31,0x0F,0x60) #disable lfps tx en
        self.writeReg(0x31,0xEA,0x20) #test en = 1
        self.writeReg(0x31,0xE4,0x13) #debug io select test data from extern

    def func_03_31_dp1_debug_testdata(self):
        print("Cfg func_03_31_dp1_debug_testdata...")
        self.func_03_07_PIPE_dp1_Tx_Rx_LFPS()
        self.writeReg(0x32,0x0F,0x60) #disable lfps tx en
        self.writeReg(0x32,0xEA,0x20) #test en = 1
        self.writeReg(0x32,0xE4,0x13) #debug io select test data from extern

    def func_03_31_dp2_debug_testdata(self):
        print("Cfg func_03_31_dp2_debug_testdata...")
        self.func_03_08_PIPE_dp2_Tx_Rx_LFPS()
        self.writeReg(0x33,0x0F,0x60) #disable lfps tx en
        self.writeReg(0x33,0xEA,0x20) #test en = 1
        self.writeReg(0x33,0xE4,0x13) #debug io select test data from extern

    def func_03_31_dp3_debug_testdata(self):
        print("Cfg func_03_31_dp3_debug_testdata...")
        self.func_03_09_PIPE_dp3_Tx_Rx_LFPS()
        self.writeReg(0x34,0x0F,0x60) #disable lfps tx en
        self.writeReg(0x34,0xEA,0x20) #test en = 1
        self.writeReg(0x34,0xE4,0x13) #debug io select test data from extern
        self.writeReg(0x34,0xF8,0x06) #pll debug mux sel
        self.writeReg(0x34,0xF9,0x04) #pll debug mux sel

    def func_03_31_dp4_debug_testdata(self):
        print("Cfg func_03_31_dp4_debug_testdata...")
        self.func_03_10_PIPE_dp4_Tx_Rx_LFPS()
        self.writeReg(0x35,0x0F,0x60) #disable lfps tx en
        self.writeReg(0x35,0xEA,0x20) #test en = 1
        self.writeReg(0x35,0xE4,0x13) #debug io select test data from extern

    def func_03_35_pipe_no_lowpower(self):
        print("Cfg func_03_35_pipe_no_lowpower...")
        self.writeReg(0x31,0x0d,0x34) #ana man en
        self.writeReg(0x31,0x0e,0xc0) #ana man en
        self.writeReg(0x31,0x0f,0x04) #ana man
        self.writeReg(0x31,0x10,0x18) #ana man
        self.writeReg(0x31,0xff,0xee) #pclk on man
        self.writeReg(0x31,0xe5,0xff) #pipe all gate on
        self.writeReg(0x31,0xe6,0x80) #free run mux is plck
        self.writeReg(0x31,0x17,0x30) #tx encoder clk man
        self.writeReg(0x31,0x21,0xe2) #rxdet clk man
        self.writeReg(0x31,0x80,0x80) #symbol lock clk man en
        self.writeReg(0x31,0x82,0x80) #symbol lock clk man
        self.writeReg(0x31,0x88,0xcf) #symbol unlock clk man
        self.writeReg(0x31,0x1e,0x08) #tx unreset
        self.writeReg(0x31,0x1e,0x0c) #tx reset
        self.writeReg(0x31,0x1e,0x08) #tx unreset,but man
        self.writeReg(0x31,0x36,0x00) #
        self.writeReg(0x31,0x37,0x00) #
        self.writeReg(0x31,0x38,0x10) #tx depmh only tx20bit en
        self.writeReg(0x32,0x0d,0x34) #ana man en
        self.writeReg(0x32,0x0e,0xc0) #ana man en
        self.writeReg(0x32,0x0f,0x04) #ana man
        self.writeReg(0x32,0x10,0x18) #ana man
        self.writeReg(0x32,0xff,0xee) #pclk on man
        self.writeReg(0x32,0xe5,0xff) #pipe all gate on
        self.writeReg(0x32,0xe6,0x80) #free run mux is plck
        self.writeReg(0x32,0x17,0x30) #tx encoder clk man
        self.writeReg(0x32,0x21,0xe2) #rxdet clk man
        self.writeReg(0x32,0x80,0x80) #symbol lock clk man en
        self.writeReg(0x32,0x82,0x80) #symbol lock clk man
        self.writeReg(0x32,0x88,0xcf) #symbol unlock clk man
        self.writeReg(0x32,0x1e,0x08) #tx unreset
        self.writeReg(0x32,0x1e,0x0c) #tx reset
        self.writeReg(0x32,0x1e,0x08) #tx unreset,but man
        self.writeReg(0x32,0x36,0x00) #
        self.writeReg(0x32,0x37,0x00) #
        self.writeReg(0x32,0x38,0x10) #tx depmh only tx20bit en
        self.writeReg(0x33,0x0d,0x34) #ana man en
        self.writeReg(0x33,0x0e,0xc0) #ana man en
        self.writeReg(0x33,0x0f,0x04) #ana man
        self.writeReg(0x33,0x10,0x18) #ana man
        self.writeReg(0x33,0xff,0xee) #pclk on man
        self.writeReg(0x33,0xe5,0xff) #pipe all gate on
        self.writeReg(0x33,0xe6,0x80) #free run mux is plck
        self.writeReg(0x33,0x17,0x30) #tx encoder clk man
        self.writeReg(0x33,0x21,0xe2) #rxdet clk man
        self.writeReg(0x33,0x80,0x80) #symbol lock clk man en
        self.writeReg(0x33,0x82,0x80) #symbol lock clk man
        self.writeReg(0x33,0x88,0xcf) #symbol unlock clk man
        self.writeReg(0x33,0x1e,0x08) #tx unreset
        self.writeReg(0x33,0x1e,0x0c) #tx reset
        self.writeReg(0x33,0x1e,0x08) #tx unreset,but man
        self.writeReg(0x33,0x36,0x00) #
        self.writeReg(0x33,0x37,0x00) #
        self.writeReg(0x33,0x38,0x10) #tx depmh only tx20bit en
        self.writeReg(0x34,0x0d,0x34) #ana man en
        self.writeReg(0x34,0x0e,0xc0) #ana man en
        self.writeReg(0x34,0x0f,0x04) #ana man
        self.writeReg(0x34,0x10,0x18) #ana man
        self.writeReg(0x34,0xff,0xee) #pclk on man
        self.writeReg(0x34,0xe5,0xff) #pipe all gate on
        self.writeReg(0x34,0xe6,0x80) #free run mux is plck
        self.writeReg(0x34,0x17,0x30) #tx encoder clk man
        self.writeReg(0x34,0x21,0xe2) #rxdet clk man
        self.writeReg(0x34,0x80,0x80) #symbol lock clk man en
        self.writeReg(0x34,0x82,0x80) #symbol lock clk man
        self.writeReg(0x34,0x88,0xcf) #symbol unlock clk man
        self.writeReg(0x34,0x1e,0x08) #tx unreset
        self.writeReg(0x34,0x1e,0x0c) #tx reset
        self.writeReg(0x34,0x1e,0x08) #tx unreset,but man
        self.writeReg(0x34,0x36,0x00) #
        self.writeReg(0x34,0x37,0x00) #
        self.writeReg(0x34,0x38,0x10) #tx depmh only tx20bit en
        self.writeReg(0x35,0x0d,0x34) #ana man en
        self.writeReg(0x35,0x0e,0xc0) #ana man en
        self.writeReg(0x35,0x0f,0x04) #ana man
        self.writeReg(0x35,0x10,0x18) #ana man
        self.writeReg(0x35,0xff,0xee) #pclk on man
        self.writeReg(0x35,0xe5,0xff) #pipe all gate on
        self.writeReg(0x35,0xe6,0x80) #free run mux is plck
        self.writeReg(0x35,0x17,0x30) #tx encoder clk man
        self.writeReg(0x35,0x21,0xe2) #rxdet clk man
        self.writeReg(0x35,0x80,0x80) #symbol lock clk man en
        self.writeReg(0x35,0x82,0x80) #symbol lock clk man
        self.writeReg(0x35,0x88,0xcf) #symbol unlock clk man
        self.writeReg(0x35,0x1e,0x08) #tx unreset
        self.writeReg(0x35,0x1e,0x0c) #tx reset
        self.writeReg(0x35,0x1e,0x08) #tx unreset,but man
        self.writeReg(0x35,0x36,0x00) #
        self.writeReg(0x35,0x37,0x00) #
        self.writeReg(0x35,0x38,0x10) #tx depmh only tx20bit en

    def func_03_36_dp2_dp3_debug_retimer_up_dn(self):
        print("Cfg func_03_36_dp2_dp3_debug_retimer_up_dn...")
        self.writeReg(0x09,0xc0,0x28) #dp2 test sel
        self.writeReg(0x09,0xc1,0x05) #dp3 test sel
        self.func_03_08_PIPE_dp2_Tx_Rx_LFPS()
        self.writeReg(0x33,0x0F,0x60) #disable dpx lfps tx en
        self.writeReg(0x33,0xEA,0x20) #DPx test en = 1
        self.writeReg(0x33,0xE4,0x13) #dp x debug io select test data from extern
        self.func_03_09_PIPE_dp3_Tx_Rx_LFPS()
        self.writeReg(0x34,0x0F,0x60) #disable dpx lfps tx en
        self.writeReg(0x34,0xEA,0x20) #DPx test en = 1
        self.writeReg(0x34,0xE4,0x13) #dp x debug io select test data from extern

    def func_03_37_five_pipe_digital(self):
        print("Cfg func_03_37_five_pipe_digital...")
        self.writeReg(0x31,0xff,0x40) #
        self.writeReg(0x31,0xff,0xc0) #
        self.writeReg(0x31,0xff,0xc0) #
        self.writeReg(0x31,0xff,0xe0) #
        self.writeReg(0x31,0xde,0x00) #
        self.writeReg(0x31,0xdf,0x00) #
        self.writeReg(0x31,0xde,0x00) #
        self.writeReg(0x31,0xd8,0x00) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xe5,0x10) #
        self.writeReg(0x31,0xe5,0x30) #
        self.writeReg(0x31,0xe5,0x34) #
        self.writeReg(0x31,0xe5,0x3c) #
        self.writeReg(0x31,0xe5,0x3d) #
        self.writeReg(0x31,0xe5,0x3f) #
        self.writeReg(0x31,0xe5,0x7f) #
        self.writeReg(0x31,0xe5,0xff) #
        self.writeReg(0x31,0xff,0xe4) #
        self.writeReg(0x31,0xff,0xec) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xff,0xec) #
        self.writeReg(0x31,0xff,0xec) #
        self.writeReg(0x31,0x05,0x00) #
        self.writeReg(0x31,0x06,0x00) #
        self.writeReg(0x31,0x07,0x00) #
        self.writeReg(0x31,0x0d,0x00) #
        self.writeReg(0x31,0x0e,0x00) #
        self.writeReg(0x31,0x0e,0x00) #
        self.writeReg(0x31,0x0f,0x00) #
        self.writeReg(0x31,0x0e,0x00) #
        self.writeReg(0x31,0x0f,0x40) #
        self.writeReg(0x31,0x0e,0x00) #
        self.writeReg(0x31,0x0f,0x60) #
        self.writeReg(0x31,0x0e,0x00) #
        self.writeReg(0x31,0x0f,0x70) #
        self.writeReg(0x31,0x0e,0x40) #
        self.writeReg(0x31,0x0f,0x74) #
        self.writeReg(0x31,0x0e,0x40) #
        self.writeReg(0x31,0x0f,0x76) #
        self.writeReg(0x31,0x0d,0x00) #
        self.writeReg(0x31,0x0f,0x77) #
        self.writeReg(0x31,0x0d,0x00) #
        self.writeReg(0x31,0x10,0x80) #
        self.writeReg(0x31,0x0d,0x04) #
        self.writeReg(0x31,0x10,0x80) #
        self.writeReg(0x31,0x0d,0x04) #
        self.writeReg(0x31,0x10,0xa0) #
        self.writeReg(0x31,0x0d,0x14) #
        self.writeReg(0x31,0x10,0xb0) #
        self.writeReg(0x31,0x0d,0x34) #
        self.writeReg(0x31,0x10,0xb8) #
        self.writeReg(0x31,0x0d,0x34) #
        self.writeReg(0x31,0x10,0xbc) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x53,0xab) #
        self.writeReg(0x31,0x53,0xab) #
        self.writeReg(0x31,0x53,0xab) #
        self.writeReg(0x31,0x53,0xaa) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x54,0x82) #
        self.writeReg(0x31,0x54,0x88) #
        self.writeReg(0x31,0x55,0x84) #
        self.writeReg(0x31,0x55,0x88) #
        self.writeReg(0x31,0x56,0x00) #
        self.writeReg(0x31,0x56,0x00) #
        self.writeReg(0x31,0x56,0x00) #
        self.writeReg(0x31,0x4f,0x80) #
        self.writeReg(0x31,0x4f,0xc0) #
        self.writeReg(0x31,0x70,0x01) #
        self.writeReg(0x31,0x71,0x5e) #
        self.writeReg(0x31,0x72,0x64) #
        self.writeReg(0x31,0x73,0x64) #
        self.writeReg(0x31,0x74,0x40) #
        self.writeReg(0x31,0x74,0x40) #
        self.writeReg(0x31,0x75,0x04) #
        self.writeReg(0x31,0x76,0x00) #
        self.writeReg(0x31,0x77,0x03) #
        self.writeReg(0x31,0x78,0xe8) #
        self.writeReg(0x31,0x74,0x40) #
        self.writeReg(0x31,0x76,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x49,0x00) #
        self.writeReg(0x31,0x49,0x02) #
        self.writeReg(0x31,0x49,0x02) #
        self.writeReg(0x31,0x49,0x0a) #
        self.writeReg(0x31,0x49,0x0a) #
        self.writeReg(0x31,0x49,0x0a) #
        self.writeReg(0x31,0x46,0x05) #
        self.writeReg(0x31,0x47,0xff) #
        self.writeReg(0x31,0x4f,0xc0) #
        self.writeReg(0x31,0x4f,0xc0) #
        self.writeReg(0x31,0x50,0x00) #
        self.writeReg(0x31,0x64,0x30) #
        self.writeReg(0x31,0x63,0x00) #
        self.writeReg(0x31,0x63,0x00) #
        self.writeReg(0x31,0x63,0x00) #
        self.writeReg(0x31,0x64,0x30) #
        self.writeReg(0x31,0x80,0x00) #
        self.writeReg(0x31,0x82,0x00) #
        self.writeReg(0x31,0x83,0xc8) #
        self.writeReg(0x31,0x88,0x8f) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x82,0x00) #
        self.writeReg(0x31,0x82,0x00) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x8a,0x50) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x8b,0x11) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x8b,0x11) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x8e,0x32) #
        self.writeReg(0x31,0x8f,0x00) #
        self.writeReg(0x31,0x8c,0x28) #
        self.writeReg(0x31,0x89,0x0f) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x97,0x12) #
        self.writeReg(0x31,0x97,0x92) #
        self.writeReg(0x31,0x97,0x92) #
        self.writeReg(0x31,0x97,0x92) #
        self.writeReg(0x31,0x97,0x92) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0xb6,0x40) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0xb5,0x00) #
        self.writeReg(0x31,0xae,0x80) #
        self.writeReg(0x31,0xaa,0x2a) #
        self.writeReg(0x31,0xab,0xf8) #
        self.writeReg(0x31,0xaf,0x00) #
        self.writeReg(0x31,0xac,0x00) #
        self.writeReg(0x31,0xad,0x64) #
        self.writeReg(0x31,0xb6,0x40) #
        self.writeReg(0x31,0xb0,0x00) #
        self.writeReg(0x31,0xb1,0x00) #
        self.writeReg(0x31,0xb6,0x40) #
        self.writeReg(0x31,0xb2,0x00) #
        self.writeReg(0x31,0xb3,0x00) #
        self.writeReg(0x31,0x9a,0x1e) #
        self.writeReg(0x31,0xa4,0xff) #
        self.writeReg(0x31,0xa5,0xff) #
        self.writeReg(0x31,0xa7,0x00) #
        self.writeReg(0x31,0xa8,0x00) #
        self.writeReg(0x31,0xa9,0x07) #
        self.writeReg(0x31,0xa6,0x00) #
        self.writeReg(0x31,0x9d,0x00) #
        self.writeReg(0x31,0x9e,0x00) #
        self.writeReg(0x31,0x9f,0xc8) #
        self.writeReg(0x31,0xa2,0x00) #
        self.writeReg(0x31,0xa3,0x00) #
        self.writeReg(0x31,0x9b,0x00) #
        self.writeReg(0x31,0xa0,0x00) #
        self.writeReg(0x31,0xa1,0x08) #
        self.writeReg(0x31,0x9c,0x00) #
        self.writeReg(0x31,0xc6,0x90) #
        self.writeReg(0x31,0xc6,0x98) #
        self.writeReg(0x31,0xc6,0x98) #
        self.writeReg(0x31,0xc8,0x20) #
        self.writeReg(0x31,0xc6,0x98) #
        self.writeReg(0x31,0xc6,0x98) #
        self.writeReg(0x31,0xc6,0x18) #
        self.writeReg(0x31,0xc9,0x0e) #
        self.writeReg(0x31,0xc9,0x0e) #
        self.writeReg(0x31,0xc9,0x1e) #
        self.writeReg(0x31,0xc9,0x1a) #
        self.writeReg(0x31,0xc9,0x18) #
        self.writeReg(0x31,0xc9,0x18) #
        self.writeReg(0x31,0xc9,0x18) #
        self.writeReg(0x31,0xca,0x20) #
        self.writeReg(0x31,0xca,0x30) #
        self.writeReg(0x31,0xca,0x38) #
        self.writeReg(0x31,0xca,0x3c) #
        self.writeReg(0x31,0xd2,0x50) #
        self.writeReg(0x31,0xd2,0x58) #
        self.writeReg(0x31,0xd2,0x58) #
        self.writeReg(0x31,0xd2,0x58) #
        self.writeReg(0x31,0xd3,0x20) #
        self.writeReg(0x31,0xd8,0x40) #
        self.writeReg(0x31,0xd8,0x60) #
        self.writeReg(0x31,0x14,0x10) #
        self.writeReg(0x31,0x13,0x07) #
        self.writeReg(0x31,0x13,0x07) #
        self.writeReg(0x31,0x14,0x10) #
        self.writeReg(0x31,0x14,0x10) #
        self.writeReg(0x31,0x17,0x20) #
        self.writeReg(0x31,0x17,0x30) #
        self.writeReg(0x31,0x14,0x10) #
        self.writeReg(0x31,0x1b,0x00) #
        self.writeReg(0x31,0x17,0x30) #
        self.writeReg(0x31,0x17,0x30) #
        self.writeReg(0x31,0x19,0x00) #
        self.writeReg(0x31,0x19,0x00) #
        self.writeReg(0x31,0x1b,0x00) #
        self.writeReg(0x31,0x1b,0x00) #
        self.writeReg(0x31,0x1c,0x02) #
        self.writeReg(0x31,0x1e,0x00) #
        self.writeReg(0x31,0x1c,0x00) #
        self.writeReg(0x31,0x1c,0x01) #
        self.writeReg(0x31,0x1f,0x10) #
        self.writeReg(0x31,0x1e,0x00) #
        self.writeReg(0x31,0x1e,0x08) #
        self.writeReg(0x31,0x1e,0x08) #
        self.writeReg(0x31,0x1e,0x0c) #
        self.writeReg(0x31,0x1e,0x08) #
        self.writeReg(0x31,0x1e,0x00) #
        self.writeReg(0x31,0x28,0x00) #
        self.writeReg(0x31,0x28,0x00) #
        self.writeReg(0x31,0x28,0x00) #
        self.writeReg(0x31,0x28,0x00) #
        self.writeReg(0x31,0x28,0x00) #
        self.writeReg(0x31,0x21,0xc2) #
        self.writeReg(0x31,0x21,0xe2) #
        self.writeReg(0x31,0x19,0x00) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2d,0x1b) #
        self.writeReg(0x31,0x2e,0x6f) #
        self.writeReg(0x31,0x2f,0xf6) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2d,0x0b) #
        self.writeReg(0x31,0x2f,0xf6) #
        self.writeReg(0x31,0x30,0xfa) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2d,0x03) #
        self.writeReg(0x31,0x31,0xff) #
        self.writeReg(0x31,0x32,0xf0) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2d,0x03) #
        self.writeReg(0x31,0x34,0x6f) #
        self.writeReg(0x31,0x35,0xf0) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2d,0x01) #
        self.writeReg(0x31,0x35,0xf0) #
        self.writeReg(0x31,0x36,0x00) #
        self.writeReg(0x31,0x37,0x00) #
        self.writeReg(0x31,0x38,0x10) #
        self.writeReg(0x31,0x2d,0x00) #
        self.writeReg(0x32,0xff,0x40) #
        self.writeReg(0x32,0xff,0xc0) #
        self.writeReg(0x32,0xff,0xc0) #
        self.writeReg(0x32,0xff,0xe0) #
        self.writeReg(0x32,0xde,0x00) #
        self.writeReg(0x32,0xdf,0x00) #
        self.writeReg(0x32,0xde,0x00) #
        self.writeReg(0x32,0xd8,0x00) #
        self.writeReg(0x32,0xe6,0x00) #
        self.writeReg(0x32,0xe6,0x00) #
        self.writeReg(0x32,0xe6,0x00) #
        self.writeReg(0x32,0xe6,0x00) #
        self.writeReg(0x32,0xe5,0x10) #
        self.writeReg(0x32,0xe5,0x30) #
        self.writeReg(0x32,0xe5,0x34) #
        self.writeReg(0x32,0xe5,0x3c) #
        self.writeReg(0x32,0xe5,0x3d) #
        self.writeReg(0x32,0xe5,0x3f) #
        self.writeReg(0x32,0xe5,0x7f) #
        self.writeReg(0x32,0xe5,0xff) #
        self.writeReg(0x32,0xff,0xe4) #
        self.writeReg(0x32,0xff,0xec) #
        self.writeReg(0x32,0xe6,0x00) #
        self.writeReg(0x32,0xe6,0x00) #
        self.writeReg(0x32,0xff,0xec) #
        self.writeReg(0x32,0xff,0xec) #
        self.writeReg(0x32,0x05,0x00) #
        self.writeReg(0x32,0x06,0x00) #
        self.writeReg(0x32,0x07,0x00) #
        self.writeReg(0x32,0x0d,0x00) #
        self.writeReg(0x32,0x0e,0x00) #
        self.writeReg(0x32,0x0e,0x00) #
        self.writeReg(0x32,0x0f,0x00) #
        self.writeReg(0x32,0x0e,0x00) #
        self.writeReg(0x32,0x0f,0x40) #
        self.writeReg(0x32,0x0e,0x00) #
        self.writeReg(0x32,0x0f,0x60) #
        self.writeReg(0x32,0x0e,0x00) #
        self.writeReg(0x32,0x0f,0x70) #
        self.writeReg(0x32,0x0e,0x40) #
        self.writeReg(0x32,0x0f,0x74) #
        self.writeReg(0x32,0x0e,0x40) #
        self.writeReg(0x32,0x0f,0x76) #
        self.writeReg(0x32,0x0d,0x00) #
        self.writeReg(0x32,0x0f,0x77) #
        self.writeReg(0x32,0x0d,0x00) #
        self.writeReg(0x32,0x10,0x80) #
        self.writeReg(0x32,0x0d,0x04) #
        self.writeReg(0x32,0x10,0x80) #
        self.writeReg(0x32,0x0d,0x04) #
        self.writeReg(0x32,0x10,0xa0) #
        self.writeReg(0x32,0x0d,0x14) #
        self.writeReg(0x32,0x10,0xb0) #
        self.writeReg(0x32,0x0d,0x34) #
        self.writeReg(0x32,0x10,0xb8) #
        self.writeReg(0x32,0x0d,0x34) #
        self.writeReg(0x32,0x10,0xbc) #
        self.writeReg(0x32,0x52,0x4f) #
        self.writeReg(0x32,0x52,0x4f) #
        self.writeReg(0x32,0x53,0xab) #
        self.writeReg(0x32,0x53,0xab) #
        self.writeReg(0x32,0x53,0xab) #
        self.writeReg(0x32,0x53,0xaa) #
        self.writeReg(0x32,0x52,0x4f) #
        self.writeReg(0x32,0x52,0x4f) #
        self.writeReg(0x32,0x52,0x4f) #
        self.writeReg(0x32,0x52,0x4f) #
        self.writeReg(0x32,0x54,0x82) #
        self.writeReg(0x32,0x54,0x88) #
        self.writeReg(0x32,0x55,0x84) #
        self.writeReg(0x32,0x55,0x88) #
        self.writeReg(0x32,0x56,0x00) #
        self.writeReg(0x32,0x56,0x00) #
        self.writeReg(0x32,0x56,0x00) #
        self.writeReg(0x32,0x4f,0x80) #
        self.writeReg(0x32,0x4f,0xc0) #
        self.writeReg(0x32,0x70,0x01) #
        self.writeReg(0x32,0x71,0x5e) #
        self.writeReg(0x32,0x72,0x64) #
        self.writeReg(0x32,0x73,0x64) #
        self.writeReg(0x32,0x74,0x40) #
        self.writeReg(0x32,0x74,0x40) #
        self.writeReg(0x32,0x75,0x04) #
        self.writeReg(0x32,0x76,0x00) #
        self.writeReg(0x32,0x77,0x03) #
        self.writeReg(0x32,0x78,0xe8) #
        self.writeReg(0x32,0x74,0x40) #
        self.writeReg(0x32,0x76,0x00) #
        self.writeReg(0x32,0x48,0x00) #
        self.writeReg(0x32,0x48,0x00) #
        self.writeReg(0x32,0x48,0x00) #
        self.writeReg(0x32,0x48,0x00) #
        self.writeReg(0x32,0x48,0x00) #
        self.writeReg(0x32,0x48,0x00) #
        self.writeReg(0x32,0x49,0x00) #
        self.writeReg(0x32,0x49,0x02) #
        self.writeReg(0x32,0x49,0x02) #
        self.writeReg(0x32,0x49,0x0a) #
        self.writeReg(0x32,0x49,0x0a) #
        self.writeReg(0x32,0x49,0x0a) #
        self.writeReg(0x32,0x46,0x05) #
        self.writeReg(0x32,0x47,0xff) #
        self.writeReg(0x32,0x4f,0xc0) #
        self.writeReg(0x32,0x4f,0xc0) #
        self.writeReg(0x32,0x50,0x00) #
        self.writeReg(0x32,0x64,0x30) #
        self.writeReg(0x32,0x63,0x00) #
        self.writeReg(0x32,0x63,0x00) #
        self.writeReg(0x32,0x63,0x00) #
        self.writeReg(0x32,0x64,0x30) #
        self.writeReg(0x32,0x80,0x00) #
        self.writeReg(0x32,0x82,0x00) #
        self.writeReg(0x32,0x83,0xc8) #
        self.writeReg(0x32,0x88,0x8f) #
        self.writeReg(0x32,0x88,0xcf) #
        self.writeReg(0x32,0x88,0xcf) #
        self.writeReg(0x32,0x88,0xcf) #
        self.writeReg(0x32,0x82,0x00) #
        self.writeReg(0x32,0x82,0x00) #
        self.writeReg(0x32,0x88,0xcf) #
        self.writeReg(0x32,0x8a,0x50) #
        self.writeReg(0x32,0x88,0xcf) #
        self.writeReg(0x32,0x8b,0x11) #
        self.writeReg(0x32,0x88,0xcf) #
        self.writeReg(0x32,0x8b,0x11) #
        self.writeReg(0x32,0x88,0xcf) #
        self.writeReg(0x32,0x8e,0x32) #
        self.writeReg(0x32,0x8f,0x00) #
        self.writeReg(0x32,0x8c,0x28) #
        self.writeReg(0x32,0x89,0x0f) #
        self.writeReg(0x32,0x95,0x00) #
        self.writeReg(0x32,0x95,0x00) #
        self.writeReg(0x32,0x95,0x00) #
        self.writeReg(0x32,0x95,0x00) #
        self.writeReg(0x32,0x97,0x12) #
        self.writeReg(0x32,0x97,0x92) #
        self.writeReg(0x32,0x97,0x92) #
        self.writeReg(0x32,0x97,0x92) #
        self.writeReg(0x32,0x97,0x92) #
        self.writeReg(0x32,0x97,0x9a) #
        self.writeReg(0x32,0xb6,0x40) #
        self.writeReg(0x32,0x97,0x9a) #
        self.writeReg(0x32,0x97,0x9a) #
        self.writeReg(0x32,0xb5,0x00) #
        self.writeReg(0x32,0xae,0x80) #
        self.writeReg(0x32,0xaa,0x2a) #
        self.writeReg(0x32,0xab,0xf8) #
        self.writeReg(0x32,0xaf,0x00) #
        self.writeReg(0x32,0xac,0x00) #
        self.writeReg(0x32,0xad,0x64) #
        self.writeReg(0x32,0xb6,0x40) #
        self.writeReg(0x32,0xb0,0x00) #
        self.writeReg(0x32,0xb1,0x00) #
        self.writeReg(0x32,0xb6,0x40) #
        self.writeReg(0x32,0xb2,0x00) #
        self.writeReg(0x32,0xb3,0x00) #
        self.writeReg(0x32,0x9a,0x1e) #
        self.writeReg(0x32,0xa4,0xff) #
        self.writeReg(0x32,0xa5,0xff) #
        self.writeReg(0x32,0xa7,0x00) #
        self.writeReg(0x32,0xa8,0x00) #
        self.writeReg(0x32,0xa9,0x07) #
        self.writeReg(0x32,0xa6,0x00) #
        self.writeReg(0x32,0x9d,0x00) #
        self.writeReg(0x32,0x9e,0x00) #
        self.writeReg(0x32,0x9f,0xc8) #
        self.writeReg(0x32,0xa2,0x00) #
        self.writeReg(0x32,0xa3,0x00) #
        self.writeReg(0x32,0x9b,0x00) #
        self.writeReg(0x32,0xa0,0x00) #
        self.writeReg(0x32,0xa1,0x08) #
        self.writeReg(0x32,0x9c,0x00) #
        self.writeReg(0x32,0xc6,0x90) #
        self.writeReg(0x32,0xc6,0x98) #
        self.writeReg(0x32,0xc6,0x98) #
        self.writeReg(0x32,0xc8,0x20) #
        self.writeReg(0x32,0xc6,0x98) #
        self.writeReg(0x32,0xc6,0x98) #
        self.writeReg(0x32,0xc6,0x18) #
        self.writeReg(0x32,0xc9,0x0e) #
        self.writeReg(0x32,0xc9,0x0e) #
        self.writeReg(0x32,0xc9,0x1e) #
        self.writeReg(0x32,0xc9,0x1a) #
        self.writeReg(0x32,0xc9,0x18) #
        self.writeReg(0x32,0xc9,0x18) #
        self.writeReg(0x32,0xc9,0x18) #
        self.writeReg(0x32,0xca,0x20) #
        self.writeReg(0x32,0xca,0x30) #
        self.writeReg(0x32,0xca,0x38) #
        self.writeReg(0x32,0xca,0x3c) #
        self.writeReg(0x32,0xd2,0x50) #
        self.writeReg(0x32,0xd2,0x58) #
        self.writeReg(0x32,0xd2,0x58) #
        self.writeReg(0x32,0xd2,0x58) #
        self.writeReg(0x32,0xd3,0x20) #
        self.writeReg(0x32,0xd8,0x40) #
        self.writeReg(0x32,0xd8,0x60) #
        self.writeReg(0x32,0x14,0x10) #
        self.writeReg(0x32,0x13,0x07) #
        self.writeReg(0x32,0x13,0x07) #
        self.writeReg(0x32,0x14,0x10) #
        self.writeReg(0x32,0x14,0x10) #
        self.writeReg(0x32,0x17,0x20) #
        self.writeReg(0x32,0x17,0x30) #
        self.writeReg(0x32,0x14,0x10) #
        self.writeReg(0x32,0x1b,0x00) #
        self.writeReg(0x32,0x17,0x30) #
        self.writeReg(0x32,0x17,0x30) #
        self.writeReg(0x32,0x19,0x00) #
        self.writeReg(0x32,0x19,0x00) #
        self.writeReg(0x32,0x1b,0x00) #
        self.writeReg(0x32,0x1b,0x00) #
        self.writeReg(0x32,0x1c,0x02) #
        self.writeReg(0x32,0x1e,0x00) #
        self.writeReg(0x32,0x1c,0x00) #
        self.writeReg(0x32,0x1c,0x01) #
        self.writeReg(0x32,0x1f,0x10) #
        self.writeReg(0x32,0x1e,0x00) #
        self.writeReg(0x32,0x1e,0x08) #
        self.writeReg(0x32,0x1e,0x08) #
        self.writeReg(0x32,0x1e,0x0c) #
        self.writeReg(0x32,0x1e,0x08) #
        self.writeReg(0x32,0x1e,0x00) #
        self.writeReg(0x32,0x28,0x00) #
        self.writeReg(0x32,0x28,0x00) #
        self.writeReg(0x32,0x28,0x00) #
        self.writeReg(0x32,0x28,0x00) #
        self.writeReg(0x32,0x28,0x00) #
        self.writeReg(0x32,0x21,0xc2) #
        self.writeReg(0x32,0x21,0xe2) #
        self.writeReg(0x32,0x19,0x00) #
        self.writeReg(0x32,0x2c,0x30) #
        self.writeReg(0x32,0x2d,0x1b) #
        self.writeReg(0x32,0x2e,0x6f) #
        self.writeReg(0x32,0x2f,0xf6) #
        self.writeReg(0x32,0x2c,0x30) #
        self.writeReg(0x32,0x2d,0x0b) #
        self.writeReg(0x32,0x2f,0xf6) #
        self.writeReg(0x32,0x30,0xfa) #
        self.writeReg(0x32,0x2c,0x30) #
        self.writeReg(0x32,0x2d,0x03) #
        self.writeReg(0x32,0x31,0xff) #
        self.writeReg(0x32,0x32,0xf0) #
        self.writeReg(0x32,0x2c,0x30) #
        self.writeReg(0x32,0x2c,0x30) #
        self.writeReg(0x32,0x2d,0x03) #
        self.writeReg(0x32,0x34,0x6f) #
        self.writeReg(0x32,0x35,0xf0) #
        self.writeReg(0x32,0x2c,0x30) #
        self.writeReg(0x32,0x2d,0x01) #
        self.writeReg(0x32,0x35,0xf0) #
        self.writeReg(0x32,0x36,0x00) #
        self.writeReg(0x32,0x37,0x00) #
        self.writeReg(0x32,0x38,0x10) #
        self.writeReg(0x32,0x2d,0x00) #
        self.writeReg(0x33,0xff,0x40) #
        self.writeReg(0x33,0xff,0xc0) #
        self.writeReg(0x33,0xff,0xc0) #
        self.writeReg(0x33,0xff,0xe0) #
        self.writeReg(0x33,0xde,0x00) #
        self.writeReg(0x33,0xdf,0x00) #
        self.writeReg(0x33,0xde,0x00) #
        self.writeReg(0x33,0xd8,0x00) #
        self.writeReg(0x33,0xe6,0x00) #
        self.writeReg(0x33,0xe6,0x00) #
        self.writeReg(0x33,0xe6,0x00) #
        self.writeReg(0x33,0xe6,0x00) #
        self.writeReg(0x33,0xe5,0x10) #
        self.writeReg(0x33,0xe5,0x30) #
        self.writeReg(0x33,0xe5,0x34) #
        self.writeReg(0x33,0xe5,0x3c) #
        self.writeReg(0x33,0xe5,0x3d) #
        self.writeReg(0x33,0xe5,0x3f) #
        self.writeReg(0x33,0xe5,0x7f) #
        self.writeReg(0x33,0xe5,0xff) #
        self.writeReg(0x33,0xff,0xe4) #
        self.writeReg(0x33,0xff,0xec) #
        self.writeReg(0x33,0xe6,0x00) #
        self.writeReg(0x33,0xe6,0x00) #
        self.writeReg(0x33,0xff,0xec) #
        self.writeReg(0x33,0xff,0xec) #
        self.writeReg(0x33,0x05,0x00) #
        self.writeReg(0x33,0x06,0x00) #
        self.writeReg(0x33,0x07,0x00) #
        self.writeReg(0x33,0x0d,0x00) #
        self.writeReg(0x33,0x0e,0x00) #
        self.writeReg(0x33,0x0e,0x00) #
        self.writeReg(0x33,0x0f,0x00) #
        self.writeReg(0x33,0x0e,0x00) #
        self.writeReg(0x33,0x0f,0x40) #
        self.writeReg(0x33,0x0e,0x00) #
        self.writeReg(0x33,0x0f,0x60) #
        self.writeReg(0x33,0x0e,0x00) #
        self.writeReg(0x33,0x0f,0x70) #
        self.writeReg(0x33,0x0e,0x40) #
        self.writeReg(0x33,0x0f,0x74) #
        self.writeReg(0x33,0x0e,0x40) #
        self.writeReg(0x33,0x0f,0x76) #
        self.writeReg(0x33,0x0d,0x00) #
        self.writeReg(0x33,0x0f,0x77) #
        self.writeReg(0x33,0x0d,0x00) #
        self.writeReg(0x33,0x10,0x80) #
        self.writeReg(0x33,0x0d,0x04) #
        self.writeReg(0x33,0x10,0x80) #
        self.writeReg(0x33,0x0d,0x04) #
        self.writeReg(0x33,0x10,0xa0) #
        self.writeReg(0x33,0x0d,0x14) #
        self.writeReg(0x33,0x10,0xb0) #
        self.writeReg(0x33,0x0d,0x34) #
        self.writeReg(0x33,0x10,0xb8) #
        self.writeReg(0x33,0x0d,0x34) #
        self.writeReg(0x33,0x10,0xbc) #
        self.writeReg(0x33,0x52,0x4f) #
        self.writeReg(0x33,0x52,0x4f) #
        self.writeReg(0x33,0x53,0xab) #
        self.writeReg(0x33,0x53,0xab) #
        self.writeReg(0x33,0x53,0xab) #
        self.writeReg(0x33,0x53,0xaa) #
        self.writeReg(0x33,0x52,0x4f) #
        self.writeReg(0x33,0x52,0x4f) #
        self.writeReg(0x33,0x52,0x4f) #
        self.writeReg(0x33,0x52,0x4f) #
        self.writeReg(0x33,0x54,0x82) #
        self.writeReg(0x33,0x54,0x88) #
        self.writeReg(0x33,0x55,0x84) #
        self.writeReg(0x33,0x55,0x88) #
        self.writeReg(0x33,0x56,0x00) #
        self.writeReg(0x33,0x56,0x00) #
        self.writeReg(0x33,0x56,0x00) #
        self.writeReg(0x33,0x4f,0x80) #
        self.writeReg(0x33,0x4f,0xc0) #
        self.writeReg(0x33,0x70,0x01) #
        self.writeReg(0x33,0x71,0x5e) #
        self.writeReg(0x33,0x72,0x64) #
        self.writeReg(0x33,0x73,0x64) #
        self.writeReg(0x33,0x74,0x40) #
        self.writeReg(0x33,0x74,0x40) #
        self.writeReg(0x33,0x75,0x04) #
        self.writeReg(0x33,0x76,0x00) #
        self.writeReg(0x33,0x77,0x03) #
        self.writeReg(0x33,0x78,0xe8) #
        self.writeReg(0x33,0x74,0x40) #
        self.writeReg(0x33,0x76,0x00) #
        self.writeReg(0x33,0x48,0x00) #
        self.writeReg(0x33,0x48,0x00) #
        self.writeReg(0x33,0x48,0x00) #
        self.writeReg(0x33,0x48,0x00) #
        self.writeReg(0x33,0x48,0x00) #
        self.writeReg(0x33,0x48,0x00) #
        self.writeReg(0x33,0x49,0x00) #
        self.writeReg(0x33,0x49,0x02) #
        self.writeReg(0x33,0x49,0x02) #
        self.writeReg(0x33,0x49,0x0a) #
        self.writeReg(0x33,0x49,0x0a) #
        self.writeReg(0x33,0x49,0x0a) #
        self.writeReg(0x33,0x46,0x05) #
        self.writeReg(0x33,0x47,0xff) #
        self.writeReg(0x33,0x4f,0xc0) #
        self.writeReg(0x33,0x4f,0xc0) #
        self.writeReg(0x33,0x50,0x00) #
        self.writeReg(0x33,0x64,0x30) #
        self.writeReg(0x33,0x63,0x00) #
        self.writeReg(0x33,0x63,0x00) #
        self.writeReg(0x33,0x63,0x00) #
        self.writeReg(0x33,0x64,0x30) #
        self.writeReg(0x33,0x80,0x00) #
        self.writeReg(0x33,0x82,0x00) #
        self.writeReg(0x33,0x83,0xc8) #
        self.writeReg(0x33,0x88,0x8f) #
        self.writeReg(0x33,0x88,0xcf) #
        self.writeReg(0x33,0x88,0xcf) #
        self.writeReg(0x33,0x88,0xcf) #
        self.writeReg(0x33,0x82,0x00) #
        self.writeReg(0x33,0x82,0x00) #
        self.writeReg(0x33,0x88,0xcf) #
        self.writeReg(0x33,0x8a,0x50) #
        self.writeReg(0x33,0x88,0xcf) #
        self.writeReg(0x33,0x8b,0x11) #
        self.writeReg(0x33,0x88,0xcf) #
        self.writeReg(0x33,0x8b,0x11) #
        self.writeReg(0x33,0x88,0xcf) #
        self.writeReg(0x33,0x8e,0x32) #
        self.writeReg(0x33,0x8f,0x00) #
        self.writeReg(0x33,0x8c,0x28) #
        self.writeReg(0x33,0x89,0x0f) #
        self.writeReg(0x33,0x95,0x00) #
        self.writeReg(0x33,0x95,0x00) #
        self.writeReg(0x33,0x95,0x00) #
        self.writeReg(0x33,0x95,0x00) #
        self.writeReg(0x33,0x97,0x12) #
        self.writeReg(0x33,0x97,0x92) #
        self.writeReg(0x33,0x97,0x92) #
        self.writeReg(0x33,0x97,0x92) #
        self.writeReg(0x33,0x97,0x92) #
        self.writeReg(0x33,0x97,0x9a) #
        self.writeReg(0x33,0xb6,0x40) #
        self.writeReg(0x33,0x97,0x9a) #
        self.writeReg(0x33,0x97,0x9a) #
        self.writeReg(0x33,0xb5,0x00) #
        self.writeReg(0x33,0xae,0x80) #
        self.writeReg(0x33,0xaa,0x2a) #
        self.writeReg(0x33,0xab,0xf8) #
        self.writeReg(0x33,0xaf,0x00) #
        self.writeReg(0x33,0xac,0x00) #
        self.writeReg(0x33,0xad,0x64) #
        self.writeReg(0x33,0xb6,0x40) #
        self.writeReg(0x33,0xb0,0x00) #
        self.writeReg(0x33,0xb1,0x00) #
        self.writeReg(0x33,0xb6,0x40) #
        self.writeReg(0x33,0xb2,0x00) #
        self.writeReg(0x33,0xb3,0x00) #
        self.writeReg(0x33,0x9a,0x1e) #
        self.writeReg(0x33,0xa4,0xff) #
        self.writeReg(0x33,0xa5,0xff) #
        self.writeReg(0x33,0xa7,0x00) #
        self.writeReg(0x33,0xa8,0x00) #
        self.writeReg(0x33,0xa9,0x07) #
        self.writeReg(0x33,0xa6,0x00) #
        self.writeReg(0x33,0x9d,0x00) #
        self.writeReg(0x33,0x9e,0x00) #
        self.writeReg(0x33,0x9f,0xc8) #
        self.writeReg(0x33,0xa2,0x00) #
        self.writeReg(0x33,0xa3,0x00) #
        self.writeReg(0x33,0x9b,0x00) #
        self.writeReg(0x33,0xa0,0x00) #
        self.writeReg(0x33,0xa1,0x08) #
        self.writeReg(0x33,0x9c,0x00) #
        self.writeReg(0x33,0xc6,0x90) #
        self.writeReg(0x33,0xc6,0x98) #
        self.writeReg(0x33,0xc6,0x98) #
        self.writeReg(0x33,0xc8,0x20) #
        self.writeReg(0x33,0xc6,0x98) #
        self.writeReg(0x33,0xc6,0x98) #
        self.writeReg(0x33,0xc6,0x18) #
        self.writeReg(0x33,0xc9,0x0e) #
        self.writeReg(0x33,0xc9,0x0e) #
        self.writeReg(0x33,0xc9,0x1e) #
        self.writeReg(0x33,0xc9,0x1a) #
        self.writeReg(0x33,0xc9,0x18) #
        self.writeReg(0x33,0xc9,0x18) #
        self.writeReg(0x33,0xc9,0x18) #
        self.writeReg(0x33,0xca,0x20) #
        self.writeReg(0x33,0xca,0x30) #
        self.writeReg(0x33,0xca,0x38) #
        self.writeReg(0x33,0xca,0x3c) #
        self.writeReg(0x33,0xd2,0x50) #
        self.writeReg(0x33,0xd2,0x58) #
        self.writeReg(0x33,0xd2,0x58) #
        self.writeReg(0x33,0xd2,0x58) #
        self.writeReg(0x33,0xd3,0x20) #
        self.writeReg(0x33,0xd8,0x40) #
        self.writeReg(0x33,0xd8,0x60) #
        self.writeReg(0x33,0x14,0x10) #
        self.writeReg(0x33,0x13,0x07) #
        self.writeReg(0x33,0x13,0x07) #
        self.writeReg(0x33,0x14,0x10) #
        self.writeReg(0x33,0x14,0x10) #
        self.writeReg(0x33,0x17,0x20) #
        self.writeReg(0x33,0x17,0x30) #
        self.writeReg(0x33,0x14,0x10) #
        self.writeReg(0x33,0x1b,0x00) #
        self.writeReg(0x33,0x17,0x30) #
        self.writeReg(0x33,0x17,0x30) #
        self.writeReg(0x33,0x19,0x00) #
        self.writeReg(0x33,0x19,0x00) #
        self.writeReg(0x33,0x1b,0x00) #
        self.writeReg(0x33,0x1b,0x00) #
        self.writeReg(0x33,0x1c,0x02) #
        self.writeReg(0x33,0x1e,0x00) #
        self.writeReg(0x33,0x1c,0x00) #
        self.writeReg(0x33,0x1c,0x01) #
        self.writeReg(0x33,0x1f,0x10) #
        self.writeReg(0x33,0x1e,0x00) #
        self.writeReg(0x33,0x1e,0x08) #
        self.writeReg(0x33,0x1e,0x08) #
        self.writeReg(0x33,0x1e,0x0c) #
        self.writeReg(0x33,0x1e,0x08) #
        self.writeReg(0x33,0x1e,0x00) #
        self.writeReg(0x33,0x28,0x00) #
        self.writeReg(0x33,0x28,0x00) #
        self.writeReg(0x33,0x28,0x00) #
        self.writeReg(0x33,0x28,0x00) #
        self.writeReg(0x33,0x28,0x00) #
        self.writeReg(0x33,0x21,0xc2) #
        self.writeReg(0x33,0x21,0xe2) #
        self.writeReg(0x33,0x19,0x00) #
        self.writeReg(0x33,0x2c,0x30) #
        self.writeReg(0x33,0x2d,0x1b) #
        self.writeReg(0x33,0x2e,0x6f) #
        self.writeReg(0x33,0x2f,0xf6) #
        self.writeReg(0x33,0x2c,0x30) #
        self.writeReg(0x33,0x2d,0x0b) #
        self.writeReg(0x33,0x2f,0xf6) #
        self.writeReg(0x33,0x30,0xfa) #
        self.writeReg(0x33,0x2c,0x30) #
        self.writeReg(0x33,0x2d,0x03) #
        self.writeReg(0x33,0x31,0xff) #
        self.writeReg(0x33,0x32,0xf0) #
        self.writeReg(0x33,0x2c,0x30) #
        self.writeReg(0x33,0x2c,0x30) #
        self.writeReg(0x33,0x2d,0x03) #
        self.writeReg(0x33,0x34,0x6f) #
        self.writeReg(0x33,0x35,0xf0) #
        self.writeReg(0x33,0x2c,0x30) #
        self.writeReg(0x33,0x2d,0x01) #
        self.writeReg(0x33,0x35,0xf0) #
        self.writeReg(0x33,0x36,0x00) #
        self.writeReg(0x33,0x37,0x00) #
        self.writeReg(0x33,0x38,0x10) #
        self.writeReg(0x33,0x2d,0x00) #
        self.writeReg(0x34,0xff,0x40) #
        self.writeReg(0x34,0xff,0xc0) #
        self.writeReg(0x34,0xff,0xc0) #
        self.writeReg(0x34,0xff,0xe0) #
        self.writeReg(0x34,0xde,0x00) #
        self.writeReg(0x34,0xdf,0x00) #
        self.writeReg(0x34,0xde,0x00) #
        self.writeReg(0x34,0xd8,0x00) #
        self.writeReg(0x34,0xe6,0x00) #
        self.writeReg(0x34,0xe6,0x00) #
        self.writeReg(0x34,0xe6,0x00) #
        self.writeReg(0x34,0xe6,0x00) #
        self.writeReg(0x34,0xe5,0x10) #
        self.writeReg(0x34,0xe5,0x30) #
        self.writeReg(0x34,0xe5,0x34) #
        self.writeReg(0x34,0xe5,0x3c) #
        self.writeReg(0x34,0xe5,0x3d) #
        self.writeReg(0x34,0xe5,0x3f) #
        self.writeReg(0x34,0xe5,0x7f) #
        self.writeReg(0x34,0xe5,0xff) #
        self.writeReg(0x34,0xff,0xe4) #
        self.writeReg(0x34,0xff,0xec) #
        self.writeReg(0x34,0xe6,0x00) #
        self.writeReg(0x34,0xe6,0x00) #
        self.writeReg(0x34,0xff,0xec) #
        self.writeReg(0x34,0xff,0xec) #
        self.writeReg(0x34,0x05,0x00) #
        self.writeReg(0x34,0x06,0x00) #
        self.writeReg(0x34,0x07,0x00) #
        self.writeReg(0x34,0x0d,0x00) #
        self.writeReg(0x34,0x0e,0x00) #
        self.writeReg(0x34,0x0e,0x00) #
        self.writeReg(0x34,0x0f,0x00) #
        self.writeReg(0x34,0x0e,0x00) #
        self.writeReg(0x34,0x0f,0x40) #
        self.writeReg(0x34,0x0e,0x00) #
        self.writeReg(0x34,0x0f,0x60) #
        self.writeReg(0x34,0x0e,0x00) #
        self.writeReg(0x34,0x0f,0x70) #
        self.writeReg(0x34,0x0e,0x40) #
        self.writeReg(0x34,0x0f,0x74) #
        self.writeReg(0x34,0x0e,0x40) #
        self.writeReg(0x34,0x0f,0x76) #
        self.writeReg(0x34,0x0d,0x00) #
        self.writeReg(0x34,0x0f,0x77) #
        self.writeReg(0x34,0x0d,0x00) #
        self.writeReg(0x34,0x10,0x80) #
        self.writeReg(0x34,0x0d,0x04) #
        self.writeReg(0x34,0x10,0x80) #
        self.writeReg(0x34,0x0d,0x04) #
        self.writeReg(0x34,0x10,0xa0) #
        self.writeReg(0x34,0x0d,0x14) #
        self.writeReg(0x34,0x10,0xb0) #
        self.writeReg(0x34,0x0d,0x34) #
        self.writeReg(0x34,0x10,0xb8) #
        self.writeReg(0x34,0x0d,0x34) #
        self.writeReg(0x34,0x10,0xbc) #
        self.writeReg(0x34,0x52,0x4f) #
        self.writeReg(0x34,0x52,0x4f) #
        self.writeReg(0x34,0x53,0xab) #
        self.writeReg(0x34,0x53,0xab) #
        self.writeReg(0x34,0x53,0xab) #
        self.writeReg(0x34,0x53,0xaa) #
        self.writeReg(0x34,0x52,0x4f) #
        self.writeReg(0x34,0x52,0x4f) #
        self.writeReg(0x34,0x52,0x4f) #
        self.writeReg(0x34,0x52,0x4f) #
        self.writeReg(0x34,0x54,0x82) #
        self.writeReg(0x34,0x54,0x88) #
        self.writeReg(0x34,0x55,0x84) #
        self.writeReg(0x34,0x55,0x88) #
        self.writeReg(0x34,0x56,0x00) #
        self.writeReg(0x34,0x56,0x00) #
        self.writeReg(0x34,0x56,0x00) #
        self.writeReg(0x34,0x4f,0x80) #
        self.writeReg(0x34,0x4f,0xc0) #
        self.writeReg(0x34,0x70,0x01) #
        self.writeReg(0x34,0x71,0x5e) #
        self.writeReg(0x34,0x72,0x64) #
        self.writeReg(0x34,0x73,0x64) #
        self.writeReg(0x34,0x74,0x40) #
        self.writeReg(0x34,0x74,0x40) #
        self.writeReg(0x34,0x75,0x04) #
        self.writeReg(0x34,0x76,0x00) #
        self.writeReg(0x34,0x77,0x03) #
        self.writeReg(0x34,0x78,0xe8) #
        self.writeReg(0x34,0x74,0x40) #
        self.writeReg(0x34,0x76,0x00) #
        self.writeReg(0x34,0x48,0x00) #
        self.writeReg(0x34,0x48,0x00) #
        self.writeReg(0x34,0x48,0x00) #
        self.writeReg(0x34,0x48,0x00) #
        self.writeReg(0x34,0x48,0x00) #
        self.writeReg(0x34,0x48,0x00) #
        self.writeReg(0x34,0x49,0x00) #
        self.writeReg(0x34,0x49,0x02) #
        self.writeReg(0x34,0x49,0x02) #
        self.writeReg(0x34,0x49,0x0a) #
        self.writeReg(0x34,0x49,0x0a) #
        self.writeReg(0x34,0x49,0x0a) #
        self.writeReg(0x34,0x46,0x05) #
        self.writeReg(0x34,0x47,0xff) #
        self.writeReg(0x34,0x4f,0xc0) #
        self.writeReg(0x34,0x4f,0xc0) #
        self.writeReg(0x34,0x50,0x00) #
        self.writeReg(0x34,0x64,0x30) #
        self.writeReg(0x34,0x63,0x00) #
        self.writeReg(0x34,0x63,0x00) #
        self.writeReg(0x34,0x63,0x00) #
        self.writeReg(0x34,0x64,0x30) #
        self.writeReg(0x34,0x80,0x00) #
        self.writeReg(0x34,0x82,0x00) #
        self.writeReg(0x34,0x83,0xc8) #
        self.writeReg(0x34,0x88,0x8f) #
        self.writeReg(0x34,0x88,0xcf) #
        self.writeReg(0x34,0x88,0xcf) #
        self.writeReg(0x34,0x88,0xcf) #
        self.writeReg(0x34,0x82,0x00) #
        self.writeReg(0x34,0x82,0x00) #
        self.writeReg(0x34,0x88,0xcf) #
        self.writeReg(0x34,0x8a,0x50) #
        self.writeReg(0x34,0x88,0xcf) #
        self.writeReg(0x34,0x8b,0x11) #
        self.writeReg(0x34,0x88,0xcf) #
        self.writeReg(0x34,0x8b,0x11) #
        self.writeReg(0x34,0x88,0xcf) #
        self.writeReg(0x34,0x8e,0x32) #
        self.writeReg(0x34,0x8f,0x00) #
        self.writeReg(0x34,0x8c,0x28) #
        self.writeReg(0x34,0x89,0x0f) #
        self.writeReg(0x34,0x95,0x00) #
        self.writeReg(0x34,0x95,0x00) #
        self.writeReg(0x34,0x95,0x00) #
        self.writeReg(0x34,0x95,0x00) #
        self.writeReg(0x34,0x97,0x12) #
        self.writeReg(0x34,0x97,0x92) #
        self.writeReg(0x34,0x97,0x92) #
        self.writeReg(0x34,0x97,0x92) #
        self.writeReg(0x34,0x97,0x92) #
        self.writeReg(0x34,0x97,0x9a) #
        self.writeReg(0x34,0xb6,0x40) #
        self.writeReg(0x34,0x97,0x9a) #
        self.writeReg(0x34,0x97,0x9a) #
        self.writeReg(0x34,0xb5,0x00) #
        self.writeReg(0x34,0xae,0x80) #
        self.writeReg(0x34,0xaa,0x2a) #
        self.writeReg(0x34,0xab,0xf8) #
        self.writeReg(0x34,0xaf,0x00) #
        self.writeReg(0x34,0xac,0x00) #
        self.writeReg(0x34,0xad,0x64) #
        self.writeReg(0x34,0xb6,0x40) #
        self.writeReg(0x34,0xb0,0x00) #
        self.writeReg(0x34,0xb1,0x00) #
        self.writeReg(0x34,0xb6,0x40) #
        self.writeReg(0x34,0xb2,0x00) #
        self.writeReg(0x34,0xb3,0x00) #
        self.writeReg(0x34,0x9a,0x1e) #
        self.writeReg(0x34,0xa4,0xff) #
        self.writeReg(0x34,0xa5,0xff) #
        self.writeReg(0x34,0xa7,0x00) #
        self.writeReg(0x34,0xa8,0x00) #
        self.writeReg(0x34,0xa9,0x07) #
        self.writeReg(0x34,0xa6,0x00) #
        self.writeReg(0x34,0x9d,0x00) #
        self.writeReg(0x34,0x9e,0x00) #
        self.writeReg(0x34,0x9f,0xc8) #
        self.writeReg(0x34,0xa2,0x00) #
        self.writeReg(0x34,0xa3,0x00) #
        self.writeReg(0x34,0x9b,0x00) #
        self.writeReg(0x34,0xa0,0x00) #
        self.writeReg(0x34,0xa1,0x08) #
        self.writeReg(0x34,0x9c,0x00) #
        self.writeReg(0x34,0xc6,0x90) #
        self.writeReg(0x34,0xc6,0x98) #
        self.writeReg(0x34,0xc6,0x98) #
        self.writeReg(0x34,0xc8,0x20) #
        self.writeReg(0x34,0xc6,0x98) #
        self.writeReg(0x34,0xc6,0x98) #
        self.writeReg(0x34,0xc6,0x18) #
        self.writeReg(0x34,0xc9,0x0e) #
        self.writeReg(0x34,0xc9,0x0e) #
        self.writeReg(0x34,0xc9,0x1e) #
        self.writeReg(0x34,0xc9,0x1a) #
        self.writeReg(0x34,0xc9,0x18) #
        self.writeReg(0x34,0xc9,0x18) #
        self.writeReg(0x34,0xc9,0x18) #
        self.writeReg(0x34,0xca,0x20) #
        self.writeReg(0x34,0xca,0x30) #
        self.writeReg(0x34,0xca,0x38) #
        self.writeReg(0x34,0xca,0x3c) #
        self.writeReg(0x34,0xd2,0x50) #
        self.writeReg(0x34,0xd2,0x58) #
        self.writeReg(0x34,0xd2,0x58) #
        self.writeReg(0x34,0xd2,0x58) #
        self.writeReg(0x34,0xd3,0x20) #
        self.writeReg(0x34,0xd8,0x40) #
        self.writeReg(0x34,0xd8,0x60) #
        self.writeReg(0x34,0x14,0x10) #
        self.writeReg(0x34,0x13,0x07) #
        self.writeReg(0x34,0x13,0x07) #
        self.writeReg(0x34,0x14,0x10) #
        self.writeReg(0x34,0x14,0x10) #
        self.writeReg(0x34,0x17,0x20) #
        self.writeReg(0x34,0x17,0x30) #
        self.writeReg(0x34,0x14,0x10) #
        self.writeReg(0x34,0x1b,0x00) #
        self.writeReg(0x34,0x17,0x30) #
        self.writeReg(0x34,0x17,0x30) #
        self.writeReg(0x34,0x19,0x00) #
        self.writeReg(0x34,0x19,0x00) #
        self.writeReg(0x34,0x1b,0x00) #
        self.writeReg(0x34,0x1b,0x00) #
        self.writeReg(0x34,0x1c,0x02) #
        self.writeReg(0x34,0x1e,0x00) #
        self.writeReg(0x34,0x1c,0x00) #
        self.writeReg(0x34,0x1c,0x01) #
        self.writeReg(0x34,0x1f,0x10) #
        self.writeReg(0x34,0x1e,0x00) #
        self.writeReg(0x34,0x1e,0x08) #
        self.writeReg(0x34,0x1e,0x08) #
        self.writeReg(0x34,0x1e,0x0c) #
        self.writeReg(0x34,0x1e,0x08) #
        self.writeReg(0x34,0x1e,0x00) #
        self.writeReg(0x34,0x28,0x00) #
        self.writeReg(0x34,0x28,0x00) #
        self.writeReg(0x34,0x28,0x00) #
        self.writeReg(0x34,0x28,0x00) #
        self.writeReg(0x34,0x28,0x00) #
        self.writeReg(0x34,0x21,0xc2) #
        self.writeReg(0x34,0x21,0xe2) #
        self.writeReg(0x34,0x19,0x00) #
        self.writeReg(0x34,0x2c,0x30) #
        self.writeReg(0x34,0x2d,0x1b) #
        self.writeReg(0x34,0x2e,0x6f) #
        self.writeReg(0x34,0x2f,0xf6) #
        self.writeReg(0x34,0x2c,0x30) #
        self.writeReg(0x34,0x2d,0x0b) #
        self.writeReg(0x34,0x2f,0xf6) #
        self.writeReg(0x34,0x30,0xfa) #
        self.writeReg(0x34,0x2c,0x30) #
        self.writeReg(0x34,0x2d,0x03) #
        self.writeReg(0x34,0x31,0xff) #
        self.writeReg(0x34,0x32,0xf0) #
        self.writeReg(0x34,0x2c,0x30) #
        self.writeReg(0x34,0x2c,0x30) #
        self.writeReg(0x34,0x2d,0x03) #
        self.writeReg(0x34,0x34,0x6f) #
        self.writeReg(0x34,0x35,0xf0) #
        self.writeReg(0x34,0x2c,0x30) #
        self.writeReg(0x34,0x2d,0x01) #
        self.writeReg(0x34,0x35,0xf0) #
        self.writeReg(0x34,0x36,0x00) #
        self.writeReg(0x34,0x37,0x00) #
        self.writeReg(0x34,0x38,0x10) #
        self.writeReg(0x34,0x2d,0x00) #
        self.writeReg(0x35,0xff,0x40) #
        self.writeReg(0x35,0xff,0xc0) #
        self.writeReg(0x35,0xff,0xc0) #
        self.writeReg(0x35,0xff,0xe0) #
        self.writeReg(0x35,0xde,0x00) #
        self.writeReg(0x35,0xdf,0x00) #
        self.writeReg(0x35,0xde,0x00) #
        self.writeReg(0x35,0xd8,0x00) #
        self.writeReg(0x35,0xe6,0x00) #
        self.writeReg(0x35,0xe6,0x00) #
        self.writeReg(0x35,0xe6,0x00) #
        self.writeReg(0x35,0xe6,0x00) #
        self.writeReg(0x35,0xe5,0x10) #
        self.writeReg(0x35,0xe5,0x30) #
        self.writeReg(0x35,0xe5,0x34) #
        self.writeReg(0x35,0xe5,0x3c) #
        self.writeReg(0x35,0xe5,0x3d) #
        self.writeReg(0x35,0xe5,0x3f) #
        self.writeReg(0x35,0xe5,0x7f) #
        self.writeReg(0x35,0xe5,0xff) #
        self.writeReg(0x35,0xff,0xe4) #
        self.writeReg(0x35,0xff,0xec) #
        self.writeReg(0x35,0xe6,0x00) #
        self.writeReg(0x35,0xe6,0x00) #
        self.writeReg(0x35,0xff,0xec) #
        self.writeReg(0x35,0xff,0xec) #
        self.writeReg(0x35,0x05,0x00) #
        self.writeReg(0x35,0x06,0x00) #
        self.writeReg(0x35,0x07,0x00) #
        self.writeReg(0x35,0x0d,0x00) #
        self.writeReg(0x35,0x0e,0x00) #
        self.writeReg(0x35,0x0e,0x00) #
        self.writeReg(0x35,0x0f,0x00) #
        self.writeReg(0x35,0x0e,0x00) #
        self.writeReg(0x35,0x0f,0x40) #
        self.writeReg(0x35,0x0e,0x00) #
        self.writeReg(0x35,0x0f,0x60) #
        self.writeReg(0x35,0x0e,0x00) #
        self.writeReg(0x35,0x0f,0x70) #
        self.writeReg(0x35,0x0e,0x40) #
        self.writeReg(0x35,0x0f,0x74) #
        self.writeReg(0x35,0x0e,0x40) #
        self.writeReg(0x35,0x0f,0x76) #
        self.writeReg(0x35,0x0d,0x00) #
        self.writeReg(0x35,0x0f,0x77) #
        self.writeReg(0x35,0x0d,0x00) #
        self.writeReg(0x35,0x10,0x80) #
        self.writeReg(0x35,0x0d,0x04) #
        self.writeReg(0x35,0x10,0x80) #
        self.writeReg(0x35,0x0d,0x04) #
        self.writeReg(0x35,0x10,0xa0) #
        self.writeReg(0x35,0x0d,0x14) #
        self.writeReg(0x35,0x10,0xb0) #
        self.writeReg(0x35,0x0d,0x34) #
        self.writeReg(0x35,0x10,0xb8) #
        self.writeReg(0x35,0x0d,0x34) #
        self.writeReg(0x35,0x10,0xbc) #
        self.writeReg(0x35,0x52,0x4f) #
        self.writeReg(0x35,0x52,0x4f) #
        self.writeReg(0x35,0x53,0xab) #
        self.writeReg(0x35,0x53,0xab) #
        self.writeReg(0x35,0x53,0xab) #
        self.writeReg(0x35,0x53,0xaa) #
        self.writeReg(0x35,0x52,0x4f) #
        self.writeReg(0x35,0x52,0x4f) #
        self.writeReg(0x35,0x52,0x4f) #
        self.writeReg(0x35,0x52,0x4f) #
        self.writeReg(0x35,0x54,0x82) #
        self.writeReg(0x35,0x54,0x88) #
        self.writeReg(0x35,0x55,0x84) #
        self.writeReg(0x35,0x55,0x88) #
        self.writeReg(0x35,0x56,0x00) #
        self.writeReg(0x35,0x56,0x00) #
        self.writeReg(0x35,0x56,0x00) #
        self.writeReg(0x35,0x4f,0x80) #
        self.writeReg(0x35,0x4f,0xc0) #
        self.writeReg(0x35,0x70,0x01) #
        self.writeReg(0x35,0x71,0x5e) #
        self.writeReg(0x35,0x72,0x64) #
        self.writeReg(0x35,0x73,0x64) #
        self.writeReg(0x35,0x74,0x40) #
        self.writeReg(0x35,0x74,0x40) #
        self.writeReg(0x35,0x75,0x04) #
        self.writeReg(0x35,0x76,0x00) #
        self.writeReg(0x35,0x77,0x03) #
        self.writeReg(0x35,0x78,0xe8) #
        self.writeReg(0x35,0x74,0x40) #
        self.writeReg(0x35,0x76,0x00) #
        self.writeReg(0x35,0x48,0x00) #
        self.writeReg(0x35,0x48,0x00) #
        self.writeReg(0x35,0x48,0x00) #
        self.writeReg(0x35,0x48,0x00) #
        self.writeReg(0x35,0x48,0x00) #
        self.writeReg(0x35,0x48,0x00) #
        self.writeReg(0x35,0x49,0x00) #
        self.writeReg(0x35,0x49,0x02) #
        self.writeReg(0x35,0x49,0x02) #
        self.writeReg(0x35,0x49,0x0a) #
        self.writeReg(0x35,0x49,0x0a) #
        self.writeReg(0x35,0x49,0x0a) #
        self.writeReg(0x35,0x46,0x05) #
        self.writeReg(0x35,0x47,0xff) #
        self.writeReg(0x35,0x4f,0xc0) #
        self.writeReg(0x35,0x4f,0xc0) #
        self.writeReg(0x35,0x50,0x00) #
        self.writeReg(0x35,0x64,0x30) #
        self.writeReg(0x35,0x63,0x00) #
        self.writeReg(0x35,0x63,0x00) #
        self.writeReg(0x35,0x63,0x00) #
        self.writeReg(0x35,0x64,0x30) #
        self.writeReg(0x35,0x80,0x00) #
        self.writeReg(0x35,0x82,0x00) #
        self.writeReg(0x35,0x83,0xc8) #
        self.writeReg(0x35,0x88,0x8f) #
        self.writeReg(0x35,0x88,0xcf) #
        self.writeReg(0x35,0x88,0xcf) #
        self.writeReg(0x35,0x88,0xcf) #
        self.writeReg(0x35,0x82,0x00) #
        self.writeReg(0x35,0x82,0x00) #
        self.writeReg(0x35,0x88,0xcf) #
        self.writeReg(0x35,0x8a,0x50) #
        self.writeReg(0x35,0x88,0xcf) #
        self.writeReg(0x35,0x8b,0x11) #
        self.writeReg(0x35,0x88,0xcf) #
        self.writeReg(0x35,0x8b,0x11) #
        self.writeReg(0x35,0x88,0xcf) #
        self.writeReg(0x35,0x8e,0x32) #
        self.writeReg(0x35,0x8f,0x00) #
        self.writeReg(0x35,0x8c,0x28) #
        self.writeReg(0x35,0x89,0x0f) #
        self.writeReg(0x35,0x95,0x00) #
        self.writeReg(0x35,0x95,0x00) #
        self.writeReg(0x35,0x95,0x00) #
        self.writeReg(0x35,0x95,0x00) #
        self.writeReg(0x35,0x97,0x12) #
        self.writeReg(0x35,0x97,0x92) #
        self.writeReg(0x35,0x97,0x92) #
        self.writeReg(0x35,0x97,0x92) #
        self.writeReg(0x35,0x97,0x92) #
        self.writeReg(0x35,0x97,0x9a) #
        self.writeReg(0x35,0xb6,0x40) #
        self.writeReg(0x35,0x97,0x9a) #
        self.writeReg(0x35,0x97,0x9a) #
        self.writeReg(0x35,0xb5,0x00) #
        self.writeReg(0x35,0xae,0x80) #
        self.writeReg(0x35,0xaa,0x2a) #
        self.writeReg(0x35,0xab,0xf8) #
        self.writeReg(0x35,0xaf,0x00) #
        self.writeReg(0x35,0xac,0x00) #
        self.writeReg(0x35,0xad,0x64) #
        self.writeReg(0x35,0xb6,0x40) #
        self.writeReg(0x35,0xb0,0x00) #
        self.writeReg(0x35,0xb1,0x00) #
        self.writeReg(0x35,0xb6,0x40) #
        self.writeReg(0x35,0xb2,0x00) #
        self.writeReg(0x35,0xb3,0x00) #
        self.writeReg(0x35,0x9a,0x1e) #
        self.writeReg(0x35,0xa4,0xff) #
        self.writeReg(0x35,0xa5,0xff) #
        self.writeReg(0x35,0xa7,0x00) #
        self.writeReg(0x35,0xa8,0x00) #
        self.writeReg(0x35,0xa9,0x07) #
        self.writeReg(0x35,0xa6,0x00) #
        self.writeReg(0x35,0x9d,0x00) #
        self.writeReg(0x35,0x9e,0x00) #
        self.writeReg(0x35,0x9f,0xc8) #
        self.writeReg(0x35,0xa2,0x00) #
        self.writeReg(0x35,0xa3,0x00) #
        self.writeReg(0x35,0x9b,0x00) #
        self.writeReg(0x35,0xa0,0x00) #
        self.writeReg(0x35,0xa1,0x08) #
        self.writeReg(0x35,0x9c,0x00) #
        self.writeReg(0x35,0xc6,0x90) #
        self.writeReg(0x35,0xc6,0x98) #
        self.writeReg(0x35,0xc6,0x98) #
        self.writeReg(0x35,0xc8,0x20) #
        self.writeReg(0x35,0xc6,0x98) #
        self.writeReg(0x35,0xc6,0x98) #
        self.writeReg(0x35,0xc6,0x18) #
        self.writeReg(0x35,0xc9,0x0e) #
        self.writeReg(0x35,0xc9,0x0e) #
        self.writeReg(0x35,0xc9,0x1e) #
        self.writeReg(0x35,0xc9,0x1a) #
        self.writeReg(0x35,0xc9,0x18) #
        self.writeReg(0x35,0xc9,0x18) #
        self.writeReg(0x35,0xc9,0x18) #
        self.writeReg(0x35,0xca,0x20) #
        self.writeReg(0x35,0xca,0x30) #
        self.writeReg(0x35,0xca,0x38) #
        self.writeReg(0x35,0xca,0x3c) #
        self.writeReg(0x35,0xd2,0x50) #
        self.writeReg(0x35,0xd2,0x58) #
        self.writeReg(0x35,0xd2,0x58) #
        self.writeReg(0x35,0xd2,0x58) #
        self.writeReg(0x35,0xd3,0x20) #
        self.writeReg(0x35,0xd8,0x40) #
        self.writeReg(0x35,0xd8,0x60) #
        self.writeReg(0x35,0x14,0x10) #
        self.writeReg(0x35,0x13,0x07) #
        self.writeReg(0x35,0x13,0x07) #
        self.writeReg(0x35,0x14,0x10) #
        self.writeReg(0x35,0x14,0x10) #
        self.writeReg(0x35,0x17,0x20) #
        self.writeReg(0x35,0x17,0x30) #
        self.writeReg(0x35,0x14,0x10) #
        self.writeReg(0x35,0x1b,0x00) #
        self.writeReg(0x35,0x17,0x30) #
        self.writeReg(0x35,0x17,0x30) #
        self.writeReg(0x35,0x19,0x00) #
        self.writeReg(0x35,0x19,0x00) #
        self.writeReg(0x35,0x1b,0x00) #
        self.writeReg(0x35,0x1b,0x00) #
        self.writeReg(0x35,0x1c,0x02) #
        self.writeReg(0x35,0x1e,0x00) #
        self.writeReg(0x35,0x1c,0x00) #
        self.writeReg(0x35,0x1c,0x01) #
        self.writeReg(0x35,0x1f,0x10) #
        self.writeReg(0x35,0x1e,0x00) #
        self.writeReg(0x35,0x1e,0x08) #
        self.writeReg(0x35,0x1e,0x08) #
        self.writeReg(0x35,0x1e,0x0c) #
        self.writeReg(0x35,0x1e,0x08) #
        self.writeReg(0x35,0x1e,0x00) #
        self.writeReg(0x35,0x28,0x00) #
        self.writeReg(0x35,0x28,0x00) #
        self.writeReg(0x35,0x28,0x00) #
        self.writeReg(0x35,0x28,0x00) #
        self.writeReg(0x35,0x28,0x00) #
        self.writeReg(0x35,0x21,0xc2) #
        self.writeReg(0x35,0x21,0xe2) #
        self.writeReg(0x35,0x19,0x00) #
        self.writeReg(0x35,0x2c,0x30) #
        self.writeReg(0x35,0x2d,0x1b) #
        self.writeReg(0x35,0x2e,0x6f) #
        self.writeReg(0x35,0x2f,0xf6) #
        self.writeReg(0x35,0x2c,0x30) #
        self.writeReg(0x35,0x2d,0x0b) #
        self.writeReg(0x35,0x2f,0xf6) #
        self.writeReg(0x35,0x30,0xfa) #
        self.writeReg(0x35,0x2c,0x30) #
        self.writeReg(0x35,0x2d,0x03) #
        self.writeReg(0x35,0x31,0xff) #
        self.writeReg(0x35,0x32,0xf0) #
        self.writeReg(0x35,0x2c,0x30) #
        self.writeReg(0x35,0x2c,0x30) #
        self.writeReg(0x35,0x2d,0x03) #
        self.writeReg(0x35,0x34,0x6f) #
        self.writeReg(0x35,0x35,0xf0) #
        self.writeReg(0x35,0x2c,0x30) #
        self.writeReg(0x35,0x2d,0x01) #
        self.writeReg(0x35,0x35,0xf0) #
        self.writeReg(0x35,0x36,0x00) #
        self.writeReg(0x35,0x37,0x00) #
        self.writeReg(0x35,0x38,0x10) #
        self.writeReg(0x35,0x2d,0x00) #

    def func_03_50_only_pipe_up_eq_set(self):
        print("Cfg func_03_50_only_pipe_up_eq_set...")
        self.writeReg(0x09,0x09,0x00) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0xb5,0x80) #
        self.writeReg(0x31,0xb6,0x40) #
        self.writeReg(0x31,0xae,0x80) #
        self.writeReg(0x31,0xaa,0x2a) #
        self.writeReg(0x31,0xab,0xf8) #
        self.writeReg(0x31,0xaf,0x00) #
        self.writeReg(0x31,0xac,0x00) #
        self.writeReg(0x31,0xad,0x64) #
        self.writeReg(0x31,0xb6,0x60) #
        self.writeReg(0x31,0xb0,0x0f) #
        self.writeReg(0x31,0xb1,0xa0) #
        self.writeReg(0x31,0xb6,0x70) #
        self.writeReg(0x31,0xb2,0x00) #
        self.writeReg(0x31,0xb3,0x80) #
        self.writeReg(0x31,0x9a,0x1e) #
        self.writeReg(0x31,0x9b,0x10) #
        self.writeReg(0x31,0x9c,0x00) #
        self.writeReg(0x31,0x9d,0x00) #
        self.writeReg(0x31,0x9e,0xff) #
        self.writeReg(0x31,0x9f,0x64) #
        self.writeReg(0x31,0xa4,0xff) #
        self.writeReg(0x31,0xa5,0xfa) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0xa6,0x00) #
        self.writeReg(0x31,0xa7,0x00) #
        self.writeReg(0x31,0xa8,0x00) #
        self.writeReg(0x31,0xa9,0x02) #
        self.writeReg(0x31,0xa2,0x00) #
        self.writeReg(0x31,0xa3,0x02) #
        self.writeReg(0x31,0xa0,0x00) #
        self.writeReg(0x31,0xa1,0x80) #

    def func_04_00_HUB1p1_UP_PC_CONNCET(self):
        print("Cfg func_04_00_HUB1p1_UP_PC_CONNCET...")
        self.writeReg(0x28,0x10,0xDC) #i2c_dpport_count_50us
        self.writeReg(0x28,0x11,0x05) #i2c_dpport_count_50us
        self.writeReg(0x28,0x12,0x70) #i2c_dpport_count_200us
        self.writeReg(0x28,0x13,0x17) #i2c_dpport_count_200us
        self.writeReg(0x28,0x14,0xE0) #i2c_dpport_cnt_reset_complete
        self.writeReg(0x28,0x15,0x93) #i2c_dpport_cnt_reset_complete
        self.writeReg(0x28,0x16,0x04) #i2c_dpport_cnt_reset_complete
        self.writeReg(0x28,0x0A,0x80) #i2c_hub_ctrl_count_1ms
        self.writeReg(0x28,0x0B,0x8C) #i2c_hub_ctrl_count_1ms
        self.writeReg(0x28,0x01,0xC0) #i2c_hub11_reset_timer
        self.writeReg(0x28,0x02,0xD4) #i2c_hub11_reset_timer
        self.writeReg(0x28,0x03,0x01) #i2c_hub11_reset_timer
        self.writeReg(0x28,0x04,0x80) #i2c_hub11_resume_timer
        self.writeReg(0x28,0x05,0xA9) #i2c_hub11_resume_timer
        self.writeReg(0x28,0x06,0x03) #i2c_hub11_resume_timer
        self.writeReg(0x28,0xE9,0x08) #i2c_hub1p1_port_reset_en
        self.writeReg(0x28,0x45,0x03) #i2c_up_force_fsmode
        self.writeReg(0x09,0x64,0x00) #hub_2_rstn
        self.writeReg(0x09,0x64,0x01) #remove hub_2_rstn

    def func_04_01_HUB2p0_UP_PC_CONNCET(self):
        print("Cfg func_04_01_HUB2p0_UP_PC_CONNCET...")
        self.writeReg(0x47,0x6C,0x2D) #UP_v2 rx_wrreq_cnt
        self.writeReg(0x4A,0x6C,0x2D) #DP3_v2 rx_wrreq_cnt
        self.writeReg(0x4B,0x6C,0x2D) #DP4_v2 rx_wrreq_cnt
        self.writeReg(0x28,0x10,0xDC) #i2c_dpport_count_50us
        self.writeReg(0x28,0x11,0x05) #i2c_dpport_count_50us
        self.writeReg(0x28,0x12,0x70) #i2c_dpport_count_200us
        self.writeReg(0x28,0x13,0x17) #i2c_dpport_count_200us
        self.writeReg(0x28,0x14,0x10) #i2c_dpport_cnt_reset_complete
        self.writeReg(0x28,0x15,0x09) #i2c_dpport_cnt_reset_complete
        self.writeReg(0x28,0x16,0x05) #i2c_dpport_cnt_reset_complete
        self.writeReg(0x28,0x17,0xC0) #i2c_dpport_resume_cntr
        self.writeReg(0x28,0x18,0x27) #i2c_dpport_resume_cntr
        self.writeReg(0x28,0x19,0x09) #i2c_dpport_resume_cntr
        self.writeReg(0x28,0x0A,0x80) #i2c_hub_ctrl_count_1ms
        self.writeReg(0x28,0x0B,0x8C) #i2c_hub_ctrl_count_1ms
        self.writeReg(0x28,0x01,0xC0) #i2c_hub11_reset_timer
        self.writeReg(0x28,0x02,0xD4) #i2c_hub11_reset_timer
        self.writeReg(0x28,0x03,0x01) #i2c_hub11_reset_timer
        self.writeReg(0x28,0x04,0x80) #i2c_hub11_resume_timer
        self.writeReg(0x28,0x05,0xA9) #i2c_hub11_resume_timer
        self.writeReg(0x28,0x06,0x03) #i2c_hub11_resume_timer
        self.writeReg(0x28,0xE9,0x08) #i2c_hub1p1_port_reset_en
        self.writeReg(0x28,0x45,0x01) #i2c_up_force_fsmode  hs_mode
        self.writeReg(0x09,0x00,0x08) #480m_domain_rst
        self.writeReg(0x09,0x00,0x00) #480m_domain_rst
        self.writeReg(0x09,0x64,0x00) #hub_2_rstn
        self.writeReg(0x09,0x64,0x01) #remove hub_2_rstn

    def func_04_02_HUB_SS_PC_CONNECT(self):
        print("Cfg func_04_02_HUB_SS_PC_CONNECT...")
        self.writeReg(0x37,0x63,0xBC) #UP  i2c_adv_hp_pending_timer
        self.writeReg(0x38,0x63,0xBC) #DP1 i2c_adv_hp_pending_timer
        self.writeReg(0x39,0x63,0xBC) #DP2 i2c_adv_hp_pending_timer
        self.writeReg(0x3A,0x63,0xBC) #DP3 i2c_adv_hp_pending_timer
        self.writeReg(0x3B,0x63,0xBC) #DP4 i2c_adv_hp_pending_timer
        self.writeReg(0x37,0x11,0x18) #UP  i2c_count_16_times
        self.writeReg(0x38,0x11,0x18) #DP1 i2c_count_16_times
        self.writeReg(0x39,0x11,0x18) #DP2 i2c_count_16_times
        self.writeReg(0x3A,0x11,0x18) #DP3 i2c_count_16_times
        self.writeReg(0x3B,0x11,0x18) #DP4 i2c_count_16_times
        self.writeReg(0x37,0x18,0x14) #UP  i2c_timeout_12ms
        self.writeReg(0x37,0x19,0x72) #UP  i2c_timeout_12ms
        self.writeReg(0x38,0x18,0x14) #DP1 i2c_timeout_12ms
        self.writeReg(0x38,0x19,0x72) #DP1 i2c_timeout_12ms
        self.writeReg(0x39,0x18,0x14) #DP2 i2c_timeout_12ms
        self.writeReg(0x39,0x19,0x72) #DP2 i2c_timeout_12ms
        self.writeReg(0x3A,0x18,0x14) #DP3 i2c_timeout_12ms
        self.writeReg(0x3A,0x19,0x72) #DP3 i2c_timeout_12ms
        self.writeReg(0x3B,0x18,0x14) #DP4 i2c_timeout_12ms
        self.writeReg(0x3B,0x19,0x72) #DP4 i2c_timeout_12ms
        self.writeReg(0x37,0x43,0xA0) #UP  u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x37,0x44,0x86) #UP  u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x37,0x45,0x01) #UP  u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x38,0x43,0xA0) #DP1 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x38,0x44,0x86) #DP1 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x38,0x45,0x01) #DP1 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x39,0x43,0xA0) #DP2 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x39,0x44,0x86) #DP2 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x39,0x45,0x01) #DP2 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x3A,0x43,0xA0) #DP3 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x3A,0x44,0x86) #DP3 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x3A,0x45,0x01) #DP3 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x3B,0x43,0xA0) #DP4 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x3B,0x44,0x86) #DP4 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x3B,0x45,0x01) #DP4 u3_exit_lp1_tx  i2c_count_80us_tx_pci
        self.writeReg(0x37,0x53,0x10) #UP  i2c_lfps_polling_tx_total_cnt
        self.writeReg(0x38,0x53,0x10) #DP1 i2c_lfps_polling_tx_total_cnt
        self.writeReg(0x39,0x53,0x10) #DP2 i2c_lfps_polling_tx_total_cnt
        self.writeReg(0x3A,0x53,0x10) #DP3 i2c_lfps_polling_tx_total_cnt
        self.writeReg(0x3B,0x53,0x10) #DP4 i2c_lfps_polling_tx_total_cnt
        self.writeReg(0x37,0x57,0x05) #UP  i2c_lfps_polling_tx_cnt_after_rx
        self.writeReg(0x38,0x57,0x05) #DP1 i2c_lfps_polling_tx_cnt_after_rx
        self.writeReg(0x39,0x57,0x05) #DP2 i2c_lfps_polling_tx_cnt_after_rx
        self.writeReg(0x3A,0x57,0x05) #DP3 i2c_lfps_polling_tx_cnt_after_rx
        self.writeReg(0x3B,0x57,0x05) #DP4 i2c_lfps_polling_tx_cnt_after_rx
        self.writeReg(0x37,0x88,0x01) #UP  i2c_compliance_mode_en
        self.writeReg(0x38,0x88,0x01) #DP1 i2c_compliance_mode_en
        self.writeReg(0x39,0x88,0x01) #DP2 i2c_compliance_mode_en
        self.writeReg(0x3A,0x88,0x01) #DP3 i2c_compliance_mode_en
        self.writeReg(0x3B,0x88,0x01) #DP4 i2c_compliance_mode_en
        self.writeReg(0x37,0x12,0xFF) #UP  i2c_tseq_cnt_times
        self.writeReg(0x37,0x13,0xFF) #UP  i2c_tseq_cnt_times
        self.writeReg(0x38,0x12,0xFF) #DP1 i2c_tseq_cnt_times
        self.writeReg(0x38,0x13,0xFF) #DP1 i2c_tseq_cnt_times
        self.writeReg(0x39,0x12,0xFF) #DP2 i2c_tseq_cnt_times
        self.writeReg(0x39,0x13,0xFF) #DP2 i2c_tseq_cnt_times
        self.writeReg(0x3A,0x12,0xFF) #DP3 i2c_tseq_cnt_times
        self.writeReg(0x3A,0x13,0xFF) #DP3 i2c_tseq_cnt_times
        self.writeReg(0x3B,0x12,0xFF) #DP4 i2c_tseq_cnt_times
        self.writeReg(0x3B,0x13,0xFF) #DP4 i2c_tseq_cnt_times
        self.writeReg(0x37,0x11,0x18) #UP  TS2_tx_count
        self.writeReg(0x38,0x11,0x18) #DP1 TS2_tx_count
        self.writeReg(0x39,0x11,0x18) #DP1 TS2_tx_count
        self.writeReg(0x3A,0x11,0x18) #DP1 TS2_tx_count
        self.writeReg(0x3B,0x11,0x18) #DP1 TS2_tx_count
        self.writeReg(0x38,0x1F,0x10) #DP1 i2c_count0_100ms  warm_rst
        self.writeReg(0x38,0x20,0x5E) #DP1 i2c_count0_100ms  warm_rst
        self.writeReg(0x38,0x21,0x5F) #DP1 i2c_count0_100ms  warm_rst
        self.writeReg(0x39,0x1F,0x10) #DP2 i2c_count0_100ms  warm_rst
        self.writeReg(0x39,0x20,0x5E) #DP2 i2c_count0_100ms  warm_rst
        self.writeReg(0x39,0x21,0x5F) #DP2 i2c_count0_100ms  warm_rst
        self.writeReg(0x3A,0x1F,0x10) #DP3 i2c_count0_100ms  warm_rst
        self.writeReg(0x3A,0x20,0x5E) #DP3 i2c_count0_100ms  warm_rst
        self.writeReg(0x3A,0x21,0x5F) #DP3 i2c_count0_100ms  warm_rst
        self.writeReg(0x3B,0x1F,0x10) #DP4 i2c_count0_100ms  warm_rst
        self.writeReg(0x3B,0x20,0x5E) #DP4 i2c_count0_100ms  warm_rst
        self.writeReg(0x3B,0x21,0x5F) #DP4 i2c_count0_100ms  warm_rst
        self.writeReg(0x37,0x07,0x23) #UP  SKP  35*8
        self.writeReg(0x37,0x03,0x71) #UP  i2c_pending_hp_timer  10us
        self.writeReg(0x37,0x04,0x02) #UP  i2c_pending_hp_timer
        self.writeReg(0x38,0x03,0x71) #DP1 i2c_pending_hp_timer  10us
        self.writeReg(0x38,0x04,0x02) #DP1 i2c_pending_hp_timer
        self.writeReg(0x39,0x03,0x71) #DP2 i2c_pending_hp_timer  10us
        self.writeReg(0x39,0x04,0x02) #DP2 i2c_pending_hp_timer
        self.writeReg(0x3A,0x03,0x71) #DP3 i2c_pending_hp_timer  10us
        self.writeReg(0x3A,0x04,0x02) #DP3 i2c_pending_hp_timer
        self.writeReg(0x3B,0x03,0x71) #DP4 i2c_pending_hp_timer  10us
        self.writeReg(0x3B,0x04,0x02) #DP4 i2c_pending_hp_timer
        self.writeReg(0x37,0x83,0x19) #UP  U1_Exit_lp1_rx  400ns
        self.writeReg(0x38,0x83,0x19) #DP1 U1_Exit_lp1_rx  400ns
        self.writeReg(0x39,0x83,0x19) #DP2 U1_Exit_lp1_rx  400ns
        self.writeReg(0x3A,0x83,0x19) #DP3 U1_Exit_lp1_rx  400ns
        self.writeReg(0x3B,0x83,0x19) #DP4 U1_Exit_lp1_rx  400ns
        self.writeReg(0x37,0x9B,0x41) #UP  U1_Exit_lp1_tx  1040ns
        self.writeReg(0x38,0x9B,0x41) #DP1 U1_Exit_lp1_tx  1040ns
        self.writeReg(0x39,0x9B,0x41) #DP2 U1_Exit_lp1_tx  1040ns
        self.writeReg(0x3A,0x9B,0x41) #DP3 U1_Exit_lp1_tx  1040ns
        self.writeReg(0x3B,0x9B,0x41) #DP4 U1_Exit_lp1_tx  1040ns
        self.writeReg(0x37,0x4C,0x19) #UP  U1_Exit_lp2_rx  400ns
        self.writeReg(0x38,0x4C,0x19) #DP1 U1_Exit_lp2_rx  400ns
        self.writeReg(0x39,0x4C,0x19) #DP2 U1_Exit_lp2_rx  400ns
        self.writeReg(0x3A,0x4C,0x19) #DP3 U1_Exit_lp2_rx  400ns
        self.writeReg(0x3B,0x4C,0x19) #DP4 U1_Exit_lp2_rx  400ns
        self.writeReg(0x37,0xA0,0x41) #UP  U1_Exit_lp2_tx  1040ns
        self.writeReg(0x38,0xA0,0x41) #DP1 U1_Exit_lp2_tx  1040ns
        self.writeReg(0x39,0xA0,0x41) #DP2 U1_Exit_lp2_tx  1040ns
        self.writeReg(0x3A,0xA0,0x41) #DP3 U1_Exit_lp2_tx  1040ns
        self.writeReg(0x3B,0xA0,0x41) #DP4 U1_Exit_lp2_tx  1040ns
        self.writeReg(0x37,0x4D,0x28) #UP  U2_Exit_lp1_rx  640ns
        self.writeReg(0x37,0x4E,0x00) #UP  U2_Exit_lp1_rx
        self.writeReg(0x38,0x4D,0x28) #DP1 U2_Exit_lp1_rx  640ns
        self.writeReg(0x38,0x4E,0x00) #DP1 U2_Exit_lp1_rx
        self.writeReg(0x39,0x4D,0x28) #DP2 U2_Exit_lp1_rx  640ns
        self.writeReg(0x39,0x4E,0x00) #DP2 U2_Exit_lp1_rx
        self.writeReg(0x3A,0x4D,0x28) #DP3 U2_Exit_lp1_rx  640ns
        self.writeReg(0x3A,0x4E,0x00) #DP3 U2_Exit_lp1_rx
        self.writeReg(0x3B,0x4D,0x28) #DP4 U2_Exit_lp1_rx  640ns
        self.writeReg(0x3B,0x4E,0x00) #DP4 U2_Exit_lp1_rx
        self.writeReg(0x37,0x9D,0x10) #UP  U2_Exit_lp1_tx  160 us
        self.writeReg(0x37,0x9E,0x27) #UP  U2_Exit_lp1_tx
        self.writeReg(0x38,0x9D,0x10) #DP1 U2_Exit_lp1_tx  160 us
        self.writeReg(0x38,0x9E,0x27) #DP1 U2_Exit_lp1_tx
        self.writeReg(0x39,0x9D,0x10) #DP2 U2_Exit_lp1_tx  160 us
        self.writeReg(0x39,0x9E,0x27) #DP2 U2_Exit_lp1_tx
        self.writeReg(0x3A,0x9D,0x10) #DP3 U2_Exit_lp1_tx  160 us
        self.writeReg(0x3A,0x9E,0x27) #DP3 U2_Exit_lp1_tx
        self.writeReg(0x3B,0x9D,0x10) #DP4 U2_Exit_lp1_tx  160 us
        self.writeReg(0x3B,0x9E,0x27) #DP4 U2_Exit_lp1_tx
        self.writeReg(0x37,0x9F,0x26) #UP  U2_Exit_lp2_rx  600ns
        self.writeReg(0x38,0x9F,0x26) #DP1 U2_Exit_lp2_rx  600ns
        self.writeReg(0x39,0x9F,0x26) #DP2 U2_Exit_lp2_rx  600ns
        self.writeReg(0x3A,0x9F,0x26) #DP3 U2_Exit_lp2_rx  600ns
        self.writeReg(0x3B,0x9F,0x26) #DP4 U2_Exit_lp2_rx  600ns
        self.writeReg(0x37,0xA2,0x34) #UP  U3_Exit_lp2_tx  2.9 ms
        self.writeReg(0x37,0xA3,0x1B) #UP  U3_Exit_lp2_tx
        self.writeReg(0x37,0xA4,0x01) #UP  U3_Exit_lp2_tx
        self.writeReg(0x38,0x43,0xA0) #DP1 U3_Exit_lp1_tx  4 ms
        self.writeReg(0x38,0x44,0x86) #DP1 U3_Exit_lp1_tx
        self.writeReg(0x38,0x45,0x01) #DP1 U3_Exit_lp1_tx
        self.writeReg(0x39,0x43,0xA0) #DP2 U3_Exit_lp1_tx  4 ms
        self.writeReg(0x39,0x44,0x86) #DP2 U3_Exit_lp1_tx
        self.writeReg(0x39,0x45,0x01) #DP2 U3_Exit_lp1_tx
        self.writeReg(0x3A,0x43,0xA0) #DP3 U3_Exit_lp1_tx  4 ms
        self.writeReg(0x3A,0x44,0x86) #DP3 U3_Exit_lp1_tx
        self.writeReg(0x3A,0x45,0x01) #DP3 U3_Exit_lp1_tx
        self.writeReg(0x3B,0x43,0xA0) #DP4 U3_Exit_lp1_tx  4 ms
        self.writeReg(0x3B,0x44,0x86) #DP4 U3_Exit_lp1_tx
        self.writeReg(0x3B,0x45,0x01) #DP4 U3_Exit_lp1_tx
        self.writeReg(0x38,0x35,0x10) #DP1 i2c_ping_chk_300ns  240ns
        self.writeReg(0x39,0x35,0x10) #DP2 i2c_ping_chk_300ns  240ns
        self.writeReg(0x3A,0x35,0x10) #DP3 i2c_ping_chk_300ns  240ns
        self.writeReg(0x3B,0x35,0x10) #DP4 i2c_ping_chk_300ns  240ns
        self.writeReg(0x30,0x3C,0x55) #DP*_c_connenct_en
        self.writeReg(0x36,0x88,0x10) #hub_name
        self.writeReg(0x36,0x89,0x03) #
        self.writeReg(0x36,0x8A,0x47) #
        self.writeReg(0x36,0x8B,0x00) #
        self.writeReg(0x36,0x8C,0x53) #
        self.writeReg(0x36,0x8D,0x00) #
        self.writeReg(0x36,0x8E,0x55) #
        self.writeReg(0x36,0x8F,0x00) #
        self.writeReg(0x36,0x90,0x31) #
        self.writeReg(0x36,0x91,0x00) #
        self.writeReg(0x36,0x92,0x30) #
        self.writeReg(0x36,0x93,0x00) #
        self.writeReg(0x36,0x94,0x30) #
        self.writeReg(0x36,0x95,0x00) #
        self.writeReg(0x36,0x96,0x31) #
        self.writeReg(0x36,0x97,0x00) #
        self.writeReg(0x36,0x1F,0xE0) #Self-powered
        self.writeReg(0x36,0x20,0x00) #bMaxPower
        self.writeReg(0x36,0x7D,0x32) #bPwrOn2PwrGood
        self.writeReg(0x36,0x7F,0x04) #bHubHdrDecLat
        self.writeReg(0x36,0x80,0x90) #wHubDelay
        self.writeReg(0x36,0x52,0xF0) #container ID
        self.writeReg(0x36,0x53,0x56) #container ID
        self.writeReg(0x36,0x54,0x4B) #container ID
        self.writeReg(0x36,0x55,0x9F) #container ID
        self.writeReg(0x36,0x56,0xF6) #container ID
        self.writeReg(0x36,0x57,0x1D) #container ID
        self.writeReg(0x36,0x58,0xE0) #container ID
        self.writeReg(0x36,0x59,0x11) #container ID
        self.writeReg(0x36,0x5A,0xAC) #container ID
        self.writeReg(0x36,0x5B,0x64) #container ID
        self.writeReg(0x36,0x5C,0x08) #container ID
        self.writeReg(0x36,0x5D,0x00) #container ID
        self.writeReg(0x36,0x5E,0x20) #container ID
        self.writeReg(0x36,0x5F,0x0C) #container ID
        self.writeReg(0x36,0x60,0x9A) #container ID
        self.writeReg(0x36,0x61,0x66) #container ID
        self.writeReg(0x09,0x64,0x01) #hub_ss_rstn
        self.writeReg(0x09,0x64,0x03) #remove hub_ss_rstn

    def func_04_05_HUB_SS_clk_gate_all(self):
        print("Cfg func_04_05_HUB_SS_clk_gate_all...")
        self.writeReg(0x32,0xF5,0x50) #
        self.writeReg(0x33,0xF5,0x50) #
        self.writeReg(0x34,0xF5,0x50) #
        self.writeReg(0x35,0xF5,0x50) #

    def func_04_06_HUB_SS_ana_gate_all(self):
        print("Cfg func_04_06_HUB_SS_ana_gate_all...")
        self.writeReg(0x32,0x0B,0xFF) #
        self.writeReg(0x32,0x0C,0xFF) #
        self.writeReg(0x33,0x0B,0xFF) #
        self.writeReg(0x33,0x0C,0xFF) #
        self.writeReg(0x34,0x0B,0xFF) #
        self.writeReg(0x34,0x0C,0xFF) #
        self.writeReg(0x35,0x0B,0xFF) #
        self.writeReg(0x35,0x0C,0xFF) #

    def func_04_07_HUB_u2_HS_ana_gate_all(self):
        print("Cfg func_04_07_HUB_u2_HS_ana_gate_all...")
        self.writeReg(0x0A,0x02,0x73) #
        self.writeReg(0x0A,0x08,0x30) #
        self.writeReg(0x0B,0x02,0x73) #
        self.writeReg(0x0B,0x08,0x30) #
        self.writeReg(0x0C,0x02,0x73) #
        self.writeReg(0x0C,0x08,0x30) #
        self.writeReg(0x0D,0x02,0x73) #
        self.writeReg(0x0D,0x08,0x30) #
        self.writeReg(0x0E,0x02,0x73) #
        self.writeReg(0x0E,0x08,0x30) #
        self.writeReg(0x09,0x50,0x09) #
        self.writeReg(0x09,0x51,0x09) #
        self.writeReg(0x09,0x52,0x01) #

    def func_04_08_all_pipe_disable_eq_start_ebuf_rst_auto(self):
        print("Cfg func_04_08_all_pipe_disable_eq_start_ebuf_rst_auto...")
        self.writeReg(0x31,0x97,0x23) #no eq adj auto,eq/cdr is default value
        self.writeReg(0x31,0xC9,0x8E) #ebuf rst man
        self.writeReg(0x32,0x97,0x23) #no eq adj auto,eq/cdr is default value
        self.writeReg(0x32,0xC9,0x8E) #ebuf rst man
        self.writeReg(0x33,0x97,0x23) #no eq adj auto,eq/cdr is default value
        self.writeReg(0x33,0xC9,0x8E) #ebuf rst man
        self.writeReg(0x34,0x97,0x23) #no eq adj auto,eq/cdr is default value
        self.writeReg(0x34,0xC9,0x8E) #ebuf rst man
        self.writeReg(0x35,0x97,0x23) #no eq adj auto,eq/cdr is default value
        self.writeReg(0x35,0xC9,0x8E) #ebuf rst man

    def func_04_09_all_pipe_enable_cdr_tracking_auto(self):
        print("Cfg func_04_09_all_pipe_enable_cdr_tracking_auto...")
        self.writeReg(0x31,0x74,0x20) #ss valid only lfps
        self.writeReg(0x31,0x76,0x80) #
        self.writeReg(0x31,0x77,0x00) #
        self.writeReg(0x31,0x78,0x00) #mini cnt = 0
        self.writeReg(0x32,0x74,0x20) #ss valid only lfps
        self.writeReg(0x32,0x76,0x80) #
        self.writeReg(0x32,0x77,0x00) #
        self.writeReg(0x32,0x78,0x00) #mini cnt = 0
        self.writeReg(0x33,0x74,0x20) #ss valid only lfps
        self.writeReg(0x33,0x76,0x80) #
        self.writeReg(0x33,0x77,0x00) #
        self.writeReg(0x33,0x78,0x00) #mini cnt = 0
        self.writeReg(0x34,0x74,0x20) #ss valid only lfps
        self.writeReg(0x34,0x76,0x80) #
        self.writeReg(0x34,0x77,0x00) #
        self.writeReg(0x34,0x78,0x00) #mini cnt = 0
        self.writeReg(0x35,0x74,0x20) #ss valid only lfps
        self.writeReg(0x35,0x76,0x80) #
        self.writeReg(0x35,0x77,0x00) #
        self.writeReg(0x35,0x78,0x00) #mini cnt = 0

    def func_04_10_write_EQ_ram(self):
        print("Cfg func_04_10_write_EQ_ram...")
        self.writeReg(0x09,0x05,0x05) #
        self.writeReg(0x15,0x00,0x01) #group 0
        self.writeReg(0x15,0x01,0xc0) #
        self.writeReg(0x15,0x02,0x43) #
        self.writeReg(0x15,0x03,0x3c) #
        self.writeReg(0x15,0x04,0x0a) #
        self.writeReg(0x15,0x05,0x00) #
        self.writeReg(0x15,0x06,0x80) #
        self.writeReg(0x15,0x07,0x00) #
        self.writeReg(0x15,0x08,0x68) #
        self.writeReg(0x15,0x09,0x00) #
        self.writeReg(0x15,0x0a,0x00) #
        self.writeReg(0x15,0x0b,0x01) #group 1
        self.writeReg(0x15,0x0c,0xc0) #
        self.writeReg(0x15,0x0d,0x41) #
        self.writeReg(0x15,0x0e,0xbc) #
        self.writeReg(0x15,0x0f,0x09) #
        self.writeReg(0x15,0x10,0x00) #
        self.writeReg(0x15,0x11,0x80) #
        self.writeReg(0x15,0x12,0x00) #
        self.writeReg(0x15,0x13,0x68) #
        self.writeReg(0x15,0x14,0x00) #
        self.writeReg(0x15,0x15,0x00) #
        self.writeReg(0x15,0x16,0x01) #group 2
        self.writeReg(0x15,0x17,0xc0) #
        self.writeReg(0x15,0x18,0x60) #
        self.writeReg(0x15,0x19,0x3c) #
        self.writeReg(0x15,0x1a,0x0d) #
        self.writeReg(0x15,0x1b,0x00) #
        self.writeReg(0x15,0x1c,0x80) #
        self.writeReg(0x15,0x1d,0x00) #
        self.writeReg(0x15,0x1e,0x68) #
        self.writeReg(0x15,0x1f,0x00) #
        self.writeReg(0x15,0x20,0x00) #
        self.writeReg(0x15,0x21,0x01) #group 3
        self.writeReg(0x15,0x22,0x40) #
        self.writeReg(0x15,0x23,0x60) #
        self.writeReg(0x15,0x24,0xbc) #
        self.writeReg(0x15,0x25,0x0c) #
        self.writeReg(0x15,0x26,0x00) #
        self.writeReg(0x15,0x27,0x80) #
        self.writeReg(0x15,0x28,0x00) #
        self.writeReg(0x15,0x29,0x68) #
        self.writeReg(0x15,0x2a,0x00) #
        self.writeReg(0x15,0x2b,0x00) #
        self.writeReg(0x15,0x2c,0x01) #group 4
        self.writeReg(0x15,0x2d,0x00) #
        self.writeReg(0x15,0x2e,0x60) #
        self.writeReg(0x15,0x2f,0x3c) #
        self.writeReg(0x15,0x30,0x0c) #
        self.writeReg(0x15,0x31,0x00) #
        self.writeReg(0x15,0x32,0x80) #
        self.writeReg(0x15,0x33,0x00) #
        self.writeReg(0x15,0x34,0x68) #
        self.writeReg(0x15,0x35,0x00) #
        self.writeReg(0x15,0x36,0x00) #
        self.writeReg(0x15,0x37,0x01) #group 5
        self.writeReg(0x15,0x38,0x00) #
        self.writeReg(0x15,0x39,0x60) #
        self.writeReg(0x15,0x3a,0x3c) #
        self.writeReg(0x15,0x3b,0x0c) #
        self.writeReg(0x15,0x3c,0x00) #
        self.writeReg(0x15,0x3d,0x80) #
        self.writeReg(0x15,0x3e,0x00) #
        self.writeReg(0x15,0x3f,0x68) #
        self.writeReg(0x15,0x40,0x00) #
        self.writeReg(0x15,0x41,0x00) #
        self.writeReg(0x15,0x42,0x01) #group 6
        self.writeReg(0x15,0x43,0x00) #
        self.writeReg(0x15,0x44,0x60) #
        self.writeReg(0x15,0x45,0x3c) #
        self.writeReg(0x15,0x46,0x0c) #
        self.writeReg(0x15,0x47,0x00) #
        self.writeReg(0x15,0x48,0x80) #
        self.writeReg(0x15,0x49,0x00) #
        self.writeReg(0x15,0x4a,0x68) #
        self.writeReg(0x15,0x4b,0x00) #
        self.writeReg(0x15,0x4c,0x00) #
        self.writeReg(0x15,0x4d,0x01) #group 7
        self.writeReg(0x15,0x4e,0x00) #
        self.writeReg(0x15,0x4f,0x60) #
        self.writeReg(0x15,0x50,0x3c) #
        self.writeReg(0x15,0x51,0x0c) #
        self.writeReg(0x15,0x52,0x00) #
        self.writeReg(0x15,0x53,0x80) #
        self.writeReg(0x15,0x54,0x00) #
        self.writeReg(0x15,0x55,0x68) #
        self.writeReg(0x15,0x56,0x00) #
        self.writeReg(0x15,0x57,0x00) #
        self.writeReg(0x09,0x05,0x00) #

    def func_04_11_UP_EQ_AUTO_ADJ(self):
        print("Cfg func_04_11_UP_EQ_AUTO_ADJ...")
        self.writeReg(0x10,0x3F,0x00) #rst man=0
        self.writeReg(0x10,0x01,0x00) #i2c_skip_init_sweep=0
        self.writeReg(0x10,0x09,0x02) #i2c_eq_dfe_mode=0,i2c_eq_d_e_check_en=0,i2c_adp_only_meas_init_eq_cfg=0,i2c_eq_seg_cfg_en=1,i2c_eq_init_sel=0
        self.writeReg(0x10,0x63,0x00) #
        self.writeReg(0x10,0x64,0x09) #
        self.writeReg(0x10,0x65,0xC4) #i2c_cdr_settle_cycles=10us
        self.writeReg(0x10,0x69,0xF0) #seg en
        self.writeReg(0x10,0x6A,0x03) #eg en
        self.writeReg(0x10,0x4B,0x00) #iic man !en
        self.writeReg(0x10,0x4A,0x00) #iic man !en
        self.writeReg(0x10,0x4D,0x00) #iic man !en
        self.writeReg(0x10,0x48,0x00) #iic man !en
        self.writeReg(0x10,0x4E,0x00) #iic man !en
        self.writeReg(0x10,0x4F,0x00) #iic man !en
        self.writeReg(0x10,0x6B,0x00) #iic man !en
        self.writeReg(0x10,0x6C,0x00) #iic man !en
        self.writeReg(0x10,0xE0,0x07) #freq man en =0
        self.writeReg(0x31,0x97,0x1B) #pl+eq en,group share
        self.writeReg(0x31,0xA4,0x13) #
        self.writeReg(0x31,0xA5,0x88) #eq no resp 200us
        self.writeReg(0x31,0xB6,0x40) #adj then check mode

    def func_04_12_all_cdr_freqtrack_man_en___0(self):
        print("Cfg func_04_12_all_cdr_freqtrack_man_en___0...")
        self.writeReg(0x10,0xe0,0x07) #
        self.writeReg(0x11,0xe0,0x07) #
        self.writeReg(0x12,0xe0,0x07) #
        self.writeReg(0x13,0xe0,0x07) #
        self.writeReg(0x14,0xe0,0x07) #
        self.writeReg(0x10,0x9a,0x09) #
        self.writeReg(0x11,0x9a,0x09) #
        self.writeReg(0x12,0x9a,0x09) #
        self.writeReg(0x13,0x9a,0x09) #
        self.writeReg(0x14,0x9a,0x09) #

    def func_04_13_all(self):
        print("Cfg func_04_13_all...")
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_02_PLL_no_ssc_init()
        self.func_01_10_USB_PHY_ALL()
        self.func_03_37_five_pipe_digital()
        self.func_04_01_HUB2p0_UP_PC_CONNCET()
        self.func_04_02_HUB_SS_PC_CONNECT()

    def func_04_14_hub_2p0_all(self):
        print("Cfg func_04_14_hub_2p0_all...")
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_02_PLL_no_ssc_init()
        self.func_01_10_USB_PHY_ALL()
        self.func_04_01_HUB2p0_UP_PC_CONNCET()

    def func_04_15_hub_fs_all(self):
        print("Cfg func_04_15_hub_fs_all...")
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_02_PLL_no_ssc_init()
        self.func_01_10_USB_PHY_ALL()
        self.func_04_00_HUB1p1_UP_PC_CONNCET()

    def func_04_16_all_up_support_long_channel(self):
        print("Cfg func_04_16_all_up_support_long_channel...")
        self.func_01_01_Chip_Power_Up()
        self.writeReg(0x09,0x64,0x00) #hub rst
        self.func_01_01_02_PLL_no_ssc_init()
        self.func_01_01_05_ANA_Rx_RAM_EQ()
        self.func_01_10_USB_PHY_ALL()
        self.func_01_01_12_USB3_Upcdr_adaptive_param()
        self.func_03_37_five_pipe_digital()
        self.func_03_50_only_pipe_up_eq_set()
        self.func_04_01_HUB2p0_UP_PC_CONNCET()
        self.func_04_02_HUB_SS_PC_CONNECT()

    def func_05_00_retimer_only(self):
        print("Cfg func_05_00_retimer_only...")
        self.writeReg(0x0a,0x00,0xff) #
        self.writeReg(0x0b,0x00,0xff) #
        self.writeReg(0x10,0x9a,0x08) #
        self.writeReg(0x11,0x9a,0x08) #
        self.writeReg(0x10,0x57,0x07) #
        self.writeReg(0x11,0x57,0x07) #
        self.writeReg(0x09,0x5f,0x05) #switch route sel = 5,pipe0+pipe1
        self.writeReg(0x09,0x64,0x06) #retimer rstn =1
        self.writeReg(0x31,0x52,0x4f) #rx powerdown man
        self.writeReg(0x31,0x4f,0x20) #tx p_state man
        self.writeReg(0x31,0x50,0x01) #
        self.writeReg(0x40,0x00,0xf9) #1us div
        self.writeReg(0x40,0x0e,0x00) #cp mode = 0
        self.writeReg(0x40,0xe2,0x08) #u2 inactive done had bug so go u2 auto
        self.writeReg(0x40,0xe3,0x01) #fix rxdet jump out step7
        self.writeReg(0x40,0x81,0x00) #u2 min fix for cover u1
        self.writeReg(0x40,0x82,0x40) #
        self.writeReg(0x40,0x83,0x2c) #
        self.writeReg(0x40,0xf0,0x03) #rg_statble_cnt,if so big,may tsx error handshake
        self.writeReg(0x32,0x52,0x4f) #rx powerdown man
        self.writeReg(0x32,0x4f,0x20) #tx p_state man
        self.writeReg(0x32,0x50,0x01) #
        self.writeReg(0x41,0x00,0xf9) #1us div
        self.writeReg(0x41,0x0e,0x00) #cp mode = 0
        self.writeReg(0x41,0xe2,0x08) #u2 inactive done had bug so go u2 auto
        self.writeReg(0x41,0xe3,0x01) #fix rxdet jump out step7
        self.writeReg(0x41,0x81,0x00) #u2 min fix for cover u1
        self.writeReg(0x41,0x82,0x40) #
        self.writeReg(0x41,0x83,0x2c) #
        self.writeReg(0x41,0xf0,0x03) #rg_statble_cnt,if so big,may tsx error handshake

    def func_05_01_retimer_skp_mode_0(self):
        print("Cfg func_05_01_retimer_skp_mode_0...")
        self.writeReg(0x31,0xc8,0x18) #skp remove up limit,if we no ssc,should bigger,fifo is 32
        self.writeReg(0x31,0xd3,0x10) #16 dn limit
        self.writeReg(0x31,0xd2,0x00) #skp add mode 0 for pipe
        self.writeReg(0x40,0xe7,0xc4) #retimer skp fifo mode 1,input skp rm
        self.writeReg(0x40,0xe8,0x70) #retimer skp fifo read start num = 7
        self.writeReg(0x40,0xe9,0xa7) #retimer skp cnt 167
        self.writeReg(0x32,0xc8,0x18) #skp remove up limit,if we no ssc,should bigger,fifo is 32
        self.writeReg(0x32,0xd3,0x10) #16 dn limit
        self.writeReg(0x32,0xd2,0x00) #skp add mode 0 for pipe
        self.writeReg(0x41,0xe7,0xc4) #retimer skp fifo mode 1,input skp rm
        self.writeReg(0x41,0xe8,0x70) #retimer skp fifo read start num = 7
        self.writeReg(0x41,0xe9,0xa7) #retimer skp cnt 167

    def func_05_02_retimer_skp_mode_1(self):
        print("Cfg func_05_02_retimer_skp_mode_1...")
        self.writeReg(0x31,0xc8,0x18) #skp remove up limit,if we no ssc,should bigger,fifo is 32
        self.writeReg(0x31,0xd3,0x10) #16 dn limit
        self.writeReg(0x31,0xd2,0x20) #skp add mode 1 for pipe
        self.writeReg(0x31,0xd1,0x10) #mode1 dn limit
        self.writeReg(0x31,0xd5,0x0c) #mode1 dn limit0
        self.writeReg(0x31,0xd6,0x0a) #mode1 dn limit1
        self.writeReg(0x31,0xfa,0x08) #mode1 dn limit2
        self.writeReg(0x31,0xfb,0x12) #mode1 insert 0+1
        self.writeReg(0x31,0xfc,0x48) #mode1 insert 2+3
        self.writeReg(0x40,0xe7,0xA0) #retimer skp nofifo mode 1,input skp not rm,skp bypass
        self.writeReg(0x32,0xc8,0x18) #skp remove up limit,if we no ssc,should bigger,fifo is 32
        self.writeReg(0x32,0xd3,0x10) #16 dn limit
        self.writeReg(0x32,0xd2,0x20) #skp add mode 1 for pipe
        self.writeReg(0x32,0xd1,0x10) #mode1 dn limit
        self.writeReg(0x32,0xd5,0x0c) #mode1 dn limit0
        self.writeReg(0x32,0xd6,0x0a) #mode1 dn limit1
        self.writeReg(0x32,0xfa,0x08) #mode1 dn limit2
        self.writeReg(0x32,0xfb,0x12) #mode1 insert 0+1
        self.writeReg(0x32,0xfc,0x48) #mode1 insert 2+3
        self.writeReg(0x41,0xe7,0xA0) #retimer skp nofifo mode 1,input skp not rm,skp bypass

    def func_05_98_retimer_dp1_cp_test(self):
        print("Cfg func_05_98_retimer_dp1_cp_test...")
        self.writeReg(0x40,0xe3,0x00) #fix rxdet jump out step7
        self.writeReg(0x40,0x0e,0x02) #cp mode en
        self.writeReg(0x40,0x04,0xff) #24ms never time out
        self.writeReg(0x40,0x05,0xff) #
        self.writeReg(0x41,0xe3,0x00) #fix rxdet jump out step7
        self.writeReg(0x41,0x0e,0x02) #cp mode en
        self.writeReg(0x41,0x04,0xff) #24ms never time out
        self.writeReg(0x41,0x05,0xff) #
        self.writeReg(0x32,0x28,0x06) #pipe dp1 man rxdet = 1

    def func_05_99_retimer_all(self):
        print("Cfg func_05_99_retimer_all...")
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_02_PLL_no_ssc_init()
        self.func_01_10_USB_PHY_ALL()
        self.func_04_08_all_pipe_disable_eq_start_ebuf_rst_auto()
        self.func_05_00_retimer_only()
        self.func_05_02_retimer_skp_mode_1()
        self.func_03_35_pipe_no_lowpower()
        self.func_03_36_dp2_dp3_debug_retimer_up_dn()

    def func_06_01_gse_pll_init(self):
        print("Cfg func_06_01_gse_pll_init...")
        self.func_01_01_02_PLL_no_ssc_init()
        self.writeReg(0x05,0xb4,0x1e) #RXCPLL RSV
        self.writeReg(0x05,0xb5,0x58) #RXCPLL RSV
        self.writeReg(0x04,0x23,0x42) #rxcpll off
        self.writeReg(0x04,0x23,0x43) #rxcpll on
        self.writeReg(0x09,0x75,0x7B) #u3 rx pll lock sel, u3_rx_clk_sel=1, TXRX both from RPLL

    def func_06_01_02_USB2v2_UP_POWERDOWN(self):
        print("Cfg func_06_01_02_USB2v2_UP_POWERDOWN...")
        self.writeReg(0x09,0x50,0x2a) #up powerdown
        self.writeReg(0x42,0x00,0x06) #rprd bypass
        self.writeReg(0x42,0x02,0x08) #usb2 phy clk off
        self.writeReg(0x42,0x04,0x00) #i2c set 0
        self.writeReg(0x42,0x05,0x00) #i2c set 0
        self.writeReg(0x42,0x06,0x00) #i2c set 0
        self.writeReg(0x42,0x07,0x00) #i2c set 0
        self.writeReg(0x42,0x08,0x00) #i2c set 0
        self.writeReg(0x42,0x09,0x00) #i2c set 0
        self.writeReg(0x42,0x0a,0x00) #i2c set 0
        self.writeReg(0x42,0x0b,0x00) #i2c set 0
        self.writeReg(0x42,0x0c,0x00) #i2c set 0
        self.writeReg(0x42,0x0d,0x00) #i2c set 0
        self.writeReg(0x42,0x0e,0x00) #i2c set 0
        self.writeReg(0x42,0x0f,0x00) #i2c set 0
        self.writeReg(0x42,0x10,0x00) #i2c set 0
        self.writeReg(0x42,0x11,0x00) #i2c set 0
        self.writeReg(0x42,0x12,0x00) #i2c set 0
        self.writeReg(0x42,0x1B,0x00) #rprd set to 0

    def func_06_01_03_USB3_UP_RX_LPmode_debug(self):
        print("Cfg func_06_01_03_USB3_UP_RX_LPmode_debug...")
        self.writeReg(0x10,0xec,0x4D) #prevga=4
        self.writeReg(0x10,0x4C,0x01) #khp_t=1
        self.writeReg(0x10,0x99,0x30) #enable pi 64step

    def func_06_02_gse_phy_init(self):
        print("Cfg func_06_02_gse_phy_init...")
        self.func_01_05_01_USB2v1_UP_ANA()
        self.func_01_05_04_USB2v2_UP_ANA()
        self.func_01_05_09_USB2v2_MODE2()
        self.func_01_06_01_PIPE_ANA_UP()
        self.func_01_07_01_USB3_UP_Rx_ANA()
        self.func_01_08_01_USB3_UP_Tx_ANA()
        self.func_01_01_03_ADC_test()

    def func_06_03_gse_utmi_init(self):
        print("Cfg func_06_03_gse_utmi_init...")

    def func_06_04_gse_pipe_init(self):
        print("Cfg func_06_04_gse_pipe_init...")
        self.writeReg(0x31,0xff,0x40) #
        self.writeReg(0x31,0xff,0xc0) #
        self.writeReg(0x31,0xff,0xc0) #
        self.writeReg(0x31,0xff,0xe0) #
        self.writeReg(0x31,0xde,0x00) #
        self.writeReg(0x31,0xdf,0x00) #
        self.writeReg(0x31,0xde,0x00) #
        self.writeReg(0x31,0xd8,0x00) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xe5,0x10) #
        self.writeReg(0x31,0xe5,0x30) #
        self.writeReg(0x31,0xe5,0x34) #
        self.writeReg(0x31,0xe5,0x3c) #
        self.writeReg(0x31,0xe5,0x3d) #
        self.writeReg(0x31,0xe5,0x3f) #
        self.writeReg(0x31,0xe5,0x7f) #
        self.writeReg(0x31,0xe5,0xff) #
        self.writeReg(0x31,0xff,0xe4) #
        self.writeReg(0x31,0xff,0xec) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xe6,0x00) #
        self.writeReg(0x31,0xff,0xec) #
        self.writeReg(0x31,0xff,0xec) #
        self.writeReg(0x31,0x05,0x00) #
        self.writeReg(0x31,0x06,0x00) #
        self.writeReg(0x31,0x07,0x00) #
        self.writeReg(0x31,0x0d,0x00) #
        self.writeReg(0x31,0x0e,0x00) #
        self.writeReg(0x31,0x0e,0x00) #
        self.writeReg(0x31,0x0f,0x00) #
        self.writeReg(0x31,0x0e,0x00) #
        self.writeReg(0x31,0x0f,0x40) #
        self.writeReg(0x31,0x0e,0x00) #
        self.writeReg(0x31,0x0f,0x60) #
        self.writeReg(0x31,0x0e,0x00) #
        self.writeReg(0x31,0x0f,0x70) #
        self.writeReg(0x31,0x0e,0x40) #
        self.writeReg(0x31,0x0f,0x74) #
        self.writeReg(0x31,0x0e,0x40) #
        self.writeReg(0x31,0x0f,0x76) #
        self.writeReg(0x31,0x0d,0x00) #
        self.writeReg(0x31,0x0f,0x77) #
        self.writeReg(0x31,0x0d,0x00) #
        self.writeReg(0x31,0x10,0x80) #
        self.writeReg(0x31,0x0d,0x04) #
        self.writeReg(0x31,0x10,0x80) #
        self.writeReg(0x31,0x0d,0x04) #
        self.writeReg(0x31,0x10,0xa0) #
        self.writeReg(0x31,0x0d,0x14) #
        self.writeReg(0x31,0x10,0xb0) #
        self.writeReg(0x31,0x0d,0x34) #
        self.writeReg(0x31,0x10,0xb8) #
        self.writeReg(0x31,0x0d,0x34) #
        self.writeReg(0x31,0x10,0xbc) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x53,0xab) #
        self.writeReg(0x31,0x53,0xab) #
        self.writeReg(0x31,0x53,0xab) #
        self.writeReg(0x31,0x53,0xaa) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x52,0x4f) #
        self.writeReg(0x31,0x54,0x82) #
        self.writeReg(0x31,0x54,0x88) #
        self.writeReg(0x31,0x55,0x84) #
        self.writeReg(0x31,0x55,0x88) #
        self.writeReg(0x31,0x56,0x00) #
        self.writeReg(0x31,0x56,0x00) #
        self.writeReg(0x31,0x56,0x00) #
        self.writeReg(0x31,0x4f,0x80) #
        self.writeReg(0x31,0x4f,0xc0) #
        self.writeReg(0x31,0x70,0x01) #
        self.writeReg(0x31,0x71,0x5e) #
        self.writeReg(0x31,0x72,0x64) #
        self.writeReg(0x31,0x73,0x64) #
        self.writeReg(0x31,0x74,0x40) #
        self.writeReg(0x31,0x74,0x40) #
        self.writeReg(0x31,0x75,0x04) #
        self.writeReg(0x31,0x76,0x00) #
        self.writeReg(0x31,0x77,0x03) #
        self.writeReg(0x31,0x78,0xe8) #
        self.writeReg(0x31,0x74,0x40) #
        self.writeReg(0x31,0x76,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x48,0x00) #
        self.writeReg(0x31,0x49,0x00) #
        self.writeReg(0x31,0x49,0x02) #
        self.writeReg(0x31,0x49,0x02) #
        self.writeReg(0x31,0x49,0x0a) #
        self.writeReg(0x31,0x49,0x0a) #
        self.writeReg(0x31,0x49,0x0a) #
        self.writeReg(0x31,0x46,0x05) #
        self.writeReg(0x31,0x47,0xff) #
        self.writeReg(0x31,0x4f,0xc0) #
        self.writeReg(0x31,0x4f,0xc0) #
        self.writeReg(0x31,0x50,0x00) #
        self.writeReg(0x31,0x64,0x30) #
        self.writeReg(0x31,0x63,0x00) #
        self.writeReg(0x31,0x63,0x00) #
        self.writeReg(0x31,0x63,0x00) #
        self.writeReg(0x31,0x64,0x30) #
        self.writeReg(0x31,0x80,0x00) #
        self.writeReg(0x31,0x82,0x00) #
        self.writeReg(0x31,0x83,0xc8) #
        self.writeReg(0x31,0x88,0x8f) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x82,0x00) #
        self.writeReg(0x31,0x82,0x00) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x8a,0x50) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x8b,0x11) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x8b,0x11) #
        self.writeReg(0x31,0x88,0xcf) #
        self.writeReg(0x31,0x8e,0x32) #
        self.writeReg(0x31,0x8f,0x00) #
        self.writeReg(0x31,0x8c,0x28) #
        self.writeReg(0x31,0x89,0x0f) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x95,0x00) #
        self.writeReg(0x31,0x97,0x12) #
        self.writeReg(0x31,0x97,0x92) #
        self.writeReg(0x31,0x97,0x92) #
        self.writeReg(0x31,0x97,0x92) #
        self.writeReg(0x31,0x97,0x92) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0xb6,0x40) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0x97,0x9a) #
        self.writeReg(0x31,0xb5,0x00) #
        self.writeReg(0x31,0xae,0x80) #
        self.writeReg(0x31,0xaa,0x2a) #
        self.writeReg(0x31,0xab,0xf8) #
        self.writeReg(0x31,0xaf,0x00) #
        self.writeReg(0x31,0xac,0x00) #
        self.writeReg(0x31,0xad,0x64) #
        self.writeReg(0x31,0xb6,0x40) #
        self.writeReg(0x31,0xb0,0x00) #
        self.writeReg(0x31,0xb1,0x00) #
        self.writeReg(0x31,0xb6,0x40) #
        self.writeReg(0x31,0xb2,0x00) #
        self.writeReg(0x31,0xb3,0x00) #
        self.writeReg(0x31,0x9a,0x1e) #
        self.writeReg(0x31,0xa4,0xff) #
        self.writeReg(0x31,0xa5,0xff) #
        self.writeReg(0x31,0xa7,0x00) #
        self.writeReg(0x31,0xa8,0x00) #
        self.writeReg(0x31,0xa9,0x07) #
        self.writeReg(0x31,0xa6,0x00) #
        self.writeReg(0x31,0x9d,0x00) #
        self.writeReg(0x31,0x9e,0x00) #
        self.writeReg(0x31,0x9f,0xc8) #
        self.writeReg(0x31,0xa2,0x00) #
        self.writeReg(0x31,0xa3,0x00) #
        self.writeReg(0x31,0x9b,0x00) #
        self.writeReg(0x31,0xa0,0x00) #
        self.writeReg(0x31,0xa1,0x08) #
        self.writeReg(0x31,0x9c,0x00) #
        self.writeReg(0x31,0xc6,0x90) #
        self.writeReg(0x31,0xc6,0x98) #
        self.writeReg(0x31,0xc6,0x98) #
        self.writeReg(0x31,0xc8,0x20) #
        self.writeReg(0x31,0xc6,0x98) #
        self.writeReg(0x31,0xc6,0x98) #
        self.writeReg(0x31,0xc6,0x18) #
        self.writeReg(0x31,0xc9,0x0e) #
        self.writeReg(0x31,0xc9,0x0e) #
        self.writeReg(0x31,0xc9,0x1e) #
        self.writeReg(0x31,0xc9,0x1a) #
        self.writeReg(0x31,0xc9,0x18) #
        self.writeReg(0x31,0xc9,0x18) #
        self.writeReg(0x31,0xc9,0x18) #
        self.writeReg(0x31,0xca,0x20) #
        self.writeReg(0x31,0xca,0x30) #
        self.writeReg(0x31,0xca,0x38) #
        self.writeReg(0x31,0xca,0x3c) #
        self.writeReg(0x31,0xd2,0x50) #
        self.writeReg(0x31,0xd2,0x58) #
        self.writeReg(0x31,0xd2,0x58) #
        self.writeReg(0x31,0xd2,0x58) #
        self.writeReg(0x31,0xd3,0x20) #
        self.writeReg(0x31,0xd8,0x40) #
        self.writeReg(0x31,0xd8,0x60) #
        self.writeReg(0x31,0x14,0x10) #
        self.writeReg(0x31,0x13,0x07) #
        self.writeReg(0x31,0x13,0x07) #
        self.writeReg(0x31,0x14,0x10) #
        self.writeReg(0x31,0x14,0x10) #
        self.writeReg(0x31,0x17,0x20) #
        self.writeReg(0x31,0x17,0x30) #
        self.writeReg(0x31,0x14,0x10) #
        self.writeReg(0x31,0x1b,0x00) #
        self.writeReg(0x31,0x17,0x30) #
        self.writeReg(0x31,0x17,0x30) #
        self.writeReg(0x31,0x19,0x00) #
        self.writeReg(0x31,0x19,0x00) #
        self.writeReg(0x31,0x1b,0x00) #
        self.writeReg(0x31,0x1b,0x00) #
        self.writeReg(0x31,0x1c,0x02) #
        self.writeReg(0x31,0x1e,0x00) #
        self.writeReg(0x31,0x1c,0x00) #
        self.writeReg(0x31,0x1c,0x01) #
        self.writeReg(0x31,0x1f,0x10) #
        self.writeReg(0x31,0x1e,0x00) #
        self.writeReg(0x31,0x1e,0x08) #
        self.writeReg(0x31,0x1e,0x08) #
        self.writeReg(0x31,0x1e,0x0c) #
        self.writeReg(0x31,0x1e,0x08) #
        self.writeReg(0x31,0x1e,0x00) #
        self.writeReg(0x31,0x28,0x00) #
        self.writeReg(0x31,0x28,0x00) #
        self.writeReg(0x31,0x28,0x00) #
        self.writeReg(0x31,0x28,0x00) #
        self.writeReg(0x31,0x28,0x00) #
        self.writeReg(0x31,0x21,0xc2) #
        self.writeReg(0x31,0x21,0xe2) #
        self.writeReg(0x31,0x19,0x00) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2d,0x1b) #
        self.writeReg(0x31,0x2e,0x6f) #
        self.writeReg(0x31,0x2f,0xf6) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2d,0x0b) #
        self.writeReg(0x31,0x2f,0xf6) #
        self.writeReg(0x31,0x30,0xfa) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2d,0x03) #
        self.writeReg(0x31,0x31,0xff) #
        self.writeReg(0x31,0x32,0xf0) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2d,0x03) #
        self.writeReg(0x31,0x34,0x6f) #
        self.writeReg(0x31,0x35,0xf0) #
        self.writeReg(0x31,0x2c,0x30) #
        self.writeReg(0x31,0x2d,0x01) #
        self.writeReg(0x31,0x35,0xf0) #
        self.writeReg(0x31,0x36,0x00) #
        self.writeReg(0x31,0x37,0x00) #
        self.writeReg(0x31,0x38,0x10) #
        self.writeReg(0x31,0x2d,0x00) #

    def func_06_20_gse_usb_set_all(self):
        print("Cfg func_06_20_gse_usb_set_all...")
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_Chip_Power_Up()
        self.func_01_01_002_Hub_remove_reset()
        self.func_06_01_gse_pll_init()
        self.func_06_02_gse_phy_init()
        self.func_06_03_gse_utmi_init()
        self.func_06_04_gse_pipe_init()

    def func_11_01_dp4_debug_up_usb2v2_adbug3(self):
        print("Cfg func_11_01_dp4_debug_up_usb2v2_adbug3...")
        self.writeReg(0x09,0xc4,0x21) #misc debug sel
        self.writeReg(0x09,0xc7,0x00) #misc debug io sel
        self.func_03_31_up_debug_testdata()

